/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1176.0, "minX": 0.0, "maxY": 86448.0, "series": [{"data": [[0.0, 3331.0], [0.1, 3331.0], [0.2, 3331.0], [0.3, 3331.0], [0.4, 3331.0], [0.5, 4505.0], [0.6, 4505.0], [0.7, 4505.0], [0.8, 4505.0], [0.9, 4505.0], [1.0, 40752.0], [1.1, 40752.0], [1.2, 40752.0], [1.3, 40752.0], [1.4, 40752.0], [1.5, 47323.0], [1.6, 47323.0], [1.7, 47323.0], [1.8, 47323.0], [1.9, 47323.0], [2.0, 51539.0], [2.1, 51539.0], [2.2, 51539.0], [2.3, 51539.0], [2.4, 51539.0], [2.5, 52658.0], [2.6, 52658.0], [2.7, 52658.0], [2.8, 52658.0], [2.9, 52658.0], [3.0, 53793.0], [3.1, 53793.0], [3.2, 53793.0], [3.3, 53793.0], [3.4, 53793.0], [3.5, 60285.0], [3.6, 60285.0], [3.7, 60285.0], [3.8, 60285.0], [3.9, 60285.0], [4.0, 61097.0], [4.1, 61097.0], [4.2, 61097.0], [4.3, 61097.0], [4.4, 61097.0], [4.5, 61930.0], [4.6, 61930.0], [4.7, 61930.0], [4.8, 61930.0], [4.9, 61930.0], [5.0, 61947.0], [5.1, 61947.0], [5.2, 61947.0], [5.3, 61947.0], [5.4, 61947.0], [5.5, 61969.0], [5.6, 61969.0], [5.7, 61969.0], [5.8, 61969.0], [5.9, 61969.0], [6.0, 63053.0], [6.1, 63053.0], [6.2, 63053.0], [6.3, 63053.0], [6.4, 63053.0], [6.5, 63221.0], [6.6, 63221.0], [6.7, 63221.0], [6.8, 63221.0], [6.9, 63221.0], [7.0, 63823.0], [7.1, 63823.0], [7.2, 63823.0], [7.3, 63823.0], [7.4, 63823.0], [7.5, 64118.0], [7.6, 64118.0], [7.7, 64118.0], [7.8, 64118.0], [7.9, 64118.0], [8.0, 64221.0], [8.1, 64221.0], [8.2, 64221.0], [8.3, 64221.0], [8.4, 64221.0], [8.5, 64356.0], [8.6, 64356.0], [8.7, 64356.0], [8.8, 64356.0], [8.9, 64356.0], [9.0, 64540.0], [9.1, 64540.0], [9.2, 64540.0], [9.3, 64540.0], [9.4, 64540.0], [9.5, 64993.0], [9.6, 64993.0], [9.7, 64993.0], [9.8, 64993.0], [9.9, 64993.0], [10.0, 65009.0], [10.1, 65009.0], [10.2, 65009.0], [10.3, 65009.0], [10.4, 65009.0], [10.5, 65041.0], [10.6, 65041.0], [10.7, 65041.0], [10.8, 65041.0], [10.9, 65041.0], [11.0, 65720.0], [11.1, 65720.0], [11.2, 65720.0], [11.3, 65720.0], [11.4, 65720.0], [11.5, 66252.0], [11.6, 66252.0], [11.7, 66252.0], [11.8, 66252.0], [11.9, 66252.0], [12.0, 66272.0], [12.1, 66272.0], [12.2, 66272.0], [12.3, 66272.0], [12.4, 66272.0], [12.5, 66631.0], [12.6, 66631.0], [12.7, 66631.0], [12.8, 66631.0], [12.9, 66631.0], [13.0, 66656.0], [13.1, 66656.0], [13.2, 66656.0], [13.3, 66656.0], [13.4, 66656.0], [13.5, 66811.0], [13.6, 66811.0], [13.7, 66811.0], [13.8, 66811.0], [13.9, 66811.0], [14.0, 66850.0], [14.1, 66850.0], [14.2, 66850.0], [14.3, 66850.0], [14.4, 66850.0], [14.5, 66850.0], [14.6, 66850.0], [14.7, 66850.0], [14.8, 66850.0], [14.9, 66850.0], [15.0, 66885.0], [15.1, 66885.0], [15.2, 66885.0], [15.3, 66885.0], [15.4, 66885.0], [15.5, 67374.0], [15.6, 67374.0], [15.7, 67374.0], [15.8, 67374.0], [15.9, 67374.0], [16.0, 67564.0], [16.1, 67564.0], [16.2, 67564.0], [16.3, 67564.0], [16.4, 67564.0], [16.5, 67648.0], [16.6, 67648.0], [16.7, 67648.0], [16.8, 67648.0], [16.9, 67648.0], [17.0, 67910.0], [17.1, 67910.0], [17.2, 67910.0], [17.3, 67910.0], [17.4, 67910.0], [17.5, 68010.0], [17.6, 68010.0], [17.7, 68010.0], [17.8, 68010.0], [17.9, 68010.0], [18.0, 68444.0], [18.1, 68444.0], [18.2, 68444.0], [18.3, 68444.0], [18.4, 68444.0], [18.5, 68452.0], [18.6, 68452.0], [18.7, 68452.0], [18.8, 68452.0], [18.9, 68452.0], [19.0, 68741.0], [19.1, 68741.0], [19.2, 68741.0], [19.3, 68741.0], [19.4, 68741.0], [19.5, 68767.0], [19.6, 68767.0], [19.7, 68767.0], [19.8, 68767.0], [19.9, 68767.0], [20.0, 68945.0], [20.1, 68945.0], [20.2, 68945.0], [20.3, 68945.0], [20.4, 68945.0], [20.5, 69018.0], [20.6, 69018.0], [20.7, 69018.0], [20.8, 69018.0], [20.9, 69018.0], [21.0, 69296.0], [21.1, 69296.0], [21.2, 69296.0], [21.3, 69296.0], [21.4, 69296.0], [21.5, 69472.0], [21.6, 69472.0], [21.7, 69472.0], [21.8, 69472.0], [21.9, 69472.0], [22.0, 69607.0], [22.1, 69607.0], [22.2, 69607.0], [22.3, 69607.0], [22.4, 69607.0], [22.5, 70100.0], [22.6, 70100.0], [22.7, 70100.0], [22.8, 70100.0], [22.9, 70100.0], [23.0, 70365.0], [23.1, 70365.0], [23.2, 70365.0], [23.3, 70365.0], [23.4, 70365.0], [23.5, 70499.0], [23.6, 70499.0], [23.7, 70499.0], [23.8, 70499.0], [23.9, 70499.0], [24.0, 70872.0], [24.1, 70872.0], [24.2, 70872.0], [24.3, 70872.0], [24.4, 70872.0], [24.5, 71492.0], [24.6, 71492.0], [24.7, 71492.0], [24.8, 71492.0], [24.9, 71492.0], [25.0, 71589.0], [25.1, 71589.0], [25.2, 71589.0], [25.3, 71589.0], [25.4, 71589.0], [25.5, 71663.0], [25.6, 71663.0], [25.7, 71663.0], [25.8, 71663.0], [25.9, 71663.0], [26.0, 71708.0], [26.1, 71708.0], [26.2, 71708.0], [26.3, 71708.0], [26.4, 71708.0], [26.5, 71737.0], [26.6, 71737.0], [26.7, 71737.0], [26.8, 71737.0], [26.9, 71737.0], [27.0, 71912.0], [27.1, 71912.0], [27.2, 71912.0], [27.3, 71912.0], [27.4, 71912.0], [27.5, 71932.0], [27.6, 71932.0], [27.7, 71932.0], [27.8, 71932.0], [27.9, 71932.0], [28.0, 72342.0], [28.1, 72342.0], [28.2, 72342.0], [28.3, 72342.0], [28.4, 72342.0], [28.5, 72800.0], [28.6, 72800.0], [28.7, 72800.0], [28.8, 72800.0], [28.9, 72800.0], [29.0, 73008.0], [29.1, 73008.0], [29.2, 73008.0], [29.3, 73008.0], [29.4, 73008.0], [29.5, 73014.0], [29.6, 73014.0], [29.7, 73014.0], [29.8, 73014.0], [29.9, 73014.0], [30.0, 73085.0], [30.1, 73085.0], [30.2, 73085.0], [30.3, 73085.0], [30.4, 73085.0], [30.5, 73182.0], [30.6, 73182.0], [30.7, 73182.0], [30.8, 73182.0], [30.9, 73182.0], [31.0, 73280.0], [31.1, 73280.0], [31.2, 73280.0], [31.3, 73280.0], [31.4, 73280.0], [31.5, 73482.0], [31.6, 73482.0], [31.7, 73482.0], [31.8, 73482.0], [31.9, 73482.0], [32.0, 74195.0], [32.1, 74195.0], [32.2, 74195.0], [32.3, 74195.0], [32.4, 74195.0], [32.5, 74519.0], [32.6, 74519.0], [32.7, 74519.0], [32.8, 74519.0], [32.9, 74519.0], [33.0, 74528.0], [33.1, 74528.0], [33.2, 74528.0], [33.3, 74528.0], [33.4, 74528.0], [33.5, 74589.0], [33.6, 74589.0], [33.7, 74589.0], [33.8, 74589.0], [33.9, 74589.0], [34.0, 74899.0], [34.1, 74899.0], [34.2, 74899.0], [34.3, 74899.0], [34.4, 74899.0], [34.5, 75478.0], [34.6, 75478.0], [34.7, 75478.0], [34.8, 75478.0], [34.9, 75478.0], [35.0, 75579.0], [35.1, 75579.0], [35.2, 75579.0], [35.3, 75579.0], [35.4, 75579.0], [35.5, 75943.0], [35.6, 75943.0], [35.7, 75943.0], [35.8, 75943.0], [35.9, 75943.0], [36.0, 76453.0], [36.1, 76453.0], [36.2, 76453.0], [36.3, 76453.0], [36.4, 76453.0], [36.5, 76784.0], [36.6, 76784.0], [36.7, 76784.0], [36.8, 76784.0], [36.9, 76784.0], [37.0, 76797.0], [37.1, 76797.0], [37.2, 76797.0], [37.3, 76797.0], [37.4, 76797.0], [37.5, 76888.0], [37.6, 76888.0], [37.7, 76888.0], [37.8, 76888.0], [37.9, 76888.0], [38.0, 76896.0], [38.1, 76896.0], [38.2, 76896.0], [38.3, 76896.0], [38.4, 76896.0], [38.5, 76920.0], [38.6, 76920.0], [38.7, 76920.0], [38.8, 76920.0], [38.9, 76920.0], [39.0, 77035.0], [39.1, 77035.0], [39.2, 77035.0], [39.3, 77035.0], [39.4, 77035.0], [39.5, 77053.0], [39.6, 77053.0], [39.7, 77053.0], [39.8, 77053.0], [39.9, 77053.0], [40.0, 77175.0], [40.1, 77175.0], [40.2, 77175.0], [40.3, 77175.0], [40.4, 77175.0], [40.5, 77553.0], [40.6, 77553.0], [40.7, 77553.0], [40.8, 77553.0], [40.9, 77553.0], [41.0, 77749.0], [41.1, 77749.0], [41.2, 77749.0], [41.3, 77749.0], [41.4, 77749.0], [41.5, 77773.0], [41.6, 77773.0], [41.7, 77773.0], [41.8, 77773.0], [41.9, 77773.0], [42.0, 77780.0], [42.1, 77780.0], [42.2, 77780.0], [42.3, 77780.0], [42.4, 77780.0], [42.5, 78170.0], [42.6, 78170.0], [42.7, 78170.0], [42.8, 78170.0], [42.9, 78170.0], [43.0, 78357.0], [43.1, 78357.0], [43.2, 78357.0], [43.3, 78357.0], [43.4, 78357.0], [43.5, 78685.0], [43.6, 78685.0], [43.7, 78685.0], [43.8, 78685.0], [43.9, 78685.0], [44.0, 78778.0], [44.1, 78778.0], [44.2, 78778.0], [44.3, 78778.0], [44.4, 78778.0], [44.5, 78848.0], [44.6, 78848.0], [44.7, 78848.0], [44.8, 78848.0], [44.9, 78848.0], [45.0, 78892.0], [45.1, 78892.0], [45.2, 78892.0], [45.3, 78892.0], [45.4, 78892.0], [45.5, 78893.0], [45.6, 78893.0], [45.7, 78893.0], [45.8, 78893.0], [45.9, 78893.0], [46.0, 79069.0], [46.1, 79069.0], [46.2, 79069.0], [46.3, 79069.0], [46.4, 79069.0], [46.5, 79114.0], [46.6, 79114.0], [46.7, 79114.0], [46.8, 79114.0], [46.9, 79114.0], [47.0, 79165.0], [47.1, 79165.0], [47.2, 79165.0], [47.3, 79165.0], [47.4, 79165.0], [47.5, 79388.0], [47.6, 79388.0], [47.7, 79388.0], [47.8, 79388.0], [47.9, 79388.0], [48.0, 79632.0], [48.1, 79632.0], [48.2, 79632.0], [48.3, 79632.0], [48.4, 79632.0], [48.5, 79639.0], [48.6, 79639.0], [48.7, 79639.0], [48.8, 79639.0], [48.9, 79639.0], [49.0, 79651.0], [49.1, 79651.0], [49.2, 79651.0], [49.3, 79651.0], [49.4, 79651.0], [49.5, 79738.0], [49.6, 79738.0], [49.7, 79738.0], [49.8, 79738.0], [49.9, 79738.0], [50.0, 79950.0], [50.1, 79950.0], [50.2, 79950.0], [50.3, 79950.0], [50.4, 79950.0], [50.5, 80159.0], [50.6, 80159.0], [50.7, 80159.0], [50.8, 80159.0], [50.9, 80159.0], [51.0, 80218.0], [51.1, 80218.0], [51.2, 80218.0], [51.3, 80218.0], [51.4, 80218.0], [51.5, 80296.0], [51.6, 80296.0], [51.7, 80296.0], [51.8, 80296.0], [51.9, 80296.0], [52.0, 80385.0], [52.1, 80385.0], [52.2, 80385.0], [52.3, 80385.0], [52.4, 80385.0], [52.5, 80422.0], [52.6, 80422.0], [52.7, 80422.0], [52.8, 80422.0], [52.9, 80422.0], [53.0, 80541.0], [53.1, 80541.0], [53.2, 80541.0], [53.3, 80541.0], [53.4, 80541.0], [53.5, 80573.0], [53.6, 80573.0], [53.7, 80573.0], [53.8, 80573.0], [53.9, 80573.0], [54.0, 80604.0], [54.1, 80604.0], [54.2, 80604.0], [54.3, 80604.0], [54.4, 80604.0], [54.5, 80674.0], [54.6, 80674.0], [54.7, 80674.0], [54.8, 80674.0], [54.9, 80674.0], [55.0, 80700.0], [55.1, 80700.0], [55.2, 80700.0], [55.3, 80700.0], [55.4, 80700.0], [55.5, 80773.0], [55.6, 80773.0], [55.7, 80773.0], [55.8, 80773.0], [55.9, 80773.0], [56.0, 80823.0], [56.1, 80823.0], [56.2, 80823.0], [56.3, 80823.0], [56.4, 80823.0], [56.5, 80824.0], [56.6, 80824.0], [56.7, 80824.0], [56.8, 80824.0], [56.9, 80824.0], [57.0, 80847.0], [57.1, 80847.0], [57.2, 80847.0], [57.3, 80847.0], [57.4, 80847.0], [57.5, 81020.0], [57.6, 81020.0], [57.7, 81020.0], [57.8, 81020.0], [57.9, 81020.0], [58.0, 81057.0], [58.1, 81057.0], [58.2, 81057.0], [58.3, 81057.0], [58.4, 81057.0], [58.5, 81146.0], [58.6, 81146.0], [58.7, 81146.0], [58.8, 81146.0], [58.9, 81146.0], [59.0, 81162.0], [59.1, 81162.0], [59.2, 81162.0], [59.3, 81162.0], [59.4, 81162.0], [59.5, 81224.0], [59.6, 81224.0], [59.7, 81224.0], [59.8, 81224.0], [59.9, 81224.0], [60.0, 81274.0], [60.1, 81274.0], [60.2, 81274.0], [60.3, 81274.0], [60.4, 81274.0], [60.5, 81290.0], [60.6, 81290.0], [60.7, 81290.0], [60.8, 81290.0], [60.9, 81290.0], [61.0, 81459.0], [61.1, 81459.0], [61.2, 81459.0], [61.3, 81459.0], [61.4, 81459.0], [61.5, 81498.0], [61.6, 81498.0], [61.7, 81498.0], [61.8, 81498.0], [61.9, 81498.0], [62.0, 81575.0], [62.1, 81575.0], [62.2, 81575.0], [62.3, 81575.0], [62.4, 81575.0], [62.5, 81618.0], [62.6, 81618.0], [62.7, 81618.0], [62.8, 81618.0], [62.9, 81618.0], [63.0, 81640.0], [63.1, 81640.0], [63.2, 81640.0], [63.3, 81640.0], [63.4, 81640.0], [63.5, 81701.0], [63.6, 81701.0], [63.7, 81701.0], [63.8, 81701.0], [63.9, 81701.0], [64.0, 81712.0], [64.1, 81712.0], [64.2, 81712.0], [64.3, 81712.0], [64.4, 81712.0], [64.5, 81714.0], [64.6, 81714.0], [64.7, 81714.0], [64.8, 81714.0], [64.9, 81714.0], [65.0, 81816.0], [65.1, 81816.0], [65.2, 81816.0], [65.3, 81816.0], [65.4, 81816.0], [65.5, 81848.0], [65.6, 81848.0], [65.7, 81848.0], [65.8, 81848.0], [65.9, 81848.0], [66.0, 81851.0], [66.1, 81851.0], [66.2, 81851.0], [66.3, 81851.0], [66.4, 81851.0], [66.5, 81910.0], [66.6, 81910.0], [66.7, 81910.0], [66.8, 81910.0], [66.9, 81910.0], [67.0, 82048.0], [67.1, 82048.0], [67.2, 82048.0], [67.3, 82048.0], [67.4, 82048.0], [67.5, 82077.0], [67.6, 82077.0], [67.7, 82077.0], [67.8, 82077.0], [67.9, 82077.0], [68.0, 82078.0], [68.1, 82078.0], [68.2, 82078.0], [68.3, 82078.0], [68.4, 82078.0], [68.5, 82306.0], [68.6, 82306.0], [68.7, 82306.0], [68.8, 82306.0], [68.9, 82306.0], [69.0, 82320.0], [69.1, 82320.0], [69.2, 82320.0], [69.3, 82320.0], [69.4, 82320.0], [69.5, 82390.0], [69.6, 82390.0], [69.7, 82390.0], [69.8, 82390.0], [69.9, 82390.0], [70.0, 82465.0], [70.1, 82465.0], [70.2, 82465.0], [70.3, 82465.0], [70.4, 82465.0], [70.5, 82510.0], [70.6, 82510.0], [70.7, 82510.0], [70.8, 82510.0], [70.9, 82510.0], [71.0, 82546.0], [71.1, 82546.0], [71.2, 82546.0], [71.3, 82546.0], [71.4, 82546.0], [71.5, 82564.0], [71.6, 82564.0], [71.7, 82564.0], [71.8, 82564.0], [71.9, 82564.0], [72.0, 82602.0], [72.1, 82602.0], [72.2, 82602.0], [72.3, 82602.0], [72.4, 82602.0], [72.5, 82788.0], [72.6, 82788.0], [72.7, 82788.0], [72.8, 82788.0], [72.9, 82788.0], [73.0, 82795.0], [73.1, 82795.0], [73.2, 82795.0], [73.3, 82795.0], [73.4, 82795.0], [73.5, 82802.0], [73.6, 82802.0], [73.7, 82802.0], [73.8, 82802.0], [73.9, 82802.0], [74.0, 82837.0], [74.1, 82837.0], [74.2, 82837.0], [74.3, 82837.0], [74.4, 82837.0], [74.5, 82838.0], [74.6, 82838.0], [74.7, 82838.0], [74.8, 82838.0], [74.9, 82838.0], [75.0, 83047.0], [75.1, 83047.0], [75.2, 83047.0], [75.3, 83047.0], [75.4, 83047.0], [75.5, 83087.0], [75.6, 83087.0], [75.7, 83087.0], [75.8, 83087.0], [75.9, 83087.0], [76.0, 83150.0], [76.1, 83150.0], [76.2, 83150.0], [76.3, 83150.0], [76.4, 83150.0], [76.5, 83160.0], [76.6, 83160.0], [76.7, 83160.0], [76.8, 83160.0], [76.9, 83160.0], [77.0, 83206.0], [77.1, 83206.0], [77.2, 83206.0], [77.3, 83206.0], [77.4, 83206.0], [77.5, 83300.0], [77.6, 83300.0], [77.7, 83300.0], [77.8, 83300.0], [77.9, 83300.0], [78.0, 83318.0], [78.1, 83318.0], [78.2, 83318.0], [78.3, 83318.0], [78.4, 83318.0], [78.5, 83334.0], [78.6, 83334.0], [78.7, 83334.0], [78.8, 83334.0], [78.9, 83334.0], [79.0, 83442.0], [79.1, 83442.0], [79.2, 83442.0], [79.3, 83442.0], [79.4, 83442.0], [79.5, 83456.0], [79.6, 83456.0], [79.7, 83456.0], [79.8, 83456.0], [79.9, 83456.0], [80.0, 83472.0], [80.1, 83472.0], [80.2, 83472.0], [80.3, 83472.0], [80.4, 83472.0], [80.5, 83473.0], [80.6, 83473.0], [80.7, 83473.0], [80.8, 83473.0], [80.9, 83473.0], [81.0, 83478.0], [81.1, 83478.0], [81.2, 83478.0], [81.3, 83478.0], [81.4, 83478.0], [81.5, 83543.0], [81.6, 83543.0], [81.7, 83543.0], [81.8, 83543.0], [81.9, 83543.0], [82.0, 83545.0], [82.1, 83545.0], [82.2, 83545.0], [82.3, 83545.0], [82.4, 83545.0], [82.5, 83552.0], [82.6, 83552.0], [82.7, 83552.0], [82.8, 83552.0], [82.9, 83552.0], [83.0, 83554.0], [83.1, 83554.0], [83.2, 83554.0], [83.3, 83554.0], [83.4, 83554.0], [83.5, 83573.0], [83.6, 83573.0], [83.7, 83573.0], [83.8, 83573.0], [83.9, 83573.0], [84.0, 83574.0], [84.1, 83574.0], [84.2, 83574.0], [84.3, 83574.0], [84.4, 83574.0], [84.5, 83577.0], [84.6, 83577.0], [84.7, 83577.0], [84.8, 83577.0], [84.9, 83577.0], [85.0, 83589.0], [85.1, 83589.0], [85.2, 83589.0], [85.3, 83589.0], [85.4, 83589.0], [85.5, 83589.0], [85.6, 83589.0], [85.7, 83589.0], [85.8, 83589.0], [85.9, 83589.0], [86.0, 83591.0], [86.1, 83591.0], [86.2, 83591.0], [86.3, 83591.0], [86.4, 83591.0], [86.5, 84010.0], [86.6, 84010.0], [86.7, 84010.0], [86.8, 84010.0], [86.9, 84010.0], [87.0, 84242.0], [87.1, 84242.0], [87.2, 84242.0], [87.3, 84242.0], [87.4, 84242.0], [87.5, 84398.0], [87.6, 84398.0], [87.7, 84398.0], [87.8, 84398.0], [87.9, 84398.0], [88.0, 84406.0], [88.1, 84406.0], [88.2, 84406.0], [88.3, 84406.0], [88.4, 84406.0], [88.5, 84432.0], [88.6, 84432.0], [88.7, 84432.0], [88.8, 84432.0], [88.9, 84432.0], [89.0, 84481.0], [89.1, 84481.0], [89.2, 84481.0], [89.3, 84481.0], [89.4, 84481.0], [89.5, 84553.0], [89.6, 84553.0], [89.7, 84553.0], [89.8, 84553.0], [89.9, 84553.0], [90.0, 84671.0], [90.1, 84671.0], [90.2, 84671.0], [90.3, 84671.0], [90.4, 84671.0], [90.5, 84842.0], [90.6, 84842.0], [90.7, 84842.0], [90.8, 84842.0], [90.9, 84842.0], [91.0, 85143.0], [91.1, 85143.0], [91.2, 85143.0], [91.3, 85143.0], [91.4, 85143.0], [91.5, 85189.0], [91.6, 85189.0], [91.7, 85189.0], [91.8, 85189.0], [91.9, 85189.0], [92.0, 85293.0], [92.1, 85293.0], [92.2, 85293.0], [92.3, 85293.0], [92.4, 85293.0], [92.5, 85301.0], [92.6, 85301.0], [92.7, 85301.0], [92.8, 85301.0], [92.9, 85301.0], [93.0, 85399.0], [93.1, 85399.0], [93.2, 85399.0], [93.3, 85399.0], [93.4, 85399.0], [93.5, 85534.0], [93.6, 85534.0], [93.7, 85534.0], [93.8, 85534.0], [93.9, 85534.0], [94.0, 85817.0], [94.1, 85817.0], [94.2, 85817.0], [94.3, 85817.0], [94.4, 85817.0], [94.5, 86041.0], [94.6, 86041.0], [94.7, 86041.0], [94.8, 86041.0], [94.9, 86041.0], [95.0, 86132.0], [95.1, 86132.0], [95.2, 86132.0], [95.3, 86132.0], [95.4, 86132.0], [95.5, 86148.0], [95.6, 86148.0], [95.7, 86148.0], [95.8, 86148.0], [95.9, 86148.0], [96.0, 86160.0], [96.1, 86160.0], [96.2, 86160.0], [96.3, 86160.0], [96.4, 86160.0], [96.5, 86219.0], [96.6, 86219.0], [96.7, 86219.0], [96.8, 86219.0], [96.9, 86219.0], [97.0, 86258.0], [97.1, 86258.0], [97.2, 86258.0], [97.3, 86258.0], [97.4, 86258.0], [97.5, 86350.0], [97.6, 86350.0], [97.7, 86350.0], [97.8, 86350.0], [97.9, 86350.0], [98.0, 86380.0], [98.1, 86380.0], [98.2, 86380.0], [98.3, 86380.0], [98.4, 86380.0], [98.5, 86429.0], [98.6, 86429.0], [98.7, 86429.0], [98.8, 86429.0], [98.9, 86429.0], [99.0, 86444.0], [99.1, 86444.0], [99.2, 86444.0], [99.3, 86444.0], [99.4, 86444.0], [99.5, 86448.0], [99.6, 86448.0], [99.7, 86448.0], [99.8, 86448.0], [99.9, 86448.0]], "isOverall": false, "label": "School Infra Map SchoolWise", "isController": false}, {"data": [[0.0, 1176.0], [0.1, 1176.0], [0.2, 1176.0], [0.3, 1176.0], [0.4, 1176.0], [0.5, 1295.0], [0.6, 1295.0], [0.7, 1295.0], [0.8, 1295.0], [0.9, 1295.0], [1.0, 1297.0], [1.1, 1297.0], [1.2, 1297.0], [1.3, 1297.0], [1.4, 1297.0], [1.5, 1335.0], [1.6, 1335.0], [1.7, 1335.0], [1.8, 1335.0], [1.9, 1335.0], [2.0, 1382.0], [2.1, 1382.0], [2.2, 1382.0], [2.3, 1382.0], [2.4, 1382.0], [2.5, 1419.0], [2.6, 1419.0], [2.7, 1419.0], [2.8, 1419.0], [2.9, 1419.0], [3.0, 1429.0], [3.1, 1429.0], [3.2, 1429.0], [3.3, 1429.0], [3.4, 1429.0], [3.5, 1497.0], [3.6, 1497.0], [3.7, 1497.0], [3.8, 1497.0], [3.9, 1497.0], [4.0, 1562.0], [4.1, 1562.0], [4.2, 1562.0], [4.3, 1562.0], [4.4, 1562.0], [4.5, 1627.0], [4.6, 1627.0], [4.7, 1627.0], [4.8, 1627.0], [4.9, 1627.0], [5.0, 1668.0], [5.1, 1668.0], [5.2, 1668.0], [5.3, 1668.0], [5.4, 1668.0], [5.5, 1697.0], [5.6, 1697.0], [5.7, 1697.0], [5.8, 1697.0], [5.9, 1697.0], [6.0, 1712.0], [6.1, 1712.0], [6.2, 1712.0], [6.3, 1712.0], [6.4, 1712.0], [6.5, 1765.0], [6.6, 1765.0], [6.7, 1765.0], [6.8, 1765.0], [6.9, 1765.0], [7.0, 1825.0], [7.1, 1825.0], [7.2, 1825.0], [7.3, 1825.0], [7.4, 1825.0], [7.5, 1849.0], [7.6, 1849.0], [7.7, 1849.0], [7.8, 1849.0], [7.9, 1849.0], [8.0, 1876.0], [8.1, 1876.0], [8.2, 1876.0], [8.3, 1876.0], [8.4, 1876.0], [8.5, 1924.0], [8.6, 1924.0], [8.7, 1924.0], [8.8, 1924.0], [8.9, 1924.0], [9.0, 1929.0], [9.1, 1929.0], [9.2, 1929.0], [9.3, 1929.0], [9.4, 1929.0], [9.5, 1930.0], [9.6, 1930.0], [9.7, 1930.0], [9.8, 1930.0], [9.9, 1930.0], [10.0, 1941.0], [10.1, 1941.0], [10.2, 1941.0], [10.3, 1941.0], [10.4, 1941.0], [10.5, 1944.0], [10.6, 1944.0], [10.7, 1944.0], [10.8, 1944.0], [10.9, 1944.0], [11.0, 1971.0], [11.1, 1971.0], [11.2, 1971.0], [11.3, 1971.0], [11.4, 1971.0], [11.5, 1976.0], [11.6, 1976.0], [11.7, 1976.0], [11.8, 1976.0], [11.9, 1976.0], [12.0, 2017.0], [12.1, 2017.0], [12.2, 2017.0], [12.3, 2017.0], [12.4, 2017.0], [12.5, 2018.0], [12.6, 2018.0], [12.7, 2018.0], [12.8, 2018.0], [12.9, 2018.0], [13.0, 2020.0], [13.1, 2020.0], [13.2, 2020.0], [13.3, 2020.0], [13.4, 2020.0], [13.5, 2037.0], [13.6, 2037.0], [13.7, 2037.0], [13.8, 2037.0], [13.9, 2037.0], [14.0, 2067.0], [14.1, 2067.0], [14.2, 2067.0], [14.3, 2067.0], [14.4, 2067.0], [14.5, 2083.0], [14.6, 2083.0], [14.7, 2083.0], [14.8, 2083.0], [14.9, 2083.0], [15.0, 2097.0], [15.1, 2097.0], [15.2, 2097.0], [15.3, 2097.0], [15.4, 2097.0], [15.5, 2106.0], [15.6, 2106.0], [15.7, 2106.0], [15.8, 2106.0], [15.9, 2106.0], [16.0, 2161.0], [16.1, 2161.0], [16.2, 2161.0], [16.3, 2161.0], [16.4, 2161.0], [16.5, 2187.0], [16.6, 2187.0], [16.7, 2187.0], [16.8, 2187.0], [16.9, 2187.0], [17.0, 2192.0], [17.1, 2192.0], [17.2, 2192.0], [17.3, 2192.0], [17.4, 2192.0], [17.5, 2206.0], [17.6, 2206.0], [17.7, 2206.0], [17.8, 2206.0], [17.9, 2206.0], [18.0, 2235.0], [18.1, 2235.0], [18.2, 2235.0], [18.3, 2235.0], [18.4, 2235.0], [18.5, 2242.0], [18.6, 2242.0], [18.7, 2242.0], [18.8, 2242.0], [18.9, 2242.0], [19.0, 2261.0], [19.1, 2261.0], [19.2, 2261.0], [19.3, 2261.0], [19.4, 2261.0], [19.5, 2265.0], [19.6, 2265.0], [19.7, 2265.0], [19.8, 2265.0], [19.9, 2265.0], [20.0, 2306.0], [20.1, 2306.0], [20.2, 2306.0], [20.3, 2306.0], [20.4, 2306.0], [20.5, 2314.0], [20.6, 2314.0], [20.7, 2314.0], [20.8, 2314.0], [20.9, 2314.0], [21.0, 2353.0], [21.1, 2353.0], [21.2, 2353.0], [21.3, 2353.0], [21.4, 2353.0], [21.5, 2403.0], [21.6, 2403.0], [21.7, 2403.0], [21.8, 2403.0], [21.9, 2403.0], [22.0, 2427.0], [22.1, 2427.0], [22.2, 2427.0], [22.3, 2427.0], [22.4, 2427.0], [22.5, 2445.0], [22.6, 2445.0], [22.7, 2445.0], [22.8, 2445.0], [22.9, 2445.0], [23.0, 2450.0], [23.1, 2450.0], [23.2, 2450.0], [23.3, 2450.0], [23.4, 2450.0], [23.5, 2462.0], [23.6, 2462.0], [23.7, 2462.0], [23.8, 2462.0], [23.9, 2462.0], [24.0, 2493.0], [24.1, 2493.0], [24.2, 2493.0], [24.3, 2493.0], [24.4, 2493.0], [24.5, 2499.0], [24.6, 2499.0], [24.7, 2499.0], [24.8, 2499.0], [24.9, 2499.0], [25.0, 2503.0], [25.1, 2503.0], [25.2, 2503.0], [25.3, 2503.0], [25.4, 2503.0], [25.5, 2503.0], [25.6, 2503.0], [25.7, 2503.0], [25.8, 2503.0], [25.9, 2503.0], [26.0, 2505.0], [26.1, 2505.0], [26.2, 2505.0], [26.3, 2505.0], [26.4, 2505.0], [26.5, 2508.0], [26.6, 2508.0], [26.7, 2508.0], [26.8, 2508.0], [26.9, 2508.0], [27.0, 2542.0], [27.1, 2542.0], [27.2, 2542.0], [27.3, 2542.0], [27.4, 2542.0], [27.5, 2562.0], [27.6, 2562.0], [27.7, 2562.0], [27.8, 2562.0], [27.9, 2562.0], [28.0, 2587.0], [28.1, 2587.0], [28.2, 2587.0], [28.3, 2587.0], [28.4, 2587.0], [28.5, 2600.0], [28.6, 2600.0], [28.7, 2600.0], [28.8, 2600.0], [28.9, 2600.0], [29.0, 2604.0], [29.1, 2604.0], [29.2, 2604.0], [29.3, 2604.0], [29.4, 2604.0], [29.5, 2614.0], [29.6, 2614.0], [29.7, 2614.0], [29.8, 2614.0], [29.9, 2614.0], [30.0, 2666.0], [30.1, 2666.0], [30.2, 2666.0], [30.3, 2666.0], [30.4, 2666.0], [30.5, 2674.0], [30.6, 2674.0], [30.7, 2674.0], [30.8, 2674.0], [30.9, 2674.0], [31.0, 2691.0], [31.1, 2691.0], [31.2, 2691.0], [31.3, 2691.0], [31.4, 2691.0], [31.5, 2717.0], [31.6, 2717.0], [31.7, 2717.0], [31.8, 2717.0], [31.9, 2717.0], [32.0, 2721.0], [32.1, 2721.0], [32.2, 2721.0], [32.3, 2721.0], [32.4, 2721.0], [32.5, 2738.0], [32.6, 2738.0], [32.7, 2738.0], [32.8, 2738.0], [32.9, 2738.0], [33.0, 2755.0], [33.1, 2755.0], [33.2, 2755.0], [33.3, 2755.0], [33.4, 2755.0], [33.5, 2788.0], [33.6, 2788.0], [33.7, 2788.0], [33.8, 2788.0], [33.9, 2788.0], [34.0, 2840.0], [34.1, 2840.0], [34.2, 2840.0], [34.3, 2840.0], [34.4, 2840.0], [34.5, 2867.0], [34.6, 2867.0], [34.7, 2867.0], [34.8, 2867.0], [34.9, 2867.0], [35.0, 2905.0], [35.1, 2905.0], [35.2, 2905.0], [35.3, 2905.0], [35.4, 2905.0], [35.5, 2910.0], [35.6, 2910.0], [35.7, 2910.0], [35.8, 2910.0], [35.9, 2910.0], [36.0, 2978.0], [36.1, 2978.0], [36.2, 2978.0], [36.3, 2978.0], [36.4, 2978.0], [36.5, 2978.0], [36.6, 2978.0], [36.7, 2978.0], [36.8, 2978.0], [36.9, 2978.0], [37.0, 2980.0], [37.1, 2980.0], [37.2, 2980.0], [37.3, 2980.0], [37.4, 2980.0], [37.5, 2991.0], [37.6, 2991.0], [37.7, 2991.0], [37.8, 2991.0], [37.9, 2991.0], [38.0, 3028.0], [38.1, 3028.0], [38.2, 3028.0], [38.3, 3028.0], [38.4, 3028.0], [38.5, 3029.0], [38.6, 3029.0], [38.7, 3029.0], [38.8, 3029.0], [38.9, 3029.0], [39.0, 3078.0], [39.1, 3078.0], [39.2, 3078.0], [39.3, 3078.0], [39.4, 3078.0], [39.5, 3090.0], [39.6, 3090.0], [39.7, 3090.0], [39.8, 3090.0], [39.9, 3090.0], [40.0, 3094.0], [40.1, 3094.0], [40.2, 3094.0], [40.3, 3094.0], [40.4, 3094.0], [40.5, 3103.0], [40.6, 3103.0], [40.7, 3103.0], [40.8, 3103.0], [40.9, 3103.0], [41.0, 3116.0], [41.1, 3116.0], [41.2, 3116.0], [41.3, 3116.0], [41.4, 3116.0], [41.5, 3122.0], [41.6, 3122.0], [41.7, 3122.0], [41.8, 3122.0], [41.9, 3122.0], [42.0, 3141.0], [42.1, 3141.0], [42.2, 3141.0], [42.3, 3141.0], [42.4, 3141.0], [42.5, 3180.0], [42.6, 3180.0], [42.7, 3180.0], [42.8, 3180.0], [42.9, 3180.0], [43.0, 3188.0], [43.1, 3188.0], [43.2, 3188.0], [43.3, 3188.0], [43.4, 3188.0], [43.5, 3225.0], [43.6, 3225.0], [43.7, 3225.0], [43.8, 3225.0], [43.9, 3225.0], [44.0, 3249.0], [44.1, 3249.0], [44.2, 3249.0], [44.3, 3249.0], [44.4, 3249.0], [44.5, 3299.0], [44.6, 3299.0], [44.7, 3299.0], [44.8, 3299.0], [44.9, 3299.0], [45.0, 3335.0], [45.1, 3335.0], [45.2, 3335.0], [45.3, 3335.0], [45.4, 3335.0], [45.5, 3337.0], [45.6, 3337.0], [45.7, 3337.0], [45.8, 3337.0], [45.9, 3337.0], [46.0, 3371.0], [46.1, 3371.0], [46.2, 3371.0], [46.3, 3371.0], [46.4, 3371.0], [46.5, 3406.0], [46.6, 3406.0], [46.7, 3406.0], [46.8, 3406.0], [46.9, 3406.0], [47.0, 3417.0], [47.1, 3417.0], [47.2, 3417.0], [47.3, 3417.0], [47.4, 3417.0], [47.5, 3420.0], [47.6, 3420.0], [47.7, 3420.0], [47.8, 3420.0], [47.9, 3420.0], [48.0, 3530.0], [48.1, 3530.0], [48.2, 3530.0], [48.3, 3530.0], [48.4, 3530.0], [48.5, 3608.0], [48.6, 3608.0], [48.7, 3608.0], [48.8, 3608.0], [48.9, 3608.0], [49.0, 3729.0], [49.1, 3729.0], [49.2, 3729.0], [49.3, 3729.0], [49.4, 3729.0], [49.5, 3759.0], [49.6, 3759.0], [49.7, 3759.0], [49.8, 3759.0], [49.9, 3759.0], [50.0, 3762.0], [50.1, 3762.0], [50.2, 3762.0], [50.3, 3762.0], [50.4, 3762.0], [50.5, 3770.0], [50.6, 3770.0], [50.7, 3770.0], [50.8, 3770.0], [50.9, 3770.0], [51.0, 3770.0], [51.1, 3770.0], [51.2, 3770.0], [51.3, 3770.0], [51.4, 3770.0], [51.5, 3846.0], [51.6, 3846.0], [51.7, 3846.0], [51.8, 3846.0], [51.9, 3846.0], [52.0, 3850.0], [52.1, 3850.0], [52.2, 3850.0], [52.3, 3850.0], [52.4, 3850.0], [52.5, 3855.0], [52.6, 3855.0], [52.7, 3855.0], [52.8, 3855.0], [52.9, 3855.0], [53.0, 3907.0], [53.1, 3907.0], [53.2, 3907.0], [53.3, 3907.0], [53.4, 3907.0], [53.5, 3917.0], [53.6, 3917.0], [53.7, 3917.0], [53.8, 3917.0], [53.9, 3917.0], [54.0, 3930.0], [54.1, 3930.0], [54.2, 3930.0], [54.3, 3930.0], [54.4, 3930.0], [54.5, 3936.0], [54.6, 3936.0], [54.7, 3936.0], [54.8, 3936.0], [54.9, 3936.0], [55.0, 3980.0], [55.1, 3980.0], [55.2, 3980.0], [55.3, 3980.0], [55.4, 3980.0], [55.5, 4057.0], [55.6, 4057.0], [55.7, 4057.0], [55.8, 4057.0], [55.9, 4057.0], [56.0, 4058.0], [56.1, 4058.0], [56.2, 4058.0], [56.3, 4058.0], [56.4, 4058.0], [56.5, 4068.0], [56.6, 4068.0], [56.7, 4068.0], [56.8, 4068.0], [56.9, 4068.0], [57.0, 4072.0], [57.1, 4072.0], [57.2, 4072.0], [57.3, 4072.0], [57.4, 4072.0], [57.5, 4074.0], [57.6, 4074.0], [57.7, 4074.0], [57.8, 4074.0], [57.9, 4074.0], [58.0, 4085.0], [58.1, 4085.0], [58.2, 4085.0], [58.3, 4085.0], [58.4, 4085.0], [58.5, 4109.0], [58.6, 4109.0], [58.7, 4109.0], [58.8, 4109.0], [58.9, 4109.0], [59.0, 4110.0], [59.1, 4110.0], [59.2, 4110.0], [59.3, 4110.0], [59.4, 4110.0], [59.5, 4128.0], [59.6, 4128.0], [59.7, 4128.0], [59.8, 4128.0], [59.9, 4128.0], [60.0, 4169.0], [60.1, 4169.0], [60.2, 4169.0], [60.3, 4169.0], [60.4, 4169.0], [60.5, 4177.0], [60.6, 4177.0], [60.7, 4177.0], [60.8, 4177.0], [60.9, 4177.0], [61.0, 4179.0], [61.1, 4179.0], [61.2, 4179.0], [61.3, 4179.0], [61.4, 4179.0], [61.5, 4262.0], [61.6, 4262.0], [61.7, 4262.0], [61.8, 4262.0], [61.9, 4262.0], [62.0, 4291.0], [62.1, 4291.0], [62.2, 4291.0], [62.3, 4291.0], [62.4, 4291.0], [62.5, 4356.0], [62.6, 4356.0], [62.7, 4356.0], [62.8, 4356.0], [62.9, 4356.0], [63.0, 4403.0], [63.1, 4403.0], [63.2, 4403.0], [63.3, 4403.0], [63.4, 4403.0], [63.5, 4411.0], [63.6, 4411.0], [63.7, 4411.0], [63.8, 4411.0], [63.9, 4411.0], [64.0, 4462.0], [64.1, 4462.0], [64.2, 4462.0], [64.3, 4462.0], [64.4, 4462.0], [64.5, 4463.0], [64.6, 4463.0], [64.7, 4463.0], [64.8, 4463.0], [64.9, 4463.0], [65.0, 4466.0], [65.1, 4466.0], [65.2, 4466.0], [65.3, 4466.0], [65.4, 4466.0], [65.5, 4494.0], [65.6, 4494.0], [65.7, 4494.0], [65.8, 4494.0], [65.9, 4494.0], [66.0, 4535.0], [66.1, 4535.0], [66.2, 4535.0], [66.3, 4535.0], [66.4, 4535.0], [66.5, 4537.0], [66.6, 4537.0], [66.7, 4537.0], [66.8, 4537.0], [66.9, 4537.0], [67.0, 4549.0], [67.1, 4549.0], [67.2, 4549.0], [67.3, 4549.0], [67.4, 4549.0], [67.5, 4571.0], [67.6, 4571.0], [67.7, 4571.0], [67.8, 4571.0], [67.9, 4571.0], [68.0, 4574.0], [68.1, 4574.0], [68.2, 4574.0], [68.3, 4574.0], [68.4, 4574.0], [68.5, 4578.0], [68.6, 4578.0], [68.7, 4578.0], [68.8, 4578.0], [68.9, 4578.0], [69.0, 4583.0], [69.1, 4583.0], [69.2, 4583.0], [69.3, 4583.0], [69.4, 4583.0], [69.5, 4613.0], [69.6, 4613.0], [69.7, 4613.0], [69.8, 4613.0], [69.9, 4613.0], [70.0, 4674.0], [70.1, 4674.0], [70.2, 4674.0], [70.3, 4674.0], [70.4, 4674.0], [70.5, 4682.0], [70.6, 4682.0], [70.7, 4682.0], [70.8, 4682.0], [70.9, 4682.0], [71.0, 4687.0], [71.1, 4687.0], [71.2, 4687.0], [71.3, 4687.0], [71.4, 4687.0], [71.5, 4737.0], [71.6, 4737.0], [71.7, 4737.0], [71.8, 4737.0], [71.9, 4737.0], [72.0, 4799.0], [72.1, 4799.0], [72.2, 4799.0], [72.3, 4799.0], [72.4, 4799.0], [72.5, 4900.0], [72.6, 4900.0], [72.7, 4900.0], [72.8, 4900.0], [72.9, 4900.0], [73.0, 4911.0], [73.1, 4911.0], [73.2, 4911.0], [73.3, 4911.0], [73.4, 4911.0], [73.5, 5007.0], [73.6, 5007.0], [73.7, 5007.0], [73.8, 5007.0], [73.9, 5007.0], [74.0, 5051.0], [74.1, 5051.0], [74.2, 5051.0], [74.3, 5051.0], [74.4, 5051.0], [74.5, 5064.0], [74.6, 5064.0], [74.7, 5064.0], [74.8, 5064.0], [74.9, 5064.0], [75.0, 5076.0], [75.1, 5076.0], [75.2, 5076.0], [75.3, 5076.0], [75.4, 5076.0], [75.5, 5078.0], [75.6, 5078.0], [75.7, 5078.0], [75.8, 5078.0], [75.9, 5078.0], [76.0, 5085.0], [76.1, 5085.0], [76.2, 5085.0], [76.3, 5085.0], [76.4, 5085.0], [76.5, 5089.0], [76.6, 5089.0], [76.7, 5089.0], [76.8, 5089.0], [76.9, 5089.0], [77.0, 5092.0], [77.1, 5092.0], [77.2, 5092.0], [77.3, 5092.0], [77.4, 5092.0], [77.5, 5095.0], [77.6, 5095.0], [77.7, 5095.0], [77.8, 5095.0], [77.9, 5095.0], [78.0, 5097.0], [78.1, 5097.0], [78.2, 5097.0], [78.3, 5097.0], [78.4, 5097.0], [78.5, 5097.0], [78.6, 5097.0], [78.7, 5097.0], [78.8, 5097.0], [78.9, 5097.0], [79.0, 5169.0], [79.1, 5169.0], [79.2, 5169.0], [79.3, 5169.0], [79.4, 5169.0], [79.5, 5172.0], [79.6, 5172.0], [79.7, 5172.0], [79.8, 5172.0], [79.9, 5172.0], [80.0, 5227.0], [80.1, 5227.0], [80.2, 5227.0], [80.3, 5227.0], [80.4, 5227.0], [80.5, 5381.0], [80.6, 5381.0], [80.7, 5381.0], [80.8, 5381.0], [80.9, 5381.0], [81.0, 5493.0], [81.1, 5493.0], [81.2, 5493.0], [81.3, 5493.0], [81.4, 5493.0], [81.5, 5544.0], [81.6, 5544.0], [81.7, 5544.0], [81.8, 5544.0], [81.9, 5544.0], [82.0, 5573.0], [82.1, 5573.0], [82.2, 5573.0], [82.3, 5573.0], [82.4, 5573.0], [82.5, 5611.0], [82.6, 5611.0], [82.7, 5611.0], [82.8, 5611.0], [82.9, 5611.0], [83.0, 5622.0], [83.1, 5622.0], [83.2, 5622.0], [83.3, 5622.0], [83.4, 5622.0], [83.5, 5658.0], [83.6, 5658.0], [83.7, 5658.0], [83.8, 5658.0], [83.9, 5658.0], [84.0, 5675.0], [84.1, 5675.0], [84.2, 5675.0], [84.3, 5675.0], [84.4, 5675.0], [84.5, 5717.0], [84.6, 5717.0], [84.7, 5717.0], [84.8, 5717.0], [84.9, 5717.0], [85.0, 5729.0], [85.1, 5729.0], [85.2, 5729.0], [85.3, 5729.0], [85.4, 5729.0], [85.5, 5748.0], [85.6, 5748.0], [85.7, 5748.0], [85.8, 5748.0], [85.9, 5748.0], [86.0, 5756.0], [86.1, 5756.0], [86.2, 5756.0], [86.3, 5756.0], [86.4, 5756.0], [86.5, 5800.0], [86.6, 5800.0], [86.7, 5800.0], [86.8, 5800.0], [86.9, 5800.0], [87.0, 5806.0], [87.1, 5806.0], [87.2, 5806.0], [87.3, 5806.0], [87.4, 5806.0], [87.5, 5817.0], [87.6, 5817.0], [87.7, 5817.0], [87.8, 5817.0], [87.9, 5817.0], [88.0, 5831.0], [88.1, 5831.0], [88.2, 5831.0], [88.3, 5831.0], [88.4, 5831.0], [88.5, 5844.0], [88.6, 5844.0], [88.7, 5844.0], [88.8, 5844.0], [88.9, 5844.0], [89.0, 5889.0], [89.1, 5889.0], [89.2, 5889.0], [89.3, 5889.0], [89.4, 5889.0], [89.5, 5994.0], [89.6, 5994.0], [89.7, 5994.0], [89.8, 5994.0], [89.9, 5994.0], [90.0, 6001.0], [90.1, 6001.0], [90.2, 6001.0], [90.3, 6001.0], [90.4, 6001.0], [90.5, 6055.0], [90.6, 6055.0], [90.7, 6055.0], [90.8, 6055.0], [90.9, 6055.0], [91.0, 6065.0], [91.1, 6065.0], [91.2, 6065.0], [91.3, 6065.0], [91.4, 6065.0], [91.5, 6134.0], [91.6, 6134.0], [91.7, 6134.0], [91.8, 6134.0], [91.9, 6134.0], [92.0, 6159.0], [92.1, 6159.0], [92.2, 6159.0], [92.3, 6159.0], [92.4, 6159.0], [92.5, 6169.0], [92.6, 6169.0], [92.7, 6169.0], [92.8, 6169.0], [92.9, 6169.0], [93.0, 6208.0], [93.1, 6208.0], [93.2, 6208.0], [93.3, 6208.0], [93.4, 6208.0], [93.5, 6209.0], [93.6, 6209.0], [93.7, 6209.0], [93.8, 6209.0], [93.9, 6209.0], [94.0, 6222.0], [94.1, 6222.0], [94.2, 6222.0], [94.3, 6222.0], [94.4, 6222.0], [94.5, 6224.0], [94.6, 6224.0], [94.7, 6224.0], [94.8, 6224.0], [94.9, 6224.0], [95.0, 6226.0], [95.1, 6226.0], [95.2, 6226.0], [95.3, 6226.0], [95.4, 6226.0], [95.5, 6272.0], [95.6, 6272.0], [95.7, 6272.0], [95.8, 6272.0], [95.9, 6272.0], [96.0, 6333.0], [96.1, 6333.0], [96.2, 6333.0], [96.3, 6333.0], [96.4, 6333.0], [96.5, 6343.0], [96.6, 6343.0], [96.7, 6343.0], [96.8, 6343.0], [96.9, 6343.0], [97.0, 6423.0], [97.1, 6423.0], [97.2, 6423.0], [97.3, 6423.0], [97.4, 6423.0], [97.5, 6424.0], [97.6, 6424.0], [97.7, 6424.0], [97.8, 6424.0], [97.9, 6424.0], [98.0, 6425.0], [98.1, 6425.0], [98.2, 6425.0], [98.3, 6425.0], [98.4, 6425.0], [98.5, 6441.0], [98.6, 6441.0], [98.7, 6441.0], [98.8, 6441.0], [98.9, 6441.0], [99.0, 6442.0], [99.1, 6442.0], [99.2, 6442.0], [99.3, 6442.0], [99.4, 6442.0], [99.5, 6451.0], [99.6, 6451.0], [99.7, 6451.0], [99.8, 6451.0], [99.9, 6451.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1100.0, "maxY": 11.0, "series": [{"data": [[68700.0, 2.0], [67900.0, 1.0], [67500.0, 1.0], [70300.0, 1.0], [71900.0, 2.0], [72300.0, 1.0], [71500.0, 1.0], [73100.0, 1.0], [76700.0, 2.0], [75500.0, 1.0], [75900.0, 1.0], [77500.0, 1.0], [77100.0, 1.0], [81100.0, 2.0], [78300.0, 1.0], [78700.0, 1.0], [79100.0, 2.0], [80700.0, 2.0], [80300.0, 1.0], [79900.0, 1.0], [81500.0, 1.0], [81900.0, 1.0], [82300.0, 3.0], [82700.0, 2.0], [84300.0, 1.0], [83100.0, 2.0], [85100.0, 2.0], [85500.0, 1.0], [83500.0, 10.0], [86300.0, 2.0], [40700.0, 1.0], [47300.0, 1.0], [51500.0, 1.0], [53700.0, 1.0], [61900.0, 3.0], [64300.0, 1.0], [64100.0, 1.0], [64900.0, 1.0], [64500.0, 1.0], [69400.0, 1.0], [66200.0, 2.0], [69000.0, 1.0], [66600.0, 2.0], [71400.0, 1.0], [73000.0, 3.0], [73400.0, 1.0], [75400.0, 1.0], [77000.0, 2.0], [78600.0, 1.0], [79000.0, 1.0], [81000.0, 2.0], [80600.0, 2.0], [80200.0, 2.0], [81800.0, 3.0], [81400.0, 2.0], [82600.0, 1.0], [83000.0, 2.0], [85800.0, 1.0], [84200.0, 1.0], [84600.0, 1.0], [83400.0, 5.0], [86200.0, 2.0], [3300.0, 1.0], [65700.0, 1.0], [68900.0, 1.0], [67300.0, 1.0], [70100.0, 1.0], [4500.0, 1.0], [71700.0, 2.0], [74500.0, 3.0], [74100.0, 1.0], [76900.0, 1.0], [77700.0, 3.0], [78100.0, 1.0], [79300.0, 1.0], [79700.0, 1.0], [80500.0, 2.0], [81700.0, 3.0], [80100.0, 1.0], [83300.0, 3.0], [82500.0, 3.0], [85300.0, 2.0], [84500.0, 1.0], [86100.0, 3.0], [52600.0, 1.0], [60200.0, 1.0], [61000.0, 1.0], [63200.0, 1.0], [63000.0, 1.0], [63800.0, 1.0], [64200.0, 1.0], [65000.0, 2.0], [69200.0, 1.0], [69600.0, 1.0], [66800.0, 4.0], [67600.0, 1.0], [68000.0, 1.0], [68400.0, 2.0], [71600.0, 1.0], [70400.0, 1.0], [70800.0, 1.0], [72800.0, 1.0], [73200.0, 1.0], [74800.0, 1.0], [76800.0, 2.0], [76400.0, 1.0], [78800.0, 3.0], [79600.0, 3.0], [81200.0, 3.0], [80400.0, 1.0], [80800.0, 3.0], [81600.0, 2.0], [82800.0, 3.0], [83200.0, 1.0], [82000.0, 3.0], [84000.0, 1.0], [84400.0, 3.0], [82400.0, 1.0], [85200.0, 1.0], [84800.0, 1.0], [86000.0, 1.0], [86400.0, 3.0]], "isOverall": false, "label": "School Infra Map SchoolWise", "isController": false}, {"data": [[1100.0, 1.0], [1200.0, 2.0], [1300.0, 2.0], [1400.0, 3.0], [1500.0, 1.0], [1600.0, 3.0], [1700.0, 2.0], [1800.0, 3.0], [1900.0, 7.0], [2000.0, 7.0], [2100.0, 4.0], [2200.0, 5.0], [2300.0, 3.0], [2400.0, 7.0], [2500.0, 7.0], [2600.0, 6.0], [2700.0, 5.0], [2800.0, 2.0], [2900.0, 6.0], [3000.0, 5.0], [3100.0, 6.0], [3200.0, 3.0], [3300.0, 3.0], [3400.0, 3.0], [3500.0, 1.0], [3700.0, 5.0], [3600.0, 1.0], [3800.0, 3.0], [3900.0, 5.0], [4000.0, 6.0], [4100.0, 6.0], [4200.0, 2.0], [4300.0, 1.0], [4500.0, 7.0], [4400.0, 6.0], [4600.0, 4.0], [4700.0, 2.0], [5000.0, 11.0], [4900.0, 2.0], [5100.0, 2.0], [5300.0, 1.0], [5200.0, 1.0], [5400.0, 1.0], [5600.0, 4.0], [5500.0, 2.0], [5700.0, 4.0], [5800.0, 6.0], [6000.0, 3.0], [6100.0, 3.0], [5900.0, 1.0], [6200.0, 6.0], [6300.0, 2.0], [6400.0, 6.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 86400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 8.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 392.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 8.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 392.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 97.16062176165805, "minX": 1.59430956E12, "maxY": 199.66666666666669, "series": [{"data": [[1.59430962E12, 97.16062176165805], [1.59430956E12, 199.66666666666669]], "isOverall": false, "label": "School Infra Map", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59430962E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3125.8223684210516, "minX": 1.0, "maxY": 86448.0, "series": [{"data": [[2.0, 83591.0], [3.0, 83589.0], [5.0, 83581.5], [7.0, 84917.5], [8.0, 83573.0], [13.0, 84603.6], [18.0, 85561.4], [19.0, 86429.0], [20.0, 83478.0], [22.0, 84157.0], [23.0, 83473.0], [25.0, 84794.0], [26.0, 83442.0], [27.0, 86448.0], [28.0, 85301.0], [29.0, 85293.0], [30.0, 86350.0], [31.0, 85189.0], [33.0, 84671.0], [32.0, 83318.0], [35.0, 84242.0], [34.0, 83300.0], [37.0, 83160.0], [36.0, 85817.0], [39.0, 83087.0], [38.0, 86160.0], [41.0, 84406.0], [40.0, 84432.0], [43.0, 85534.0], [42.0, 83047.0], [45.0, 82546.0], [44.0, 85143.0], [47.0, 83150.0], [46.0, 82306.0], [49.0, 82433.0], [51.0, 81851.0], [50.0, 81910.0], [53.0, 82510.0], [52.0, 81816.0], [55.0, 84481.0], [54.0, 82465.0], [57.0, 84398.0], [56.0, 81714.0], [59.0, 82564.0], [58.0, 81640.0], [61.0, 82837.0], [60.0, 81575.0], [63.0, 82795.0], [62.0, 84010.0], [67.0, 83334.0], [66.0, 81057.0], [65.0, 82048.0], [64.0, 82077.0], [71.0, 81618.0], [70.0, 82602.0], [69.0, 81701.0], [68.0, 82802.0], [75.0, 82838.0], [74.0, 80422.0], [73.0, 81162.0], [72.0, 81274.0], [79.0, 80700.0], [78.0, 80773.0], [77.0, 81498.0], [76.0, 81712.0], [83.0, 81224.0], [82.0, 80604.0], [81.0, 81805.0], [87.0, 80218.0], [86.0, 81459.0], [85.0, 82390.0], [84.0, 83206.0], [91.0, 80824.0], [90.0, 81335.5], [88.0, 80847.0], [95.0, 81020.0], [94.0, 80573.0], [93.0, 80674.0], [92.0, 80296.0], [99.0, 79950.0], [98.0, 80159.0], [97.0, 81146.0], [96.0, 80385.0], [103.0, 79639.0], [102.0, 79651.0], [101.0, 79738.0], [100.0, 80541.0], [107.0, 79069.0], [106.0, 78685.0], [105.0, 79165.0], [104.0, 79388.0], [111.0, 78848.0], [110.0, 78892.5], [108.0, 78778.0], [115.0, 77175.0], [114.0, 77749.0], [113.0, 79632.0], [112.0, 79114.0], [119.0, 77780.0], [118.0, 78170.0], [117.0, 78357.0], [116.0, 77553.0], [123.0, 77035.0], [122.0, 77773.0], [121.0, 75943.0], [120.0, 76453.0], [127.0, 76920.0], [126.0, 75579.0], [125.0, 76896.0], [124.0, 77053.0], [135.0, 74519.0], [134.0, 74589.0], [133.0, 74528.0], [132.0, 74899.0], [131.0, 76836.0], [129.0, 75478.0], [128.0, 76797.0], [143.0, 72342.0], [142.0, 73280.0], [141.0, 73008.0], [140.0, 72800.0], [139.0, 73085.0], [138.0, 73182.0], [137.0, 73482.0], [136.0, 74195.0], [151.0, 71912.0], [150.0, 71589.0], [149.0, 71492.0], [148.0, 71737.0], [147.0, 71708.0], [146.0, 71663.0], [145.0, 71932.0], [144.0, 73014.0], [159.0, 69296.0], [158.0, 68767.0], [157.0, 69472.0], [156.0, 69607.0], [155.0, 70100.0], [154.0, 70499.0], [153.0, 70365.0], [152.0, 70872.0], [166.0, 67564.0], [165.0, 68010.0], [164.0, 68452.0], [163.0, 68741.0], [162.0, 68945.0], [161.0, 69018.0], [160.0, 68444.0], [175.0, 66656.0], [174.0, 66850.0], [173.0, 66272.0], [172.0, 66811.0], [171.0, 66850.0], [170.0, 66885.0], [169.0, 67511.0], [168.0, 67910.0], [183.0, 64221.0], [182.0, 64993.0], [181.0, 64540.0], [180.0, 65041.0], [179.0, 65009.0], [178.0, 65720.0], [177.0, 66252.0], [176.0, 66631.0], [191.0, 61969.0], [190.0, 61947.0], [189.0, 61930.0], [188.0, 63221.0], [187.0, 63053.0], [186.0, 63823.0], [185.0, 64356.0], [184.0, 64118.0], [199.0, 4505.0], [198.0, 40752.0], [197.0, 47323.0], [196.0, 51539.0], [195.0, 52658.0], [194.0, 53793.0], [193.0, 60285.0], [192.0, 61097.0], [200.0, 3331.0], [1.0, 84553.0]], "isOverall": false, "label": "School Infra Map SchoolWise", "isController": false}, {"data": [[100.65499999999997, 76099.73000000001]], "isOverall": false, "label": "School Infra Map SchoolWise-Aggregated", "isController": false}, {"data": [[199.0, 5818.500000000001], [200.0, 3125.8223684210516]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[199.76000000000002, 3772.0649999999987]], "isOverall": false, "label": "Login-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 942.7, "minX": 1.59430956E12, "maxY": 3.864974253333333E7, "series": [{"data": [[1.59430962E12, 3.864974253333333E7], [1.59430956E12, 1405487.4666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.59430962E12, 3107.3], [1.59430956E12, 942.7]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59430962E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3772.0649999999987, "minX": 1.59430956E12, "maxY": 77544.27461139891, "series": [{"data": [[1.59430962E12, 77544.27461139891], [1.59430956E12, 36271.57142857143]], "isOverall": false, "label": "School Infra Map SchoolWise", "isController": false}, {"data": [[1.59430956E12, 3772.0649999999987]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59430962E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3772.004999999999, "minX": 1.59430956E12, "maxY": 29489.922279792747, "series": [{"data": [[1.59430962E12, 29489.922279792747], [1.59430956E12, 6081.428571428571]], "isOverall": false, "label": "School Infra Map SchoolWise", "isController": false}, {"data": [[1.59430956E12, 3772.004999999999]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59430962E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.59430956E12, "maxY": 1349.055, "series": [{"data": [[1.59430962E12, 6.139896373056994], [1.59430956E12, 2.0]], "isOverall": false, "label": "School Infra Map SchoolWise", "isController": false}, {"data": [[1.59430956E12, 1349.055]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59430962E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1176.0, "minX": 1.59430956E12, "maxY": 86448.0, "series": [{"data": [[1.59430962E12, 86448.0], [1.59430956E12, 53793.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.59430962E12, 60285.0], [1.59430956E12, 1176.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.59430962E12, 84773.6], [1.59430956E12, 6161.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.59430962E12, 86444.24], [1.59430956E12, 52568.47999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.59430962E12, 86136.8], [1.59430956E12, 6423.6]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59430962E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1704.5, "minX": 1.0, "maxY": 84406.0, "series": [{"data": [[32.0, 6146.5], [2.0, 62511.0], [8.0, 76376.0], [40.0, 3237.0], [10.0, 80835.5], [43.0, 84406.0], [44.0, 4464.5], [48.0, 2415.0], [3.0, 73182.0], [15.0, 81713.0], [1.0, 52098.5], [4.0, 70907.0], [18.0, 5199.5], [20.0, 1704.5], [5.0, 67960.0], [6.0, 77044.0], [7.0, 71164.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 48.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1704.5, "minX": 1.0, "maxY": 48982.0, "series": [{"data": [[32.0, 6146.5], [2.0, 8996.5], [8.0, 23920.0], [40.0, 3237.0], [10.0, 33393.0], [43.0, 48982.0], [44.0, 4464.0], [48.0, 2415.0], [3.0, 20296.0], [15.0, 35514.0], [1.0, 8246.5], [4.0, 16451.0], [18.0, 5199.5], [20.0, 1704.5], [5.0, 12688.5], [6.0, 23843.0], [7.0, 15619.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 48.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 6.666666666666667, "minX": 1.59430956E12, "maxY": 6.666666666666667, "series": [{"data": [[1.59430956E12, 6.666666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59430956E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 3.216666666666667, "minX": 1.59430956E12, "maxY": 3.45, "series": [{"data": [[1.59430962E12, 3.216666666666667], [1.59430956E12, 3.45]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59430962E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.59430956E12, "maxY": 3.3333333333333335, "series": [{"data": [[1.59430962E12, 3.216666666666667], [1.59430956E12, 0.11666666666666667]], "isOverall": false, "label": "School Infra Map SchoolWise-success", "isController": false}, {"data": [[1.59430956E12, 3.3333333333333335]], "isOverall": false, "label": "Login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59430962E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3.216666666666667, "minX": 1.59430956E12, "maxY": 3.45, "series": [{"data": [[1.59430962E12, 3.216666666666667], [1.59430956E12, 3.45]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59430962E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

