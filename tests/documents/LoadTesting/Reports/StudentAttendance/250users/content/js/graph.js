/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3044.0, "minX": 0.0, "maxY": 65889.0, "series": [{"data": [[0.0, 3044.0], [0.1, 3044.0], [0.2, 3044.0], [0.3, 3044.0], [0.4, 3279.0], [0.5, 3279.0], [0.6, 3279.0], [0.7, 3279.0], [0.8, 3501.0], [0.9, 3501.0], [1.0, 3501.0], [1.1, 3501.0], [1.2, 3501.0], [1.3, 3700.0], [1.4, 3700.0], [1.5, 3700.0], [1.6, 3722.0], [1.7, 3722.0], [1.8, 3722.0], [1.9, 3722.0], [2.0, 3729.0], [2.1, 3729.0], [2.2, 3729.0], [2.3, 3729.0], [2.4, 3785.0], [2.5, 3785.0], [2.6, 3785.0], [2.7, 3785.0], [2.8, 4010.0], [2.9, 4010.0], [3.0, 4010.0], [3.1, 4010.0], [3.2, 4054.0], [3.3, 4054.0], [3.4, 4054.0], [3.5, 4054.0], [3.6, 4113.0], [3.7, 4113.0], [3.8, 4113.0], [3.9, 4113.0], [4.0, 4146.0], [4.1, 4146.0], [4.2, 4146.0], [4.3, 4146.0], [4.4, 4222.0], [4.5, 4222.0], [4.6, 4222.0], [4.7, 4222.0], [4.8, 4255.0], [4.9, 4255.0], [5.0, 4255.0], [5.1, 4255.0], [5.2, 4284.0], [5.3, 4284.0], [5.4, 4284.0], [5.5, 4284.0], [5.6, 4284.0], [5.7, 4302.0], [5.8, 4302.0], [5.9, 4302.0], [6.0, 4302.0], [6.1, 4361.0], [6.2, 4361.0], [6.3, 4361.0], [6.4, 4361.0], [6.5, 4372.0], [6.6, 4372.0], [6.7, 4372.0], [6.8, 4372.0], [6.9, 4378.0], [7.0, 4378.0], [7.1, 4378.0], [7.2, 4378.0], [7.3, 4386.0], [7.4, 4386.0], [7.5, 4386.0], [7.6, 4386.0], [7.7, 4441.0], [7.8, 4441.0], [7.9, 4441.0], [8.0, 4441.0], [8.1, 4444.0], [8.2, 4444.0], [8.3, 4444.0], [8.4, 4444.0], [8.5, 4481.0], [8.6, 4481.0], [8.7, 4481.0], [8.8, 4481.0], [8.9, 4492.0], [9.0, 4492.0], [9.1, 4492.0], [9.2, 4492.0], [9.3, 4528.0], [9.4, 4528.0], [9.5, 4528.0], [9.6, 4528.0], [9.7, 4532.0], [9.8, 4532.0], [9.9, 4532.0], [10.0, 4532.0], [10.1, 4533.0], [10.2, 4533.0], [10.3, 4533.0], [10.4, 4533.0], [10.5, 4563.0], [10.6, 4563.0], [10.7, 4563.0], [10.8, 4563.0], [10.9, 4578.0], [11.0, 4578.0], [11.1, 4578.0], [11.2, 4578.0], [11.3, 4629.0], [11.4, 4629.0], [11.5, 4629.0], [11.6, 4629.0], [11.7, 4762.0], [11.8, 4762.0], [11.9, 4762.0], [12.0, 4762.0], [12.1, 4767.0], [12.2, 4767.0], [12.3, 4767.0], [12.4, 4767.0], [12.5, 4790.0], [12.6, 4790.0], [12.7, 4790.0], [12.8, 4790.0], [12.9, 4793.0], [13.0, 4793.0], [13.1, 4793.0], [13.2, 4793.0], [13.3, 4847.0], [13.4, 4847.0], [13.5, 4847.0], [13.6, 4847.0], [13.7, 4896.0], [13.8, 4896.0], [13.9, 4896.0], [14.0, 4896.0], [14.1, 4906.0], [14.2, 4906.0], [14.3, 4906.0], [14.4, 4906.0], [14.5, 4920.0], [14.6, 4920.0], [14.7, 4920.0], [14.8, 4920.0], [14.9, 4986.0], [15.0, 4986.0], [15.1, 4986.0], [15.2, 4986.0], [15.3, 5033.0], [15.4, 5033.0], [15.5, 5033.0], [15.6, 5033.0], [15.7, 5098.0], [15.8, 5098.0], [15.9, 5098.0], [16.0, 5098.0], [16.1, 5111.0], [16.2, 5111.0], [16.3, 5111.0], [16.4, 5111.0], [16.5, 5208.0], [16.6, 5208.0], [16.7, 5208.0], [16.8, 5208.0], [16.9, 5213.0], [17.0, 5213.0], [17.1, 5213.0], [17.2, 5213.0], [17.3, 5232.0], [17.4, 5232.0], [17.5, 5232.0], [17.6, 5247.0], [17.7, 5247.0], [17.8, 5247.0], [17.9, 5247.0], [18.0, 5248.0], [18.1, 5248.0], [18.2, 5248.0], [18.3, 5248.0], [18.4, 5354.0], [18.5, 5354.0], [18.6, 5354.0], [18.7, 5354.0], [18.8, 5392.0], [18.9, 5392.0], [19.0, 5392.0], [19.1, 5392.0], [19.2, 5407.0], [19.3, 5407.0], [19.4, 5407.0], [19.5, 5407.0], [19.6, 5412.0], [19.7, 5412.0], [19.8, 5412.0], [19.9, 5412.0], [20.0, 5442.0], [20.1, 5442.0], [20.2, 5442.0], [20.3, 5442.0], [20.4, 5449.0], [20.5, 5449.0], [20.6, 5449.0], [20.7, 5449.0], [20.8, 5457.0], [20.9, 5457.0], [21.0, 5457.0], [21.1, 5457.0], [21.2, 5457.0], [21.3, 5457.0], [21.4, 5457.0], [21.5, 5457.0], [21.6, 5458.0], [21.7, 5458.0], [21.8, 5458.0], [21.9, 5458.0], [22.0, 5470.0], [22.1, 5470.0], [22.2, 5470.0], [22.3, 5470.0], [22.4, 5477.0], [22.5, 5477.0], [22.6, 5477.0], [22.7, 5477.0], [22.8, 5490.0], [22.9, 5490.0], [23.0, 5490.0], [23.1, 5490.0], [23.2, 5514.0], [23.3, 5514.0], [23.4, 5514.0], [23.5, 5514.0], [23.6, 5583.0], [23.7, 5583.0], [23.8, 5583.0], [23.9, 5583.0], [24.0, 5587.0], [24.1, 5587.0], [24.2, 5587.0], [24.3, 5587.0], [24.4, 5661.0], [24.5, 5661.0], [24.6, 5661.0], [24.7, 5661.0], [24.8, 5666.0], [24.9, 5666.0], [25.0, 5666.0], [25.1, 5666.0], [25.2, 5696.0], [25.3, 5696.0], [25.4, 5696.0], [25.5, 5696.0], [25.6, 5713.0], [25.7, 5713.0], [25.8, 5713.0], [25.9, 5713.0], [26.0, 5732.0], [26.1, 5732.0], [26.2, 5732.0], [26.3, 5732.0], [26.4, 5739.0], [26.5, 5739.0], [26.6, 5739.0], [26.7, 5739.0], [26.8, 5745.0], [26.9, 5745.0], [27.0, 5745.0], [27.1, 5745.0], [27.2, 5790.0], [27.3, 5790.0], [27.4, 5790.0], [27.5, 5790.0], [27.6, 5834.0], [27.7, 5834.0], [27.8, 5834.0], [27.9, 5834.0], [28.0, 5874.0], [28.1, 5874.0], [28.2, 5874.0], [28.3, 5874.0], [28.4, 5899.0], [28.5, 5899.0], [28.6, 5899.0], [28.7, 5899.0], [28.8, 5949.0], [28.9, 5949.0], [29.0, 5949.0], [29.1, 5949.0], [29.2, 5954.0], [29.3, 5954.0], [29.4, 5954.0], [29.5, 5954.0], [29.6, 5994.0], [29.7, 5994.0], [29.8, 5994.0], [29.9, 5994.0], [30.0, 6015.0], [30.1, 6015.0], [30.2, 6015.0], [30.3, 6015.0], [30.4, 6033.0], [30.5, 6033.0], [30.6, 6033.0], [30.7, 6033.0], [30.8, 6053.0], [30.9, 6053.0], [31.0, 6053.0], [31.1, 6053.0], [31.2, 6057.0], [31.3, 6057.0], [31.4, 6057.0], [31.5, 6057.0], [31.6, 6072.0], [31.7, 6072.0], [31.8, 6072.0], [31.9, 6072.0], [32.0, 6076.0], [32.1, 6076.0], [32.2, 6076.0], [32.3, 6076.0], [32.4, 6102.0], [32.5, 6102.0], [32.6, 6102.0], [32.7, 6102.0], [32.8, 6115.0], [32.9, 6115.0], [33.0, 6115.0], [33.1, 6115.0], [33.2, 6214.0], [33.3, 6214.0], [33.4, 6214.0], [33.5, 6214.0], [33.6, 6219.0], [33.7, 6219.0], [33.8, 6219.0], [33.9, 6219.0], [34.0, 6226.0], [34.1, 6226.0], [34.2, 6226.0], [34.3, 6226.0], [34.4, 6252.0], [34.5, 6252.0], [34.6, 6252.0], [34.7, 6252.0], [34.8, 6272.0], [34.9, 6272.0], [35.0, 6272.0], [35.1, 6272.0], [35.2, 6287.0], [35.3, 6287.0], [35.4, 6287.0], [35.5, 6287.0], [35.6, 6302.0], [35.7, 6302.0], [35.8, 6302.0], [35.9, 6302.0], [36.0, 6362.0], [36.1, 6362.0], [36.2, 6362.0], [36.3, 6362.0], [36.4, 6373.0], [36.5, 6373.0], [36.6, 6373.0], [36.7, 6373.0], [36.8, 6395.0], [36.9, 6395.0], [37.0, 6395.0], [37.1, 6395.0], [37.2, 6421.0], [37.3, 6421.0], [37.4, 6421.0], [37.5, 6421.0], [37.6, 6423.0], [37.7, 6423.0], [37.8, 6423.0], [37.9, 6423.0], [38.0, 6430.0], [38.1, 6430.0], [38.2, 6430.0], [38.3, 6430.0], [38.4, 6453.0], [38.5, 6453.0], [38.6, 6453.0], [38.7, 6453.0], [38.8, 6479.0], [38.9, 6479.0], [39.0, 6479.0], [39.1, 6479.0], [39.2, 6537.0], [39.3, 6537.0], [39.4, 6537.0], [39.5, 6537.0], [39.6, 6538.0], [39.7, 6538.0], [39.8, 6538.0], [39.9, 6538.0], [40.0, 6538.0], [40.1, 6538.0], [40.2, 6538.0], [40.3, 6538.0], [40.4, 6678.0], [40.5, 6678.0], [40.6, 6678.0], [40.7, 6678.0], [40.8, 6682.0], [40.9, 6682.0], [41.0, 6682.0], [41.1, 6682.0], [41.2, 6685.0], [41.3, 6685.0], [41.4, 6685.0], [41.5, 6685.0], [41.6, 6691.0], [41.7, 6691.0], [41.8, 6691.0], [41.9, 6691.0], [42.0, 6777.0], [42.1, 6777.0], [42.2, 6777.0], [42.3, 6777.0], [42.4, 6795.0], [42.5, 6795.0], [42.6, 6795.0], [42.7, 6795.0], [42.8, 6806.0], [42.9, 6806.0], [43.0, 6806.0], [43.1, 6806.0], [43.2, 6811.0], [43.3, 6811.0], [43.4, 6811.0], [43.5, 6811.0], [43.6, 6827.0], [43.7, 6827.0], [43.8, 6827.0], [43.9, 6827.0], [44.0, 6828.0], [44.1, 6828.0], [44.2, 6828.0], [44.3, 6828.0], [44.4, 6832.0], [44.5, 6832.0], [44.6, 6832.0], [44.7, 6832.0], [44.8, 6873.0], [44.9, 6873.0], [45.0, 6873.0], [45.1, 6873.0], [45.2, 6886.0], [45.3, 6886.0], [45.4, 6886.0], [45.5, 6886.0], [45.6, 6940.0], [45.7, 6940.0], [45.8, 6940.0], [45.9, 6940.0], [46.0, 6989.0], [46.1, 6989.0], [46.2, 6989.0], [46.3, 6989.0], [46.4, 7008.0], [46.5, 7008.0], [46.6, 7008.0], [46.7, 7008.0], [46.8, 7046.0], [46.9, 7046.0], [47.0, 7046.0], [47.1, 7046.0], [47.2, 7092.0], [47.3, 7092.0], [47.4, 7092.0], [47.5, 7092.0], [47.6, 7101.0], [47.7, 7101.0], [47.8, 7101.0], [47.9, 7101.0], [48.0, 7106.0], [48.1, 7106.0], [48.2, 7106.0], [48.3, 7106.0], [48.4, 7389.0], [48.5, 7389.0], [48.6, 7389.0], [48.7, 7389.0], [48.8, 7390.0], [48.9, 7390.0], [49.0, 7390.0], [49.1, 7390.0], [49.2, 7396.0], [49.3, 7396.0], [49.4, 7396.0], [49.5, 7396.0], [49.6, 7409.0], [49.7, 7409.0], [49.8, 7409.0], [49.9, 7409.0], [50.0, 9807.0], [50.1, 9807.0], [50.2, 9807.0], [50.3, 9807.0], [50.4, 9833.0], [50.5, 9833.0], [50.6, 9833.0], [50.7, 9833.0], [50.8, 9850.0], [50.9, 9850.0], [51.0, 9850.0], [51.1, 9850.0], [51.2, 9850.0], [51.3, 9850.0], [51.4, 9850.0], [51.5, 9850.0], [51.6, 9853.0], [51.7, 9853.0], [51.8, 9853.0], [51.9, 9853.0], [52.0, 9854.0], [52.1, 9854.0], [52.2, 9854.0], [52.3, 9854.0], [52.4, 9884.0], [52.5, 9884.0], [52.6, 9884.0], [52.7, 9884.0], [52.8, 9893.0], [52.9, 9893.0], [53.0, 9893.0], [53.1, 9893.0], [53.2, 9902.0], [53.3, 9902.0], [53.4, 9902.0], [53.5, 9902.0], [53.6, 9905.0], [53.7, 9905.0], [53.8, 9905.0], [53.9, 9905.0], [54.0, 9918.0], [54.1, 9918.0], [54.2, 9918.0], [54.3, 9918.0], [54.4, 9918.0], [54.5, 9918.0], [54.6, 9918.0], [54.7, 9918.0], [54.8, 9938.0], [54.9, 9938.0], [55.0, 9938.0], [55.1, 9938.0], [55.2, 9953.0], [55.3, 9953.0], [55.4, 9953.0], [55.5, 9953.0], [55.6, 9959.0], [55.7, 9959.0], [55.8, 9959.0], [55.9, 9959.0], [56.0, 9974.0], [56.1, 9974.0], [56.2, 9974.0], [56.3, 9974.0], [56.4, 9992.0], [56.5, 9992.0], [56.6, 9992.0], [56.7, 9992.0], [56.8, 9998.0], [56.9, 9998.0], [57.0, 9998.0], [57.1, 9998.0], [57.2, 10044.0], [57.3, 10044.0], [57.4, 10044.0], [57.5, 10044.0], [57.6, 10046.0], [57.7, 10046.0], [57.8, 10046.0], [57.9, 10046.0], [58.0, 10063.0], [58.1, 10063.0], [58.2, 10063.0], [58.3, 10063.0], [58.4, 10088.0], [58.5, 10088.0], [58.6, 10088.0], [58.7, 10088.0], [58.8, 10098.0], [58.9, 10098.0], [59.0, 10098.0], [59.1, 10098.0], [59.2, 10101.0], [59.3, 10101.0], [59.4, 10101.0], [59.5, 10101.0], [59.6, 10106.0], [59.7, 10106.0], [59.8, 10106.0], [59.9, 10106.0], [60.0, 10107.0], [60.1, 10107.0], [60.2, 10107.0], [60.3, 10107.0], [60.4, 10111.0], [60.5, 10111.0], [60.6, 10111.0], [60.7, 10111.0], [60.8, 10123.0], [60.9, 10123.0], [61.0, 10123.0], [61.1, 10123.0], [61.2, 10147.0], [61.3, 10147.0], [61.4, 10147.0], [61.5, 10147.0], [61.6, 10163.0], [61.7, 10163.0], [61.8, 10163.0], [61.9, 10163.0], [62.0, 10172.0], [62.1, 10172.0], [62.2, 10172.0], [62.3, 10172.0], [62.4, 10175.0], [62.5, 10175.0], [62.6, 10175.0], [62.7, 10175.0], [62.8, 10186.0], [62.9, 10186.0], [63.0, 10186.0], [63.1, 10186.0], [63.2, 10186.0], [63.3, 10186.0], [63.4, 10186.0], [63.5, 10186.0], [63.6, 10188.0], [63.7, 10188.0], [63.8, 10188.0], [63.9, 10188.0], [64.0, 10190.0], [64.1, 10190.0], [64.2, 10190.0], [64.3, 10190.0], [64.4, 10201.0], [64.5, 10201.0], [64.6, 10201.0], [64.7, 10201.0], [64.8, 10206.0], [64.9, 10206.0], [65.0, 10206.0], [65.1, 10206.0], [65.2, 10228.0], [65.3, 10228.0], [65.4, 10228.0], [65.5, 10228.0], [65.6, 10232.0], [65.7, 10232.0], [65.8, 10232.0], [65.9, 10232.0], [66.0, 10234.0], [66.1, 10234.0], [66.2, 10234.0], [66.3, 10234.0], [66.4, 10257.0], [66.5, 10257.0], [66.6, 10257.0], [66.7, 10257.0], [66.8, 10272.0], [66.9, 10272.0], [67.0, 10272.0], [67.1, 10272.0], [67.2, 10275.0], [67.3, 10275.0], [67.4, 10275.0], [67.5, 10275.0], [67.6, 10280.0], [67.7, 10280.0], [67.8, 10280.0], [67.9, 10280.0], [68.0, 10282.0], [68.1, 10282.0], [68.2, 10282.0], [68.3, 10282.0], [68.4, 10300.0], [68.5, 10300.0], [68.6, 10300.0], [68.7, 10300.0], [68.8, 10325.0], [68.9, 10325.0], [69.0, 10325.0], [69.1, 10325.0], [69.2, 10327.0], [69.3, 10327.0], [69.4, 10327.0], [69.5, 10327.0], [69.6, 10335.0], [69.7, 10335.0], [69.8, 10335.0], [69.9, 10335.0], [70.0, 10336.0], [70.1, 10336.0], [70.2, 10336.0], [70.3, 10336.0], [70.4, 10337.0], [70.5, 10337.0], [70.6, 10337.0], [70.7, 10337.0], [70.8, 10338.0], [70.9, 10338.0], [71.0, 10338.0], [71.1, 10338.0], [71.2, 10360.0], [71.3, 10360.0], [71.4, 10360.0], [71.5, 10360.0], [71.6, 10365.0], [71.7, 10365.0], [71.8, 10365.0], [71.9, 10365.0], [72.0, 10375.0], [72.1, 10375.0], [72.2, 10375.0], [72.3, 10375.0], [72.4, 10383.0], [72.5, 10383.0], [72.6, 10383.0], [72.7, 10383.0], [72.8, 10390.0], [72.9, 10390.0], [73.0, 10390.0], [73.1, 10390.0], [73.2, 10395.0], [73.3, 10395.0], [73.4, 10395.0], [73.5, 10395.0], [73.6, 10401.0], [73.7, 10401.0], [73.8, 10401.0], [73.9, 10401.0], [74.0, 10406.0], [74.1, 10406.0], [74.2, 10406.0], [74.3, 10406.0], [74.4, 10414.0], [74.5, 10414.0], [74.6, 10414.0], [74.7, 10414.0], [74.8, 10415.0], [74.9, 10415.0], [75.0, 10415.0], [75.1, 10415.0], [75.2, 10421.0], [75.3, 10421.0], [75.4, 10421.0], [75.5, 10421.0], [75.6, 10421.0], [75.7, 10423.0], [75.8, 10423.0], [75.9, 10423.0], [76.0, 10423.0], [76.1, 10429.0], [76.2, 10429.0], [76.3, 10429.0], [76.4, 10429.0], [76.5, 10441.0], [76.6, 10441.0], [76.7, 10441.0], [76.8, 10441.0], [76.9, 10452.0], [77.0, 10452.0], [77.1, 10452.0], [77.2, 10452.0], [77.3, 10455.0], [77.4, 10455.0], [77.5, 10455.0], [77.6, 10455.0], [77.7, 10462.0], [77.8, 10462.0], [77.9, 10462.0], [78.0, 10462.0], [78.1, 10462.0], [78.2, 10462.0], [78.3, 10462.0], [78.4, 10462.0], [78.5, 10463.0], [78.6, 10463.0], [78.7, 10463.0], [78.8, 10463.0], [78.9, 10464.0], [79.0, 10464.0], [79.1, 10464.0], [79.2, 10464.0], [79.3, 10472.0], [79.4, 10472.0], [79.5, 10472.0], [79.6, 10472.0], [79.7, 10477.0], [79.8, 10477.0], [79.9, 10477.0], [80.0, 10477.0], [80.1, 10479.0], [80.2, 10479.0], [80.3, 10479.0], [80.4, 10479.0], [80.5, 10501.0], [80.6, 10501.0], [80.7, 10501.0], [80.8, 10501.0], [80.9, 10513.0], [81.0, 10513.0], [81.1, 10513.0], [81.2, 10513.0], [81.3, 10524.0], [81.4, 10524.0], [81.5, 10524.0], [81.6, 10524.0], [81.7, 10527.0], [81.8, 10527.0], [81.9, 10527.0], [82.0, 10527.0], [82.1, 10528.0], [82.2, 10528.0], [82.3, 10528.0], [82.4, 10528.0], [82.5, 10530.0], [82.6, 10530.0], [82.7, 10530.0], [82.8, 10530.0], [82.9, 10535.0], [83.0, 10535.0], [83.1, 10535.0], [83.2, 10535.0], [83.3, 10537.0], [83.4, 10537.0], [83.5, 10537.0], [83.6, 10537.0], [83.7, 10540.0], [83.8, 10540.0], [83.9, 10540.0], [84.0, 10540.0], [84.1, 10542.0], [84.2, 10542.0], [84.3, 10542.0], [84.4, 10542.0], [84.5, 10545.0], [84.6, 10545.0], [84.7, 10545.0], [84.8, 10545.0], [84.9, 10547.0], [85.0, 10547.0], [85.1, 10547.0], [85.2, 10547.0], [85.3, 10554.0], [85.4, 10554.0], [85.5, 10554.0], [85.6, 10554.0], [85.7, 10556.0], [85.8, 10556.0], [85.9, 10556.0], [86.0, 10556.0], [86.1, 10566.0], [86.2, 10566.0], [86.3, 10566.0], [86.4, 10566.0], [86.5, 10578.0], [86.6, 10578.0], [86.7, 10578.0], [86.8, 10578.0], [86.9, 10578.0], [87.0, 10578.0], [87.1, 10578.0], [87.2, 10578.0], [87.3, 10586.0], [87.4, 10586.0], [87.5, 10586.0], [87.6, 10586.0], [87.7, 10590.0], [87.8, 10590.0], [87.9, 10590.0], [88.0, 10590.0], [88.1, 10597.0], [88.2, 10597.0], [88.3, 10597.0], [88.4, 10597.0], [88.5, 10597.0], [88.6, 10597.0], [88.7, 10597.0], [88.8, 10597.0], [88.9, 10598.0], [89.0, 10598.0], [89.1, 10598.0], [89.2, 10598.0], [89.3, 10600.0], [89.4, 10600.0], [89.5, 10600.0], [89.6, 10600.0], [89.7, 10600.0], [89.8, 10600.0], [89.9, 10600.0], [90.0, 10600.0], [90.1, 10601.0], [90.2, 10601.0], [90.3, 10601.0], [90.4, 10601.0], [90.5, 10603.0], [90.6, 10603.0], [90.7, 10603.0], [90.8, 10603.0], [90.9, 10604.0], [91.0, 10604.0], [91.1, 10604.0], [91.2, 10604.0], [91.3, 10609.0], [91.4, 10609.0], [91.5, 10609.0], [91.6, 10609.0], [91.7, 10616.0], [91.8, 10616.0], [91.9, 10616.0], [92.0, 10616.0], [92.1, 10617.0], [92.2, 10617.0], [92.3, 10617.0], [92.4, 10617.0], [92.5, 10619.0], [92.6, 10619.0], [92.7, 10619.0], [92.8, 10619.0], [92.9, 10629.0], [93.0, 10629.0], [93.1, 10629.0], [93.2, 10629.0], [93.3, 10635.0], [93.4, 10635.0], [93.5, 10635.0], [93.6, 10635.0], [93.7, 10639.0], [93.8, 10639.0], [93.9, 10639.0], [94.0, 10639.0], [94.1, 10642.0], [94.2, 10642.0], [94.3, 10642.0], [94.4, 10642.0], [94.5, 10671.0], [94.6, 10671.0], [94.7, 10671.0], [94.8, 10671.0], [94.9, 10699.0], [95.0, 10699.0], [95.1, 10699.0], [95.2, 10699.0], [95.3, 10706.0], [95.4, 10706.0], [95.5, 10706.0], [95.6, 10706.0], [95.7, 10706.0], [95.8, 10706.0], [95.9, 10706.0], [96.0, 10706.0], [96.1, 10730.0], [96.2, 10730.0], [96.3, 10730.0], [96.4, 10730.0], [96.5, 10755.0], [96.6, 10755.0], [96.7, 10755.0], [96.8, 10755.0], [96.9, 10780.0], [97.0, 10780.0], [97.1, 10780.0], [97.2, 10780.0], [97.3, 10802.0], [97.4, 10802.0], [97.5, 10802.0], [97.6, 10802.0], [97.7, 10814.0], [97.8, 10814.0], [97.9, 10814.0], [98.0, 10814.0], [98.1, 10829.0], [98.2, 10829.0], [98.3, 10829.0], [98.4, 10829.0], [98.5, 10833.0], [98.6, 10833.0], [98.7, 10833.0], [98.8, 10833.0], [98.9, 10841.0], [99.0, 10841.0], [99.1, 10841.0], [99.2, 10841.0], [99.3, 10849.0], [99.4, 10849.0], [99.5, 10849.0], [99.6, 10849.0], [99.7, 10883.0], [99.8, 10883.0], [99.9, 10883.0], [100.0, 10883.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[0.0, 15946.0], [0.1, 15946.0], [0.2, 15946.0], [0.3, 15946.0], [0.4, 16277.0], [0.5, 16277.0], [0.6, 16277.0], [0.7, 16277.0], [0.8, 16354.0], [0.9, 16354.0], [1.0, 16354.0], [1.1, 16354.0], [1.2, 16354.0], [1.3, 16440.0], [1.4, 16440.0], [1.5, 16440.0], [1.6, 16588.0], [1.7, 16588.0], [1.8, 16588.0], [1.9, 16588.0], [2.0, 16721.0], [2.1, 16721.0], [2.2, 16721.0], [2.3, 16721.0], [2.4, 16777.0], [2.5, 16777.0], [2.6, 16777.0], [2.7, 16777.0], [2.8, 17952.0], [2.9, 17952.0], [3.0, 17952.0], [3.1, 17952.0], [3.2, 19571.0], [3.3, 19571.0], [3.4, 19571.0], [3.5, 19571.0], [3.6, 22224.0], [3.7, 22224.0], [3.8, 22224.0], [3.9, 22224.0], [4.0, 22288.0], [4.1, 22288.0], [4.2, 22288.0], [4.3, 22288.0], [4.4, 22370.0], [4.5, 22370.0], [4.6, 22370.0], [4.7, 22370.0], [4.8, 22625.0], [4.9, 22625.0], [5.0, 22625.0], [5.1, 22625.0], [5.2, 22638.0], [5.3, 22638.0], [5.4, 22638.0], [5.5, 22638.0], [5.6, 22638.0], [5.7, 22642.0], [5.8, 22642.0], [5.9, 22642.0], [6.0, 22642.0], [6.1, 22653.0], [6.2, 22653.0], [6.3, 22653.0], [6.4, 22653.0], [6.5, 22675.0], [6.6, 22675.0], [6.7, 22675.0], [6.8, 22675.0], [6.9, 22702.0], [7.0, 22702.0], [7.1, 22702.0], [7.2, 22702.0], [7.3, 24395.0], [7.4, 24395.0], [7.5, 24395.0], [7.6, 24395.0], [7.7, 24850.0], [7.8, 24850.0], [7.9, 24850.0], [8.0, 24850.0], [8.1, 25053.0], [8.2, 25053.0], [8.3, 25053.0], [8.4, 25053.0], [8.5, 25800.0], [8.6, 25800.0], [8.7, 25800.0], [8.8, 25800.0], [8.9, 25805.0], [9.0, 25805.0], [9.1, 25805.0], [9.2, 25805.0], [9.3, 26186.0], [9.4, 26186.0], [9.5, 26186.0], [9.6, 26186.0], [9.7, 26224.0], [9.8, 26224.0], [9.9, 26224.0], [10.0, 26224.0], [10.1, 26253.0], [10.2, 26253.0], [10.3, 26253.0], [10.4, 26253.0], [10.5, 26351.0], [10.6, 26351.0], [10.7, 26351.0], [10.8, 26351.0], [10.9, 26445.0], [11.0, 26445.0], [11.1, 26445.0], [11.2, 26445.0], [11.3, 26558.0], [11.4, 26558.0], [11.5, 26558.0], [11.6, 26558.0], [11.7, 26587.0], [11.8, 26587.0], [11.9, 26587.0], [12.0, 26587.0], [12.1, 26589.0], [12.2, 26589.0], [12.3, 26589.0], [12.4, 26589.0], [12.5, 26600.0], [12.6, 26600.0], [12.7, 26600.0], [12.8, 26600.0], [12.9, 26604.0], [13.0, 26604.0], [13.1, 26604.0], [13.2, 26604.0], [13.3, 26784.0], [13.4, 26784.0], [13.5, 26784.0], [13.6, 26784.0], [13.7, 27712.0], [13.8, 27712.0], [13.9, 27712.0], [14.0, 27712.0], [14.1, 27853.0], [14.2, 27853.0], [14.3, 27853.0], [14.4, 27853.0], [14.5, 27878.0], [14.6, 27878.0], [14.7, 27878.0], [14.8, 27878.0], [14.9, 28176.0], [15.0, 28176.0], [15.1, 28176.0], [15.2, 28176.0], [15.3, 33051.0], [15.4, 33051.0], [15.5, 33051.0], [15.6, 33051.0], [15.7, 33064.0], [15.8, 33064.0], [15.9, 33064.0], [16.0, 33064.0], [16.1, 33086.0], [16.2, 33086.0], [16.3, 33086.0], [16.4, 33086.0], [16.5, 34086.0], [16.6, 34086.0], [16.7, 34086.0], [16.8, 34086.0], [16.9, 34088.0], [17.0, 34088.0], [17.1, 34088.0], [17.2, 34088.0], [17.3, 34092.0], [17.4, 34092.0], [17.5, 34092.0], [17.6, 34104.0], [17.7, 34104.0], [17.8, 34104.0], [17.9, 34104.0], [18.0, 34327.0], [18.1, 34327.0], [18.2, 34327.0], [18.3, 34327.0], [18.4, 34358.0], [18.5, 34358.0], [18.6, 34358.0], [18.7, 34358.0], [18.8, 34932.0], [18.9, 34932.0], [19.0, 34932.0], [19.1, 34932.0], [19.2, 35252.0], [19.3, 35252.0], [19.4, 35252.0], [19.5, 35252.0], [19.6, 35600.0], [19.7, 35600.0], [19.8, 35600.0], [19.9, 35600.0], [20.0, 35901.0], [20.1, 35901.0], [20.2, 35901.0], [20.3, 35901.0], [20.4, 36524.0], [20.5, 36524.0], [20.6, 36524.0], [20.7, 36524.0], [20.8, 37124.0], [20.9, 37124.0], [21.0, 37124.0], [21.1, 37124.0], [21.2, 37468.0], [21.3, 37468.0], [21.4, 37468.0], [21.5, 37468.0], [21.6, 37642.0], [21.7, 37642.0], [21.8, 37642.0], [21.9, 37642.0], [22.0, 37790.0], [22.1, 37790.0], [22.2, 37790.0], [22.3, 37790.0], [22.4, 37918.0], [22.5, 37918.0], [22.6, 37918.0], [22.7, 37918.0], [22.8, 37934.0], [22.9, 37934.0], [23.0, 37934.0], [23.1, 37934.0], [23.2, 37956.0], [23.3, 37956.0], [23.4, 37956.0], [23.5, 37956.0], [23.6, 38220.0], [23.7, 38220.0], [23.8, 38220.0], [23.9, 38220.0], [24.0, 38227.0], [24.1, 38227.0], [24.2, 38227.0], [24.3, 38227.0], [24.4, 38242.0], [24.5, 38242.0], [24.6, 38242.0], [24.7, 38242.0], [24.8, 38263.0], [24.9, 38263.0], [25.0, 38263.0], [25.1, 38263.0], [25.2, 38628.0], [25.3, 38628.0], [25.4, 38628.0], [25.5, 38628.0], [25.6, 38755.0], [25.7, 38755.0], [25.8, 38755.0], [25.9, 38755.0], [26.0, 38755.0], [26.1, 38755.0], [26.2, 38755.0], [26.3, 38755.0], [26.4, 38759.0], [26.5, 38759.0], [26.6, 38759.0], [26.7, 38759.0], [26.8, 38794.0], [26.9, 38794.0], [27.0, 38794.0], [27.1, 38794.0], [27.2, 40434.0], [27.3, 40434.0], [27.4, 40434.0], [27.5, 40434.0], [27.6, 40434.0], [27.7, 40434.0], [27.8, 40434.0], [27.9, 40434.0], [28.0, 40463.0], [28.1, 40463.0], [28.2, 40463.0], [28.3, 40463.0], [28.4, 40809.0], [28.5, 40809.0], [28.6, 40809.0], [28.7, 40809.0], [28.8, 41565.0], [28.9, 41565.0], [29.0, 41565.0], [29.1, 41565.0], [29.2, 41846.0], [29.3, 41846.0], [29.4, 41846.0], [29.5, 41846.0], [29.6, 41938.0], [29.7, 41938.0], [29.8, 41938.0], [29.9, 41938.0], [30.0, 42079.0], [30.1, 42079.0], [30.2, 42079.0], [30.3, 42079.0], [30.4, 42084.0], [30.5, 42084.0], [30.6, 42084.0], [30.7, 42084.0], [30.8, 42084.0], [30.9, 42084.0], [31.0, 42084.0], [31.1, 42084.0], [31.2, 42094.0], [31.3, 42094.0], [31.4, 42094.0], [31.5, 42094.0], [31.6, 42210.0], [31.7, 42210.0], [31.8, 42210.0], [31.9, 42210.0], [32.0, 42232.0], [32.1, 42232.0], [32.2, 42232.0], [32.3, 42232.0], [32.4, 42273.0], [32.5, 42273.0], [32.6, 42273.0], [32.7, 42273.0], [32.8, 42360.0], [32.9, 42360.0], [33.0, 42360.0], [33.1, 42360.0], [33.2, 42489.0], [33.3, 42489.0], [33.4, 42489.0], [33.5, 42489.0], [33.6, 42588.0], [33.7, 42588.0], [33.8, 42588.0], [33.9, 42588.0], [34.0, 42698.0], [34.1, 42698.0], [34.2, 42698.0], [34.3, 42698.0], [34.4, 42762.0], [34.5, 42762.0], [34.6, 42762.0], [34.7, 42762.0], [34.8, 42763.0], [34.9, 42763.0], [35.0, 42763.0], [35.1, 42763.0], [35.2, 42949.0], [35.3, 42949.0], [35.4, 42949.0], [35.5, 42949.0], [35.6, 43396.0], [35.7, 43396.0], [35.8, 43396.0], [35.9, 43396.0], [36.0, 43400.0], [36.1, 43400.0], [36.2, 43400.0], [36.3, 43400.0], [36.4, 43495.0], [36.5, 43495.0], [36.6, 43495.0], [36.7, 43495.0], [36.8, 43705.0], [36.9, 43705.0], [37.0, 43705.0], [37.1, 43705.0], [37.2, 43708.0], [37.3, 43708.0], [37.4, 43708.0], [37.5, 43708.0], [37.6, 43731.0], [37.7, 43731.0], [37.8, 43731.0], [37.9, 43731.0], [38.0, 44066.0], [38.1, 44066.0], [38.2, 44066.0], [38.3, 44066.0], [38.4, 44068.0], [38.5, 44068.0], [38.6, 44068.0], [38.7, 44068.0], [38.8, 44297.0], [38.9, 44297.0], [39.0, 44297.0], [39.1, 44297.0], [39.2, 44548.0], [39.3, 44548.0], [39.4, 44548.0], [39.5, 44548.0], [39.6, 44599.0], [39.7, 44599.0], [39.8, 44599.0], [39.9, 44599.0], [40.0, 44990.0], [40.1, 44990.0], [40.2, 44990.0], [40.3, 44990.0], [40.4, 45007.0], [40.5, 45007.0], [40.6, 45007.0], [40.7, 45007.0], [40.8, 45012.0], [40.9, 45012.0], [41.0, 45012.0], [41.1, 45012.0], [41.2, 45038.0], [41.3, 45038.0], [41.4, 45038.0], [41.5, 45038.0], [41.6, 45288.0], [41.7, 45288.0], [41.8, 45288.0], [41.9, 45288.0], [42.0, 45658.0], [42.1, 45658.0], [42.2, 45658.0], [42.3, 45658.0], [42.4, 45681.0], [42.5, 45681.0], [42.6, 45681.0], [42.7, 45681.0], [42.8, 45799.0], [42.9, 45799.0], [43.0, 45799.0], [43.1, 45799.0], [43.2, 45810.0], [43.3, 45810.0], [43.4, 45810.0], [43.5, 45810.0], [43.6, 45846.0], [43.7, 45846.0], [43.8, 45846.0], [43.9, 45846.0], [44.0, 45860.0], [44.1, 45860.0], [44.2, 45860.0], [44.3, 45860.0], [44.4, 45873.0], [44.5, 45873.0], [44.6, 45873.0], [44.7, 45873.0], [44.8, 46494.0], [44.9, 46494.0], [45.0, 46494.0], [45.1, 46494.0], [45.2, 47965.0], [45.3, 47965.0], [45.4, 47965.0], [45.5, 47965.0], [45.6, 48126.0], [45.7, 48126.0], [45.8, 48126.0], [45.9, 48126.0], [46.0, 48166.0], [46.1, 48166.0], [46.2, 48166.0], [46.3, 48166.0], [46.4, 49044.0], [46.5, 49044.0], [46.6, 49044.0], [46.7, 49044.0], [46.8, 49045.0], [46.9, 49045.0], [47.0, 49045.0], [47.1, 49045.0], [47.2, 49076.0], [47.3, 49076.0], [47.4, 49076.0], [47.5, 49076.0], [47.6, 49082.0], [47.7, 49082.0], [47.8, 49082.0], [47.9, 49082.0], [48.0, 49146.0], [48.1, 49146.0], [48.2, 49146.0], [48.3, 49146.0], [48.4, 49444.0], [48.5, 49444.0], [48.6, 49444.0], [48.7, 49444.0], [48.8, 50025.0], [48.9, 50025.0], [49.0, 50025.0], [49.1, 50025.0], [49.2, 50058.0], [49.3, 50058.0], [49.4, 50058.0], [49.5, 50058.0], [49.6, 50133.0], [49.7, 50133.0], [49.8, 50133.0], [49.9, 50133.0], [50.0, 50975.0], [50.1, 50975.0], [50.2, 50975.0], [50.3, 50975.0], [50.4, 51236.0], [50.5, 51236.0], [50.6, 51236.0], [50.7, 51236.0], [50.8, 51249.0], [50.9, 51249.0], [51.0, 51249.0], [51.1, 51249.0], [51.2, 51296.0], [51.3, 51296.0], [51.4, 51296.0], [51.5, 51296.0], [51.6, 51317.0], [51.7, 51317.0], [51.8, 51317.0], [51.9, 51317.0], [52.0, 51338.0], [52.1, 51338.0], [52.2, 51338.0], [52.3, 51338.0], [52.4, 52071.0], [52.5, 52071.0], [52.6, 52071.0], [52.7, 52071.0], [52.8, 52108.0], [52.9, 52108.0], [53.0, 52108.0], [53.1, 52108.0], [53.2, 52113.0], [53.3, 52113.0], [53.4, 52113.0], [53.5, 52113.0], [53.6, 52114.0], [53.7, 52114.0], [53.8, 52114.0], [53.9, 52114.0], [54.0, 52187.0], [54.1, 52187.0], [54.2, 52187.0], [54.3, 52187.0], [54.4, 52252.0], [54.5, 52252.0], [54.6, 52252.0], [54.7, 52252.0], [54.8, 52300.0], [54.9, 52300.0], [55.0, 52300.0], [55.1, 52300.0], [55.2, 52310.0], [55.3, 52310.0], [55.4, 52310.0], [55.5, 52310.0], [55.6, 52356.0], [55.7, 52356.0], [55.8, 52356.0], [55.9, 52356.0], [56.0, 52357.0], [56.1, 52357.0], [56.2, 52357.0], [56.3, 52357.0], [56.4, 52375.0], [56.5, 52375.0], [56.6, 52375.0], [56.7, 52375.0], [56.8, 53297.0], [56.9, 53297.0], [57.0, 53297.0], [57.1, 53297.0], [57.2, 54401.0], [57.3, 54401.0], [57.4, 54401.0], [57.5, 54401.0], [57.6, 54515.0], [57.7, 54515.0], [57.8, 54515.0], [57.9, 54515.0], [58.0, 54832.0], [58.1, 54832.0], [58.2, 54832.0], [58.3, 54832.0], [58.4, 54876.0], [58.5, 54876.0], [58.6, 54876.0], [58.7, 54876.0], [58.8, 55005.0], [58.9, 55005.0], [59.0, 55005.0], [59.1, 55005.0], [59.2, 55010.0], [59.3, 55010.0], [59.4, 55010.0], [59.5, 55010.0], [59.6, 55031.0], [59.7, 55031.0], [59.8, 55031.0], [59.9, 55031.0], [60.0, 55091.0], [60.1, 55091.0], [60.2, 55091.0], [60.3, 55091.0], [60.4, 55112.0], [60.5, 55112.0], [60.6, 55112.0], [60.7, 55112.0], [60.8, 55289.0], [60.9, 55289.0], [61.0, 55289.0], [61.1, 55289.0], [61.2, 55415.0], [61.3, 55415.0], [61.4, 55415.0], [61.5, 55415.0], [61.6, 55415.0], [61.7, 55415.0], [61.8, 55415.0], [61.9, 55415.0], [62.0, 56354.0], [62.1, 56354.0], [62.2, 56354.0], [62.3, 56354.0], [62.4, 56465.0], [62.5, 56465.0], [62.6, 56465.0], [62.7, 56465.0], [62.8, 56510.0], [62.9, 56510.0], [63.0, 56510.0], [63.1, 56510.0], [63.2, 56537.0], [63.3, 56537.0], [63.4, 56537.0], [63.5, 56537.0], [63.6, 56779.0], [63.7, 56779.0], [63.8, 56779.0], [63.9, 56779.0], [64.0, 56800.0], [64.1, 56800.0], [64.2, 56800.0], [64.3, 56800.0], [64.4, 56811.0], [64.5, 56811.0], [64.6, 56811.0], [64.7, 56811.0], [64.8, 56856.0], [64.9, 56856.0], [65.0, 56856.0], [65.1, 56856.0], [65.2, 57054.0], [65.3, 57054.0], [65.4, 57054.0], [65.5, 57054.0], [65.6, 57136.0], [65.7, 57136.0], [65.8, 57136.0], [65.9, 57136.0], [66.0, 57362.0], [66.1, 57362.0], [66.2, 57362.0], [66.3, 57362.0], [66.4, 57385.0], [66.5, 57385.0], [66.6, 57385.0], [66.7, 57385.0], [66.8, 57788.0], [66.9, 57788.0], [67.0, 57788.0], [67.1, 57788.0], [67.2, 57821.0], [67.3, 57821.0], [67.4, 57821.0], [67.5, 57821.0], [67.6, 57937.0], [67.7, 57937.0], [67.8, 57937.0], [67.9, 57937.0], [68.0, 58702.0], [68.1, 58702.0], [68.2, 58702.0], [68.3, 58702.0], [68.4, 58812.0], [68.5, 58812.0], [68.6, 58812.0], [68.7, 58812.0], [68.8, 58827.0], [68.9, 58827.0], [69.0, 58827.0], [69.1, 58827.0], [69.2, 59278.0], [69.3, 59278.0], [69.4, 59278.0], [69.5, 59278.0], [69.6, 59710.0], [69.7, 59710.0], [69.8, 59710.0], [69.9, 59710.0], [70.0, 60023.0], [70.1, 60023.0], [70.2, 60023.0], [70.3, 60023.0], [70.4, 60034.0], [70.5, 60034.0], [70.6, 60034.0], [70.7, 60034.0], [70.8, 60066.0], [70.9, 60066.0], [71.0, 60066.0], [71.1, 60066.0], [71.2, 60101.0], [71.3, 60101.0], [71.4, 60101.0], [71.5, 60101.0], [71.6, 60158.0], [71.7, 60158.0], [71.8, 60158.0], [71.9, 60158.0], [72.0, 60170.0], [72.1, 60170.0], [72.2, 60170.0], [72.3, 60170.0], [72.4, 60226.0], [72.5, 60226.0], [72.6, 60226.0], [72.7, 60226.0], [72.8, 60269.0], [72.9, 60269.0], [73.0, 60269.0], [73.1, 60269.0], [73.2, 60273.0], [73.3, 60273.0], [73.4, 60273.0], [73.5, 60273.0], [73.6, 60305.0], [73.7, 60305.0], [73.8, 60305.0], [73.9, 60305.0], [74.0, 60411.0], [74.1, 60411.0], [74.2, 60411.0], [74.3, 60411.0], [74.4, 60439.0], [74.5, 60439.0], [74.6, 60439.0], [74.7, 60439.0], [74.8, 60440.0], [74.9, 60440.0], [75.0, 60440.0], [75.1, 60440.0], [75.2, 60524.0], [75.3, 60524.0], [75.4, 60524.0], [75.5, 60524.0], [75.6, 60524.0], [75.7, 60550.0], [75.8, 60550.0], [75.9, 60550.0], [76.0, 60550.0], [76.1, 60576.0], [76.2, 60576.0], [76.3, 60576.0], [76.4, 60576.0], [76.5, 60581.0], [76.6, 60581.0], [76.7, 60581.0], [76.8, 60581.0], [76.9, 60586.0], [77.0, 60586.0], [77.1, 60586.0], [77.2, 60586.0], [77.3, 60670.0], [77.4, 60670.0], [77.5, 60670.0], [77.6, 60670.0], [77.7, 60718.0], [77.8, 60718.0], [77.9, 60718.0], [78.0, 60718.0], [78.1, 60736.0], [78.2, 60736.0], [78.3, 60736.0], [78.4, 60736.0], [78.5, 60741.0], [78.6, 60741.0], [78.7, 60741.0], [78.8, 60741.0], [78.9, 60744.0], [79.0, 60744.0], [79.1, 60744.0], [79.2, 60744.0], [79.3, 60752.0], [79.4, 60752.0], [79.5, 60752.0], [79.6, 60752.0], [79.7, 60754.0], [79.8, 60754.0], [79.9, 60754.0], [80.0, 60754.0], [80.1, 60822.0], [80.2, 60822.0], [80.3, 60822.0], [80.4, 60822.0], [80.5, 60876.0], [80.6, 60876.0], [80.7, 60876.0], [80.8, 60876.0], [80.9, 60972.0], [81.0, 60972.0], [81.1, 60972.0], [81.2, 60972.0], [81.3, 61126.0], [81.4, 61126.0], [81.5, 61126.0], [81.6, 61126.0], [81.7, 61137.0], [81.8, 61137.0], [81.9, 61137.0], [82.0, 61137.0], [82.1, 61147.0], [82.2, 61147.0], [82.3, 61147.0], [82.4, 61147.0], [82.5, 61171.0], [82.6, 61171.0], [82.7, 61171.0], [82.8, 61171.0], [82.9, 61231.0], [83.0, 61231.0], [83.1, 61231.0], [83.2, 61231.0], [83.3, 61541.0], [83.4, 61541.0], [83.5, 61541.0], [83.6, 61541.0], [83.7, 61609.0], [83.8, 61609.0], [83.9, 61609.0], [84.0, 61609.0], [84.1, 61642.0], [84.2, 61642.0], [84.3, 61642.0], [84.4, 61642.0], [84.5, 61657.0], [84.6, 61657.0], [84.7, 61657.0], [84.8, 61657.0], [84.9, 61659.0], [85.0, 61659.0], [85.1, 61659.0], [85.2, 61659.0], [85.3, 61676.0], [85.4, 61676.0], [85.5, 61676.0], [85.6, 61676.0], [85.7, 61720.0], [85.8, 61720.0], [85.9, 61720.0], [86.0, 61720.0], [86.1, 61792.0], [86.2, 61792.0], [86.3, 61792.0], [86.4, 61792.0], [86.5, 61816.0], [86.6, 61816.0], [86.7, 61816.0], [86.8, 61816.0], [86.9, 61820.0], [87.0, 61820.0], [87.1, 61820.0], [87.2, 61820.0], [87.3, 61829.0], [87.4, 61829.0], [87.5, 61829.0], [87.6, 61829.0], [87.7, 61849.0], [87.8, 61849.0], [87.9, 61849.0], [88.0, 61849.0], [88.1, 61859.0], [88.2, 61859.0], [88.3, 61859.0], [88.4, 61859.0], [88.5, 61865.0], [88.6, 61865.0], [88.7, 61865.0], [88.8, 61865.0], [88.9, 61866.0], [89.0, 61866.0], [89.1, 61866.0], [89.2, 61866.0], [89.3, 61873.0], [89.4, 61873.0], [89.5, 61873.0], [89.6, 61873.0], [89.7, 61879.0], [89.8, 61879.0], [89.9, 61879.0], [90.0, 61879.0], [90.1, 61890.0], [90.2, 61890.0], [90.3, 61890.0], [90.4, 61890.0], [90.5, 61892.0], [90.6, 61892.0], [90.7, 61892.0], [90.8, 61892.0], [90.9, 61898.0], [91.0, 61898.0], [91.1, 61898.0], [91.2, 61898.0], [91.3, 61907.0], [91.4, 61907.0], [91.5, 61907.0], [91.6, 61907.0], [91.7, 61914.0], [91.8, 61914.0], [91.9, 61914.0], [92.0, 61914.0], [92.1, 61924.0], [92.2, 61924.0], [92.3, 61924.0], [92.4, 61924.0], [92.5, 61925.0], [92.6, 61925.0], [92.7, 61925.0], [92.8, 61925.0], [92.9, 61926.0], [93.0, 61926.0], [93.1, 61926.0], [93.2, 61926.0], [93.3, 61933.0], [93.4, 61933.0], [93.5, 61933.0], [93.6, 61933.0], [93.7, 61965.0], [93.8, 61965.0], [93.9, 61965.0], [94.0, 61965.0], [94.1, 62002.0], [94.2, 62002.0], [94.3, 62002.0], [94.4, 62002.0], [94.5, 62007.0], [94.6, 62007.0], [94.7, 62007.0], [94.8, 62007.0], [94.9, 62020.0], [95.0, 62020.0], [95.1, 62020.0], [95.2, 62020.0], [95.3, 62042.0], [95.4, 62042.0], [95.5, 62042.0], [95.6, 62042.0], [95.7, 62042.0], [95.8, 62042.0], [95.9, 62042.0], [96.0, 62042.0], [96.1, 62059.0], [96.2, 62059.0], [96.3, 62059.0], [96.4, 62059.0], [96.5, 62069.0], [96.6, 62069.0], [96.7, 62069.0], [96.8, 62069.0], [96.9, 62071.0], [97.0, 62071.0], [97.1, 62071.0], [97.2, 62071.0], [97.3, 62071.0], [97.4, 62071.0], [97.5, 62071.0], [97.6, 62071.0], [97.7, 62072.0], [97.8, 62072.0], [97.9, 62072.0], [98.0, 62072.0], [98.1, 62076.0], [98.2, 62076.0], [98.3, 62076.0], [98.4, 62076.0], [98.5, 62096.0], [98.6, 62096.0], [98.7, 62096.0], [98.8, 62096.0], [98.9, 62115.0], [99.0, 62115.0], [99.1, 62115.0], [99.2, 62115.0], [99.3, 62137.0], [99.4, 62137.0], [99.5, 62137.0], [99.6, 62137.0], [99.7, 65889.0], [99.8, 65889.0], [99.9, 65889.0], [100.0, 65889.0]], "isOverall": false, "label": "Student Attendance SchoolWise", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3000.0, "maxY": 22.0, "series": [{"data": [[3000.0, 1.0], [3200.0, 1.0], [3500.0, 1.0], [3700.0, 4.0], [4000.0, 2.0], [4100.0, 2.0], [4300.0, 5.0], [4200.0, 3.0], [4400.0, 4.0], [4500.0, 5.0], [4600.0, 1.0], [4800.0, 2.0], [4700.0, 4.0], [4900.0, 3.0], [5100.0, 1.0], [5000.0, 2.0], [5200.0, 5.0], [5300.0, 2.0], [5400.0, 10.0], [5500.0, 3.0], [5600.0, 3.0], [5700.0, 5.0], [5800.0, 3.0], [6000.0, 6.0], [5900.0, 3.0], [6100.0, 2.0], [6200.0, 6.0], [6300.0, 4.0], [6400.0, 5.0], [6600.0, 4.0], [6500.0, 3.0], [6800.0, 7.0], [6700.0, 2.0], [6900.0, 2.0], [7000.0, 3.0], [7100.0, 2.0], [7300.0, 3.0], [7400.0, 1.0], [10100.0, 13.0], [9800.0, 8.0], [9900.0, 10.0], [10000.0, 5.0], [10200.0, 10.0], [10500.0, 22.0], [10400.0, 17.0], [10600.0, 15.0], [10300.0, 13.0], [10700.0, 5.0], [10800.0, 7.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[34100.0, 1.0], [34300.0, 2.0], [34900.0, 1.0], [35900.0, 1.0], [36500.0, 1.0], [37100.0, 1.0], [37900.0, 3.0], [37700.0, 1.0], [38700.0, 4.0], [41500.0, 1.0], [41900.0, 1.0], [42500.0, 1.0], [42300.0, 1.0], [42700.0, 2.0], [42900.0, 1.0], [43300.0, 1.0], [43700.0, 3.0], [44500.0, 2.0], [44900.0, 1.0], [45700.0, 1.0], [48100.0, 2.0], [49100.0, 1.0], [47900.0, 1.0], [50100.0, 1.0], [50900.0, 1.0], [51300.0, 2.0], [52300.0, 5.0], [52100.0, 4.0], [54500.0, 1.0], [55100.0, 1.0], [56300.0, 1.0], [56500.0, 2.0], [56700.0, 1.0], [57300.0, 2.0], [57100.0, 1.0], [57700.0, 1.0], [57900.0, 1.0], [58700.0, 1.0], [59700.0, 1.0], [60100.0, 3.0], [60500.0, 5.0], [60300.0, 1.0], [60700.0, 6.0], [61100.0, 4.0], [60900.0, 1.0], [61500.0, 1.0], [61900.0, 7.0], [61700.0, 2.0], [62100.0, 2.0], [65800.0, 1.0], [15900.0, 1.0], [16200.0, 1.0], [16300.0, 1.0], [16400.0, 1.0], [16500.0, 1.0], [16700.0, 2.0], [17900.0, 1.0], [19500.0, 1.0], [22300.0, 1.0], [22200.0, 2.0], [22600.0, 5.0], [22700.0, 1.0], [24300.0, 1.0], [24800.0, 1.0], [25000.0, 1.0], [25800.0, 2.0], [26200.0, 2.0], [26400.0, 1.0], [26300.0, 1.0], [26500.0, 3.0], [26100.0, 1.0], [26600.0, 2.0], [26700.0, 1.0], [27800.0, 2.0], [27700.0, 1.0], [28100.0, 1.0], [33000.0, 3.0], [34000.0, 3.0], [35200.0, 1.0], [35600.0, 1.0], [37400.0, 1.0], [37600.0, 1.0], [38200.0, 4.0], [38600.0, 1.0], [40400.0, 3.0], [40800.0, 1.0], [42600.0, 1.0], [41800.0, 1.0], [42200.0, 3.0], [42000.0, 4.0], [42400.0, 1.0], [43400.0, 2.0], [44200.0, 1.0], [44000.0, 2.0], [45000.0, 3.0], [45200.0, 1.0], [45800.0, 4.0], [45600.0, 2.0], [46400.0, 1.0], [49000.0, 4.0], [49400.0, 1.0], [50000.0, 2.0], [51200.0, 3.0], [52200.0, 1.0], [53200.0, 1.0], [52000.0, 1.0], [54400.0, 1.0], [54800.0, 2.0], [55000.0, 4.0], [55200.0, 1.0], [55400.0, 2.0], [56400.0, 1.0], [56800.0, 3.0], [57000.0, 1.0], [57800.0, 1.0], [58800.0, 2.0], [59200.0, 1.0], [60000.0, 3.0], [60200.0, 3.0], [60400.0, 3.0], [60800.0, 2.0], [60600.0, 1.0], [61200.0, 1.0], [61800.0, 12.0], [61600.0, 5.0], [62000.0, 12.0]], "isOverall": false, "label": "Student Attendance SchoolWise", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 65800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 500.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 500.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 500.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 101.10945273631839, "minX": 1.5947547E12, "maxY": 246.08695652173915, "series": [{"data": [[1.5947547E12, 246.08695652173915], [1.59475476E12, 101.10945273631839]], "isOverall": false, "label": "Student Attendance Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59475476E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 7982.488000000004, "minX": 1.0, "maxY": 65889.0, "series": [{"data": [[250.0, 7982.488000000004]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[250.0, 7982.488000000004]], "isOverall": false, "label": "Login-Aggregated", "isController": false}, {"data": [[2.0, 62115.0], [3.0, 61892.0], [4.0, 61816.0], [5.0, 62096.0], [6.0, 65889.0], [7.0, 62076.0], [8.0, 61859.0], [9.0, 62072.0], [10.0, 61849.0], [11.0, 62071.0], [12.0, 62069.0], [14.0, 61950.0], [15.0, 62042.0], [17.0, 61939.5], [18.0, 62042.0], [19.0, 62020.0], [20.0, 61792.0], [21.0, 62007.0], [22.0, 62002.0], [23.0, 61965.0], [24.0, 61720.0], [25.0, 61926.0], [26.0, 61933.0], [27.0, 61676.0], [28.0, 61924.0], [29.0, 61914.0], [30.0, 61925.0], [32.0, 61898.0], [35.0, 61898.5], [34.0, 61633.0], [37.0, 61769.0], [39.0, 61757.5], [41.0, 61865.5], [43.0, 61231.0], [42.0, 61541.0], [45.0, 60972.0], [44.0, 61147.0], [47.0, 61137.0], [46.0, 61171.0], [49.0, 60754.0], [48.0, 61126.0], [51.0, 60876.0], [50.0, 60670.0], [53.0, 60752.0], [52.0, 60822.0], [54.0, 60741.0], [57.0, 60718.0], [56.0, 60740.0], [59.0, 60576.0], [58.0, 60305.0], [61.0, 60581.0], [60.0, 60586.0], [63.0, 60524.0], [62.0, 60550.0], [67.0, 60269.0], [66.0, 60411.0], [65.0, 60439.0], [64.0, 60440.0], [71.0, 60158.0], [70.0, 60170.0], [69.0, 60226.0], [68.0, 60273.0], [75.0, 60028.5], [73.0, 60066.0], [72.0, 60101.0], [79.0, 58812.0], [78.0, 58827.0], [77.0, 59278.0], [76.0, 59710.0], [83.0, 57788.0], [82.0, 57937.0], [81.0, 57821.0], [80.0, 58702.0], [87.0, 57054.0], [86.0, 57362.0], [85.0, 57136.0], [84.0, 57385.0], [91.0, 56811.0], [90.0, 56856.0], [89.0, 56779.0], [88.0, 56800.0], [95.0, 56354.0], [94.0, 56465.0], [93.0, 56510.0], [92.0, 56537.0], [99.0, 55031.0], [98.0, 55415.0], [97.0, 55415.0], [96.0, 55289.0], [103.0, 54994.0], [101.0, 55005.0], [100.0, 55010.0], [107.0, 52375.0], [106.0, 54515.0], [105.0, 54832.0], [104.0, 55091.0], [111.0, 52113.0], [110.0, 52111.0], [108.0, 52356.0], [115.0, 51317.0], [114.0, 52310.0], [113.0, 52071.0], [112.0, 52357.0], [119.0, 50133.0], [118.0, 50975.0], [117.0, 51236.0], [116.0, 51296.0], [123.0, 53297.0], [122.0, 54401.0], [121.0, 50025.0], [120.0, 50058.0], [127.0, 52252.0], [126.0, 51338.0], [125.0, 52300.0], [124.0, 52187.0], [135.0, 49082.0], [134.0, 48166.0], [133.0, 44990.0], [132.0, 49146.0], [131.0, 45009.5], [129.0, 47965.0], [128.0, 51249.0], [143.0, 45846.0], [142.0, 45873.0], [141.0, 46494.0], [140.0, 49045.0], [139.0, 49044.0], [138.0, 48126.0], [137.0, 49444.0], [136.0, 49076.0], [151.0, 40809.0], [150.0, 45038.0], [149.0, 44548.0], [148.0, 44599.0], [147.0, 45658.0], [146.0, 45681.0], [145.0, 45799.0], [144.0, 45810.0], [159.0, 43400.0], [158.0, 45288.0], [157.0, 43706.5], [155.0, 44066.0], [154.0, 44068.0], [153.0, 43731.0], [152.0, 45860.0], [167.0, 42763.0], [166.0, 42508.0], [163.0, 42588.0], [162.0, 44297.0], [161.0, 42949.0], [160.0, 43396.0], [175.0, 41938.0], [174.0, 42232.0], [173.0, 42079.0], [172.0, 42698.0], [171.0, 42360.0], [170.0, 42084.0], [168.0, 42094.0], [183.0, 40463.0], [182.0, 40434.0], [181.0, 38628.0], [180.0, 40434.0], [179.0, 41846.0], [178.0, 43495.0], [177.0, 41565.0], [176.0, 42210.0], [191.0, 38220.0], [190.0, 38227.0], [189.0, 38242.0], [188.0, 37790.0], [187.0, 38755.0], [186.0, 38757.0], [184.0, 38794.0], [199.0, 36824.0], [197.0, 37468.0], [196.0, 37918.0], [195.0, 37934.0], [194.0, 37642.0], [193.0, 37956.0], [192.0, 38263.0], [207.0, 34092.0], [206.0, 34104.0], [205.0, 34327.0], [204.0, 34358.0], [203.0, 35252.0], [202.0, 34932.0], [201.0, 35600.0], [200.0, 35901.0], [215.0, 27712.0], [214.0, 28027.0], [212.0, 33051.0], [211.0, 33064.0], [210.0, 33086.0], [209.0, 34088.0], [208.0, 34086.0], [223.0, 26186.0], [222.0, 26253.0], [221.0, 26593.5], [219.0, 26589.0], [218.0, 26604.0], [217.0, 27853.0], [216.0, 26784.0], [231.0, 24395.0], [230.0, 25053.0], [229.0, 25800.0], [228.0, 25805.0], [227.0, 26224.0], [226.0, 26445.0], [225.0, 26351.0], [224.0, 26558.0], [237.0, 22675.0], [236.0, 22370.0], [235.0, 22702.0], [234.0, 22224.0], [233.0, 22288.0], [232.0, 24850.0], [247.0, 16440.0], [246.0, 16588.0], [245.0, 16721.0], [244.0, 16777.0], [243.0, 17952.0], [242.0, 19571.0], [241.0, 22640.0], [240.0, 22639.0], [250.0, 15946.0], [249.0, 16277.0], [248.0, 16354.0], [1.0, 62137.0]], "isOverall": false, "label": "Student Attendance SchoolWise", "isController": false}, {"data": [[125.61200000000001, 47489.23600000001]], "isOverall": false, "label": "Student Attendance SchoolWise-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 250.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1847.6333333333334, "minX": 1.5947547E12, "maxY": 1.629230625E7, "series": [{"data": [[1.5947547E12, 3976360.4166666665], [1.59475476E12, 1.629230625E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.5947547E12, 1847.6333333333334], [1.59475476E12, 3323.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59475476E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 7982.488000000004, "minX": 1.5947547E12, "maxY": 52804.59203980101, "series": [{"data": [[1.5947547E12, 7982.488000000004]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.5947547E12, 25685.428571428572], [1.59475476E12, 52804.59203980101]], "isOverall": false, "label": "Student Attendance SchoolWise", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59475476E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 7981.787999999999, "minX": 1.5947547E12, "maxY": 35561.781094527374, "series": [{"data": [[1.5947547E12, 7981.787999999999]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.5947547E12, 8976.142857142859], [1.59475476E12, 35561.781094527374]], "isOverall": false, "label": "Student Attendance SchoolWise", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59475476E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 10.53061224489796, "minX": 1.5947547E12, "maxY": 4166.092000000001, "series": [{"data": [[1.5947547E12, 4166.092000000001]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.5947547E12, 10.53061224489796], [1.59475476E12, 111.27860696517416]], "isOverall": false, "label": "Student Attendance SchoolWise", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59475476E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3044.0, "minX": 1.5947547E12, "maxY": 65889.0, "series": [{"data": [[1.5947547E12, 35252.0], [1.59475476E12, 65889.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.5947547E12, 3044.0], [1.59475476E12, 35600.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.5947547E12, 24850.0], [1.59475476E12, 61922.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.5947547E12, 34358.0], [1.59475476E12, 62136.56]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.5947547E12, 27712.0], [1.59475476E12, 62057.3]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59475476E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 4441.0, "minX": 1.0, "maxY": 61914.0, "series": [{"data": [[2.0, 35750.5], [8.0, 38776.5], [37.0, 5457.0], [9.0, 37956.0], [40.0, 6367.5], [10.0, 26694.0], [41.0, 61914.0], [11.0, 51979.5], [3.0, 30788.5], [12.0, 56805.5], [13.0, 42489.0], [14.0, 33559.5], [4.0, 50095.5], [1.0, 19571.0], [5.0, 36178.5], [21.0, 60752.0], [6.0, 42074.0], [29.0, 4441.0], [125.0, 10415.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 125.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 4386.0, "minX": 1.0, "maxY": 53259.0, "series": [{"data": [[2.0, 13461.0], [8.0, 19368.5], [37.0, 5457.0], [9.0, 17748.0], [40.0, 6367.5], [10.0, 10517.0], [41.0, 53259.0], [11.0, 31478.0], [3.0, 13031.5], [12.0, 35884.0], [13.0, 20871.0], [14.0, 23255.0], [4.0, 29453.0], [1.0, 5268.0], [5.0, 19231.0], [21.0, 47107.0], [6.0, 21982.0], [29.0, 4386.0], [125.0, 10415.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 125.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.5947547E12, "maxY": 8.333333333333334, "series": [{"data": [[1.5947547E12, 8.333333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5947547E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 3.35, "minX": 1.5947547E12, "maxY": 4.983333333333333, "series": [{"data": [[1.5947547E12, 4.983333333333333], [1.59475476E12, 3.35]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59475476E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.8166666666666667, "minX": 1.5947547E12, "maxY": 4.166666666666667, "series": [{"data": [[1.5947547E12, 0.8166666666666667], [1.59475476E12, 3.35]], "isOverall": false, "label": "Student Attendance SchoolWise-success", "isController": false}, {"data": [[1.5947547E12, 4.166666666666667]], "isOverall": false, "label": "Login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59475476E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3.35, "minX": 1.5947547E12, "maxY": 4.983333333333333, "series": [{"data": [[1.5947547E12, 4.983333333333333], [1.59475476E12, 3.35]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59475476E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

