/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 908.0, "minX": 0.0, "maxY": 73749.0, "series": [{"data": [[0.0, 908.0], [0.1, 908.0], [0.2, 908.0], [0.3, 908.0], [0.4, 1182.0], [0.5, 1182.0], [0.6, 1182.0], [0.7, 2009.0], [0.8, 2009.0], [0.9, 2009.0], [1.0, 2011.0], [1.1, 2011.0], [1.2, 2011.0], [1.3, 2011.0], [1.4, 2453.0], [1.5, 2453.0], [1.6, 2453.0], [1.7, 2467.0], [1.8, 2467.0], [1.9, 2467.0], [2.0, 3136.0], [2.1, 3136.0], [2.2, 3136.0], [2.3, 3136.0], [2.4, 3286.0], [2.5, 3286.0], [2.6, 3286.0], [2.7, 3306.0], [2.8, 3306.0], [2.9, 3306.0], [3.0, 3395.0], [3.1, 3395.0], [3.2, 3395.0], [3.3, 3395.0], [3.4, 3417.0], [3.5, 3417.0], [3.6, 3417.0], [3.7, 3455.0], [3.8, 3455.0], [3.9, 3455.0], [4.0, 3467.0], [4.1, 3467.0], [4.2, 3467.0], [4.3, 3467.0], [4.4, 3489.0], [4.5, 3489.0], [4.6, 3489.0], [4.7, 3495.0], [4.8, 3495.0], [4.9, 3495.0], [5.0, 3495.0], [5.1, 3495.0], [5.2, 3495.0], [5.3, 3495.0], [5.4, 3551.0], [5.5, 3551.0], [5.6, 3551.0], [5.7, 3551.0], [5.8, 3551.0], [5.9, 3551.0], [6.0, 3596.0], [6.1, 3596.0], [6.2, 3596.0], [6.3, 3596.0], [6.4, 3609.0], [6.5, 3609.0], [6.6, 3609.0], [6.7, 3610.0], [6.8, 3610.0], [6.9, 3610.0], [7.0, 3695.0], [7.1, 3695.0], [7.2, 3695.0], [7.3, 3695.0], [7.4, 3710.0], [7.5, 3710.0], [7.6, 3710.0], [7.7, 3793.0], [7.8, 3793.0], [7.9, 3793.0], [8.0, 3794.0], [8.1, 3794.0], [8.2, 3794.0], [8.3, 3794.0], [8.4, 3820.0], [8.5, 3820.0], [8.6, 3820.0], [8.7, 3822.0], [8.8, 3822.0], [8.9, 3822.0], [9.0, 3844.0], [9.1, 3844.0], [9.2, 3844.0], [9.3, 3844.0], [9.4, 3912.0], [9.5, 3912.0], [9.6, 3912.0], [9.7, 3912.0], [9.8, 3912.0], [9.9, 3912.0], [10.0, 3988.0], [10.1, 3988.0], [10.2, 3988.0], [10.3, 3988.0], [10.4, 3998.0], [10.5, 3998.0], [10.6, 3998.0], [10.7, 4005.0], [10.8, 4005.0], [10.9, 4005.0], [11.0, 4005.0], [11.1, 4030.0], [11.2, 4030.0], [11.3, 4030.0], [11.4, 4057.0], [11.5, 4057.0], [11.6, 4057.0], [11.7, 4096.0], [11.8, 4096.0], [11.9, 4096.0], [12.0, 4096.0], [12.1, 4113.0], [12.2, 4113.0], [12.3, 4113.0], [12.4, 4119.0], [12.5, 4119.0], [12.6, 4119.0], [12.7, 4128.0], [12.8, 4128.0], [12.9, 4128.0], [13.0, 4128.0], [13.1, 4142.0], [13.2, 4142.0], [13.3, 4142.0], [13.4, 4161.0], [13.5, 4161.0], [13.6, 4161.0], [13.7, 4172.0], [13.8, 4172.0], [13.9, 4172.0], [14.0, 4172.0], [14.1, 4175.0], [14.2, 4175.0], [14.3, 4175.0], [14.4, 4220.0], [14.5, 4220.0], [14.6, 4220.0], [14.7, 4243.0], [14.8, 4243.0], [14.9, 4243.0], [15.0, 4243.0], [15.1, 4271.0], [15.2, 4271.0], [15.3, 4271.0], [15.4, 4288.0], [15.5, 4288.0], [15.6, 4288.0], [15.7, 4372.0], [15.8, 4372.0], [15.9, 4372.0], [16.0, 4372.0], [16.1, 4395.0], [16.2, 4395.0], [16.3, 4395.0], [16.4, 4414.0], [16.5, 4414.0], [16.6, 4414.0], [16.7, 4447.0], [16.8, 4447.0], [16.9, 4447.0], [17.0, 4447.0], [17.1, 4455.0], [17.2, 4455.0], [17.3, 4455.0], [17.4, 4489.0], [17.5, 4489.0], [17.6, 4489.0], [17.7, 4557.0], [17.8, 4557.0], [17.9, 4557.0], [18.0, 4557.0], [18.1, 4561.0], [18.2, 4561.0], [18.3, 4561.0], [18.4, 4565.0], [18.5, 4565.0], [18.6, 4565.0], [18.7, 4611.0], [18.8, 4611.0], [18.9, 4611.0], [19.0, 4633.0], [19.1, 4633.0], [19.2, 4633.0], [19.3, 4633.0], [19.4, 4668.0], [19.5, 4668.0], [19.6, 4668.0], [19.7, 4673.0], [19.8, 4673.0], [19.9, 4673.0], [20.0, 4696.0], [20.1, 4696.0], [20.2, 4696.0], [20.3, 4696.0], [20.4, 4698.0], [20.5, 4698.0], [20.6, 4698.0], [20.7, 4708.0], [20.8, 4708.0], [20.9, 4708.0], [21.0, 4749.0], [21.1, 4749.0], [21.2, 4749.0], [21.3, 4749.0], [21.4, 4756.0], [21.5, 4756.0], [21.6, 4756.0], [21.7, 4758.0], [21.8, 4758.0], [21.9, 4758.0], [22.0, 4782.0], [22.1, 4782.0], [22.2, 4782.0], [22.3, 4782.0], [22.4, 4896.0], [22.5, 4896.0], [22.6, 4896.0], [22.7, 4903.0], [22.8, 4903.0], [22.9, 4903.0], [23.0, 4921.0], [23.1, 4921.0], [23.2, 4921.0], [23.3, 4921.0], [23.4, 4969.0], [23.5, 4969.0], [23.6, 4969.0], [23.7, 5150.0], [23.8, 5150.0], [23.9, 5150.0], [24.0, 5181.0], [24.1, 5181.0], [24.2, 5181.0], [24.3, 5181.0], [24.4, 5791.0], [24.5, 5791.0], [24.6, 5791.0], [24.7, 6579.0], [24.8, 6579.0], [24.9, 6579.0], [25.0, 6582.0], [25.1, 6582.0], [25.2, 6582.0], [25.3, 6582.0], [25.4, 6586.0], [25.5, 6586.0], [25.6, 6586.0], [25.7, 6588.0], [25.8, 6588.0], [25.9, 6588.0], [26.0, 6589.0], [26.1, 6589.0], [26.2, 6589.0], [26.3, 6589.0], [26.4, 6589.0], [26.5, 6589.0], [26.6, 6589.0], [26.7, 6591.0], [26.8, 6591.0], [26.9, 6591.0], [27.0, 6592.0], [27.1, 6592.0], [27.2, 6592.0], [27.3, 6592.0], [27.4, 6592.0], [27.5, 6592.0], [27.6, 6592.0], [27.7, 6595.0], [27.8, 6595.0], [27.9, 6595.0], [28.0, 6595.0], [28.1, 6595.0], [28.2, 6595.0], [28.3, 6595.0], [28.4, 6596.0], [28.5, 6596.0], [28.6, 6596.0], [28.7, 6597.0], [28.8, 6597.0], [28.9, 6597.0], [29.0, 6600.0], [29.1, 6600.0], [29.2, 6600.0], [29.3, 6600.0], [29.4, 6600.0], [29.5, 6600.0], [29.6, 6600.0], [29.7, 6712.0], [29.8, 6712.0], [29.9, 6712.0], [30.0, 6721.0], [30.1, 6721.0], [30.2, 6721.0], [30.3, 6721.0], [30.4, 6852.0], [30.5, 6852.0], [30.6, 6852.0], [30.7, 6867.0], [30.8, 6867.0], [30.9, 6867.0], [31.0, 6873.0], [31.1, 6873.0], [31.2, 6873.0], [31.3, 6873.0], [31.4, 6889.0], [31.5, 6889.0], [31.6, 6889.0], [31.7, 6898.0], [31.8, 6898.0], [31.9, 6898.0], [32.0, 6901.0], [32.1, 6901.0], [32.2, 6901.0], [32.3, 6901.0], [32.4, 6915.0], [32.5, 6915.0], [32.6, 6915.0], [32.7, 6915.0], [32.8, 6915.0], [32.9, 6915.0], [33.0, 6920.0], [33.1, 6920.0], [33.2, 6920.0], [33.3, 6920.0], [33.4, 6923.0], [33.5, 6923.0], [33.6, 6923.0], [33.7, 6924.0], [33.8, 6924.0], [33.9, 6924.0], [34.0, 6927.0], [34.1, 6927.0], [34.2, 6927.0], [34.3, 6927.0], [34.4, 6931.0], [34.5, 6931.0], [34.6, 6931.0], [34.7, 6939.0], [34.8, 6939.0], [34.9, 6939.0], [35.0, 6952.0], [35.1, 6952.0], [35.2, 6952.0], [35.3, 6952.0], [35.4, 6966.0], [35.5, 6966.0], [35.6, 6966.0], [35.7, 6966.0], [35.8, 6966.0], [35.9, 6966.0], [36.0, 6984.0], [36.1, 6984.0], [36.2, 6984.0], [36.3, 6984.0], [36.4, 6992.0], [36.5, 6992.0], [36.6, 6992.0], [36.7, 7006.0], [36.8, 7006.0], [36.9, 7006.0], [37.0, 7013.0], [37.1, 7013.0], [37.2, 7013.0], [37.3, 7013.0], [37.4, 7038.0], [37.5, 7038.0], [37.6, 7038.0], [37.7, 7040.0], [37.8, 7040.0], [37.9, 7040.0], [38.0, 7051.0], [38.1, 7051.0], [38.2, 7051.0], [38.3, 7051.0], [38.4, 7052.0], [38.5, 7052.0], [38.6, 7052.0], [38.7, 7061.0], [38.8, 7061.0], [38.9, 7061.0], [39.0, 7061.0], [39.1, 7061.0], [39.2, 7061.0], [39.3, 7061.0], [39.4, 7075.0], [39.5, 7075.0], [39.6, 7075.0], [39.7, 7100.0], [39.8, 7100.0], [39.9, 7100.0], [40.0, 7116.0], [40.1, 7116.0], [40.2, 7116.0], [40.3, 7116.0], [40.4, 7117.0], [40.5, 7117.0], [40.6, 7117.0], [40.7, 7121.0], [40.8, 7121.0], [40.9, 7121.0], [41.0, 7121.0], [41.1, 7129.0], [41.2, 7129.0], [41.3, 7129.0], [41.4, 7133.0], [41.5, 7133.0], [41.6, 7133.0], [41.7, 7137.0], [41.8, 7137.0], [41.9, 7137.0], [42.0, 7137.0], [42.1, 7151.0], [42.2, 7151.0], [42.3, 7151.0], [42.4, 7170.0], [42.5, 7170.0], [42.6, 7170.0], [42.7, 7171.0], [42.8, 7171.0], [42.9, 7171.0], [43.0, 7171.0], [43.1, 7174.0], [43.2, 7174.0], [43.3, 7174.0], [43.4, 7178.0], [43.5, 7178.0], [43.6, 7178.0], [43.7, 7182.0], [43.8, 7182.0], [43.9, 7182.0], [44.0, 7182.0], [44.1, 7188.0], [44.2, 7188.0], [44.3, 7188.0], [44.4, 7191.0], [44.5, 7191.0], [44.6, 7191.0], [44.7, 7198.0], [44.8, 7198.0], [44.9, 7198.0], [45.0, 7198.0], [45.1, 7207.0], [45.2, 7207.0], [45.3, 7207.0], [45.4, 7209.0], [45.5, 7209.0], [45.6, 7209.0], [45.7, 7214.0], [45.8, 7214.0], [45.9, 7214.0], [46.0, 7214.0], [46.1, 7221.0], [46.2, 7221.0], [46.3, 7221.0], [46.4, 7222.0], [46.5, 7222.0], [46.6, 7222.0], [46.7, 7228.0], [46.8, 7228.0], [46.9, 7228.0], [47.0, 7228.0], [47.1, 7242.0], [47.2, 7242.0], [47.3, 7242.0], [47.4, 7248.0], [47.5, 7248.0], [47.6, 7248.0], [47.7, 7317.0], [47.8, 7317.0], [47.9, 7317.0], [48.0, 7317.0], [48.1, 7325.0], [48.2, 7325.0], [48.3, 7325.0], [48.4, 7327.0], [48.5, 7327.0], [48.6, 7327.0], [48.7, 7336.0], [48.8, 7336.0], [48.9, 7336.0], [49.0, 7336.0], [49.1, 7349.0], [49.2, 7349.0], [49.3, 7349.0], [49.4, 7360.0], [49.5, 7360.0], [49.6, 7360.0], [49.7, 7367.0], [49.8, 7367.0], [49.9, 7367.0], [50.0, 7367.0], [50.1, 7370.0], [50.2, 7370.0], [50.3, 7370.0], [50.4, 7372.0], [50.5, 7372.0], [50.6, 7372.0], [50.7, 7373.0], [50.8, 7373.0], [50.9, 7373.0], [51.0, 7373.0], [51.1, 7381.0], [51.2, 7381.0], [51.3, 7381.0], [51.4, 7388.0], [51.5, 7388.0], [51.6, 7388.0], [51.7, 7393.0], [51.8, 7393.0], [51.9, 7393.0], [52.0, 7393.0], [52.1, 7408.0], [52.2, 7408.0], [52.3, 7408.0], [52.4, 7410.0], [52.5, 7410.0], [52.6, 7410.0], [52.7, 7415.0], [52.8, 7415.0], [52.9, 7415.0], [53.0, 7415.0], [53.1, 7420.0], [53.2, 7420.0], [53.3, 7420.0], [53.4, 7422.0], [53.5, 7422.0], [53.6, 7422.0], [53.7, 7428.0], [53.8, 7428.0], [53.9, 7428.0], [54.0, 7428.0], [54.1, 7437.0], [54.2, 7437.0], [54.3, 7437.0], [54.4, 7437.0], [54.5, 7437.0], [54.6, 7437.0], [54.7, 7441.0], [54.8, 7441.0], [54.9, 7441.0], [55.0, 7441.0], [55.1, 7448.0], [55.2, 7448.0], [55.3, 7448.0], [55.4, 7450.0], [55.5, 7450.0], [55.6, 7450.0], [55.7, 7452.0], [55.8, 7452.0], [55.9, 7452.0], [56.0, 7452.0], [56.1, 7459.0], [56.2, 7459.0], [56.3, 7459.0], [56.4, 7459.0], [56.5, 7459.0], [56.6, 7459.0], [56.7, 7463.0], [56.8, 7463.0], [56.9, 7463.0], [57.0, 7463.0], [57.1, 7470.0], [57.2, 7470.0], [57.3, 7470.0], [57.4, 7476.0], [57.5, 7476.0], [57.6, 7476.0], [57.7, 7477.0], [57.8, 7477.0], [57.9, 7477.0], [58.0, 7477.0], [58.1, 7484.0], [58.2, 7484.0], [58.3, 7484.0], [58.4, 7489.0], [58.5, 7489.0], [58.6, 7489.0], [58.7, 7490.0], [58.8, 7490.0], [58.9, 7490.0], [59.0, 7490.0], [59.1, 7492.0], [59.2, 7492.0], [59.3, 7492.0], [59.4, 7496.0], [59.5, 7496.0], [59.6, 7496.0], [59.7, 7498.0], [59.8, 7498.0], [59.9, 7498.0], [60.0, 7498.0], [60.1, 7499.0], [60.2, 7499.0], [60.3, 7499.0], [60.4, 7500.0], [60.5, 7500.0], [60.6, 7500.0], [60.7, 7507.0], [60.8, 7507.0], [60.9, 7507.0], [61.0, 7507.0], [61.1, 7510.0], [61.2, 7510.0], [61.3, 7510.0], [61.4, 7513.0], [61.5, 7513.0], [61.6, 7513.0], [61.7, 7515.0], [61.8, 7515.0], [61.9, 7515.0], [62.0, 7515.0], [62.1, 7521.0], [62.2, 7521.0], [62.3, 7521.0], [62.4, 7523.0], [62.5, 7523.0], [62.6, 7523.0], [62.7, 7525.0], [62.8, 7525.0], [62.9, 7525.0], [63.0, 7525.0], [63.1, 7525.0], [63.2, 7525.0], [63.3, 7525.0], [63.4, 7527.0], [63.5, 7527.0], [63.6, 7527.0], [63.7, 7529.0], [63.8, 7529.0], [63.9, 7529.0], [64.0, 7529.0], [64.1, 7536.0], [64.2, 7536.0], [64.3, 7536.0], [64.4, 7998.0], [64.5, 7998.0], [64.6, 7998.0], [64.7, 8019.0], [64.8, 8019.0], [64.9, 8019.0], [65.0, 8019.0], [65.1, 8030.0], [65.2, 8030.0], [65.3, 8030.0], [65.4, 8082.0], [65.5, 8082.0], [65.6, 8082.0], [65.7, 8095.0], [65.8, 8095.0], [65.9, 8095.0], [66.0, 8095.0], [66.1, 8111.0], [66.2, 8111.0], [66.3, 8111.0], [66.4, 8117.0], [66.5, 8117.0], [66.6, 8117.0], [66.7, 8136.0], [66.8, 8136.0], [66.9, 8136.0], [67.0, 8136.0], [67.1, 8157.0], [67.2, 8157.0], [67.3, 8157.0], [67.4, 8206.0], [67.5, 8206.0], [67.6, 8206.0], [67.7, 8242.0], [67.8, 8242.0], [67.9, 8242.0], [68.0, 8242.0], [68.1, 8255.0], [68.2, 8255.0], [68.3, 8255.0], [68.4, 8293.0], [68.5, 8293.0], [68.6, 8293.0], [68.7, 8315.0], [68.8, 8315.0], [68.9, 8315.0], [69.0, 8315.0], [69.1, 8316.0], [69.2, 8316.0], [69.3, 8316.0], [69.4, 8316.0], [69.5, 8316.0], [69.6, 8316.0], [69.7, 8336.0], [69.8, 8336.0], [69.9, 8336.0], [70.0, 8336.0], [70.1, 8349.0], [70.2, 8349.0], [70.3, 8349.0], [70.4, 8352.0], [70.5, 8352.0], [70.6, 8352.0], [70.7, 8390.0], [70.8, 8390.0], [70.9, 8390.0], [71.0, 8390.0], [71.1, 8414.0], [71.2, 8414.0], [71.3, 8414.0], [71.4, 8431.0], [71.5, 8431.0], [71.6, 8431.0], [71.7, 8445.0], [71.8, 8445.0], [71.9, 8445.0], [72.0, 8445.0], [72.1, 8472.0], [72.2, 8472.0], [72.3, 8472.0], [72.4, 8473.0], [72.5, 8473.0], [72.6, 8473.0], [72.7, 8475.0], [72.8, 8475.0], [72.9, 8475.0], [73.0, 8475.0], [73.1, 8486.0], [73.2, 8486.0], [73.3, 8486.0], [73.4, 8512.0], [73.5, 8512.0], [73.6, 8512.0], [73.7, 8514.0], [73.8, 8514.0], [73.9, 8514.0], [74.0, 8514.0], [74.1, 8539.0], [74.2, 8539.0], [74.3, 8539.0], [74.4, 8547.0], [74.5, 8547.0], [74.6, 8547.0], [74.7, 8552.0], [74.8, 8552.0], [74.9, 8552.0], [75.0, 8560.0], [75.1, 8560.0], [75.2, 8560.0], [75.3, 8560.0], [75.4, 8608.0], [75.5, 8608.0], [75.6, 8608.0], [75.7, 8609.0], [75.8, 8609.0], [75.9, 8609.0], [76.0, 8611.0], [76.1, 8611.0], [76.2, 8611.0], [76.3, 8611.0], [76.4, 8612.0], [76.5, 8612.0], [76.6, 8612.0], [76.7, 8614.0], [76.8, 8614.0], [76.9, 8614.0], [77.0, 8615.0], [77.1, 8615.0], [77.2, 8615.0], [77.3, 8615.0], [77.4, 8618.0], [77.5, 8618.0], [77.6, 8618.0], [77.7, 8620.0], [77.8, 8620.0], [77.9, 8620.0], [78.0, 8630.0], [78.1, 8630.0], [78.2, 8630.0], [78.3, 8630.0], [78.4, 8631.0], [78.5, 8631.0], [78.6, 8631.0], [78.7, 8635.0], [78.8, 8635.0], [78.9, 8635.0], [79.0, 8638.0], [79.1, 8638.0], [79.2, 8638.0], [79.3, 8638.0], [79.4, 8640.0], [79.5, 8640.0], [79.6, 8640.0], [79.7, 8641.0], [79.8, 8641.0], [79.9, 8641.0], [80.0, 8645.0], [80.1, 8645.0], [80.2, 8645.0], [80.3, 8645.0], [80.4, 8647.0], [80.5, 8647.0], [80.6, 8647.0], [80.7, 8652.0], [80.8, 8652.0], [80.9, 8652.0], [81.0, 8656.0], [81.1, 8656.0], [81.2, 8656.0], [81.3, 8656.0], [81.4, 9099.0], [81.5, 9099.0], [81.6, 9099.0], [81.7, 9576.0], [81.8, 9576.0], [81.9, 9576.0], [82.0, 9612.0], [82.1, 9612.0], [82.2, 9612.0], [82.3, 9612.0], [82.4, 9635.0], [82.5, 9635.0], [82.6, 9635.0], [82.7, 9684.0], [82.8, 9684.0], [82.9, 9684.0], [83.0, 9685.0], [83.1, 9685.0], [83.2, 9685.0], [83.3, 9685.0], [83.4, 9696.0], [83.5, 9696.0], [83.6, 9696.0], [83.7, 9711.0], [83.8, 9711.0], [83.9, 9711.0], [84.0, 9713.0], [84.1, 9713.0], [84.2, 9713.0], [84.3, 9713.0], [84.4, 9724.0], [84.5, 9724.0], [84.6, 9724.0], [84.7, 9754.0], [84.8, 9754.0], [84.9, 9754.0], [85.0, 9764.0], [85.1, 9764.0], [85.2, 9764.0], [85.3, 9764.0], [85.4, 9766.0], [85.5, 9766.0], [85.6, 9766.0], [85.7, 9775.0], [85.8, 9775.0], [85.9, 9775.0], [86.0, 9884.0], [86.1, 9884.0], [86.2, 9884.0], [86.3, 9884.0], [86.4, 9889.0], [86.5, 9889.0], [86.6, 9889.0], [86.7, 9907.0], [86.8, 9907.0], [86.9, 9907.0], [87.0, 9916.0], [87.1, 9916.0], [87.2, 9916.0], [87.3, 9916.0], [87.4, 9918.0], [87.5, 9918.0], [87.6, 9918.0], [87.7, 9933.0], [87.8, 9933.0], [87.9, 9933.0], [88.0, 9934.0], [88.1, 9934.0], [88.2, 9934.0], [88.3, 9934.0], [88.4, 9940.0], [88.5, 9940.0], [88.6, 9940.0], [88.7, 9943.0], [88.8, 9943.0], [88.9, 9943.0], [89.0, 9947.0], [89.1, 9947.0], [89.2, 9947.0], [89.3, 9947.0], [89.4, 9951.0], [89.5, 9951.0], [89.6, 9951.0], [89.7, 9979.0], [89.8, 9979.0], [89.9, 9979.0], [90.0, 9991.0], [90.1, 9991.0], [90.2, 9991.0], [90.3, 9991.0], [90.4, 9996.0], [90.5, 9996.0], [90.6, 9996.0], [90.7, 10027.0], [90.8, 10027.0], [90.9, 10027.0], [91.0, 10036.0], [91.1, 10036.0], [91.2, 10036.0], [91.3, 10036.0], [91.4, 10047.0], [91.5, 10047.0], [91.6, 10047.0], [91.7, 10054.0], [91.8, 10054.0], [91.9, 10054.0], [92.0, 10055.0], [92.1, 10055.0], [92.2, 10055.0], [92.3, 10055.0], [92.4, 10062.0], [92.5, 10062.0], [92.6, 10062.0], [92.7, 10086.0], [92.8, 10086.0], [92.9, 10086.0], [93.0, 10088.0], [93.1, 10088.0], [93.2, 10088.0], [93.3, 10088.0], [93.4, 10094.0], [93.5, 10094.0], [93.6, 10094.0], [93.7, 10104.0], [93.8, 10104.0], [93.9, 10104.0], [94.0, 10112.0], [94.1, 10112.0], [94.2, 10112.0], [94.3, 10112.0], [94.4, 10125.0], [94.5, 10125.0], [94.6, 10125.0], [94.7, 10125.0], [94.8, 10125.0], [94.9, 10125.0], [95.0, 10140.0], [95.1, 10140.0], [95.2, 10140.0], [95.3, 10140.0], [95.4, 10154.0], [95.5, 10154.0], [95.6, 10154.0], [95.7, 10154.0], [95.8, 10154.0], [95.9, 10154.0], [96.0, 10159.0], [96.1, 10159.0], [96.2, 10159.0], [96.3, 10159.0], [96.4, 10160.0], [96.5, 10160.0], [96.6, 10160.0], [96.7, 10161.0], [96.8, 10161.0], [96.9, 10161.0], [97.0, 10163.0], [97.1, 10163.0], [97.2, 10163.0], [97.3, 10163.0], [97.4, 10164.0], [97.5, 10164.0], [97.6, 10164.0], [97.7, 10167.0], [97.8, 10167.0], [97.9, 10167.0], [98.0, 10168.0], [98.1, 10168.0], [98.2, 10168.0], [98.3, 10168.0], [98.4, 10292.0], [98.5, 10292.0], [98.6, 10292.0], [98.7, 10293.0], [98.8, 10293.0], [98.9, 10293.0], [99.0, 10303.0], [99.1, 10303.0], [99.2, 10303.0], [99.3, 10303.0], [99.4, 10502.0], [99.5, 10502.0], [99.6, 10502.0], [99.7, 10566.0], [99.8, 10566.0], [99.9, 10566.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[0.0, 8417.0], [0.1, 8417.0], [0.2, 8417.0], [0.3, 8417.0], [0.4, 9743.0], [0.5, 9743.0], [0.6, 9743.0], [0.7, 12406.0], [0.8, 12406.0], [0.9, 12406.0], [1.0, 21697.0], [1.1, 21697.0], [1.2, 21697.0], [1.3, 21697.0], [1.4, 21767.0], [1.5, 21767.0], [1.6, 21767.0], [1.7, 21822.0], [1.8, 21822.0], [1.9, 21822.0], [2.0, 21929.0], [2.1, 21929.0], [2.2, 21929.0], [2.3, 21929.0], [2.4, 21936.0], [2.5, 21936.0], [2.6, 21936.0], [2.7, 21982.0], [2.8, 21982.0], [2.9, 21982.0], [3.0, 22146.0], [3.1, 22146.0], [3.2, 22146.0], [3.3, 22146.0], [3.4, 22239.0], [3.5, 22239.0], [3.6, 22239.0], [3.7, 22240.0], [3.8, 22240.0], [3.9, 22240.0], [4.0, 22245.0], [4.1, 22245.0], [4.2, 22245.0], [4.3, 22245.0], [4.4, 23658.0], [4.5, 23658.0], [4.6, 23658.0], [4.7, 24235.0], [4.8, 24235.0], [4.9, 24235.0], [5.0, 27770.0], [5.1, 27770.0], [5.2, 27770.0], [5.3, 27770.0], [5.4, 27873.0], [5.5, 27873.0], [5.6, 27873.0], [5.7, 28050.0], [5.8, 28050.0], [5.9, 28050.0], [6.0, 28081.0], [6.1, 28081.0], [6.2, 28081.0], [6.3, 28081.0], [6.4, 28180.0], [6.5, 28180.0], [6.6, 28180.0], [6.7, 28193.0], [6.8, 28193.0], [6.9, 28193.0], [7.0, 28414.0], [7.1, 28414.0], [7.2, 28414.0], [7.3, 28414.0], [7.4, 28680.0], [7.5, 28680.0], [7.6, 28680.0], [7.7, 28705.0], [7.8, 28705.0], [7.9, 28705.0], [8.0, 31869.0], [8.1, 31869.0], [8.2, 31869.0], [8.3, 31869.0], [8.4, 36453.0], [8.5, 36453.0], [8.6, 36453.0], [8.7, 37041.0], [8.8, 37041.0], [8.9, 37041.0], [9.0, 38052.0], [9.1, 38052.0], [9.2, 38052.0], [9.3, 38052.0], [9.4, 38371.0], [9.5, 38371.0], [9.6, 38371.0], [9.7, 38588.0], [9.8, 38588.0], [9.9, 38588.0], [10.0, 39766.0], [10.1, 39766.0], [10.2, 39766.0], [10.3, 39766.0], [10.4, 42845.0], [10.5, 42845.0], [10.6, 42845.0], [10.7, 44810.0], [10.8, 44810.0], [10.9, 44810.0], [11.0, 44810.0], [11.1, 45005.0], [11.2, 45005.0], [11.3, 45005.0], [11.4, 45079.0], [11.5, 45079.0], [11.6, 45079.0], [11.7, 45906.0], [11.8, 45906.0], [11.9, 45906.0], [12.0, 45906.0], [12.1, 45947.0], [12.2, 45947.0], [12.3, 45947.0], [12.4, 46077.0], [12.5, 46077.0], [12.6, 46077.0], [12.7, 46549.0], [12.8, 46549.0], [12.9, 46549.0], [13.0, 46549.0], [13.1, 47874.0], [13.2, 47874.0], [13.3, 47874.0], [13.4, 47886.0], [13.5, 47886.0], [13.6, 47886.0], [13.7, 47918.0], [13.8, 47918.0], [13.9, 47918.0], [14.0, 47918.0], [14.1, 48136.0], [14.2, 48136.0], [14.3, 48136.0], [14.4, 48342.0], [14.5, 48342.0], [14.6, 48342.0], [14.7, 48412.0], [14.8, 48412.0], [14.9, 48412.0], [15.0, 48412.0], [15.1, 48434.0], [15.2, 48434.0], [15.3, 48434.0], [15.4, 48596.0], [15.5, 48596.0], [15.6, 48596.0], [15.7, 48598.0], [15.8, 48598.0], [15.9, 48598.0], [16.0, 48598.0], [16.1, 48752.0], [16.2, 48752.0], [16.3, 48752.0], [16.4, 48761.0], [16.5, 48761.0], [16.6, 48761.0], [16.7, 48832.0], [16.8, 48832.0], [16.9, 48832.0], [17.0, 48832.0], [17.1, 48975.0], [17.2, 48975.0], [17.3, 48975.0], [17.4, 49084.0], [17.5, 49084.0], [17.6, 49084.0], [17.7, 49232.0], [17.8, 49232.0], [17.9, 49232.0], [18.0, 49232.0], [18.1, 49242.0], [18.2, 49242.0], [18.3, 49242.0], [18.4, 49320.0], [18.5, 49320.0], [18.6, 49320.0], [18.7, 49384.0], [18.8, 49384.0], [18.9, 49384.0], [19.0, 49389.0], [19.1, 49389.0], [19.2, 49389.0], [19.3, 49389.0], [19.4, 49411.0], [19.5, 49411.0], [19.6, 49411.0], [19.7, 49446.0], [19.8, 49446.0], [19.9, 49446.0], [20.0, 49534.0], [20.1, 49534.0], [20.2, 49534.0], [20.3, 49534.0], [20.4, 49568.0], [20.5, 49568.0], [20.6, 49568.0], [20.7, 49601.0], [20.8, 49601.0], [20.9, 49601.0], [21.0, 49606.0], [21.1, 49606.0], [21.2, 49606.0], [21.3, 49606.0], [21.4, 49652.0], [21.5, 49652.0], [21.6, 49652.0], [21.7, 49659.0], [21.8, 49659.0], [21.9, 49659.0], [22.0, 49771.0], [22.1, 49771.0], [22.2, 49771.0], [22.3, 49771.0], [22.4, 49870.0], [22.5, 49870.0], [22.6, 49870.0], [22.7, 49871.0], [22.8, 49871.0], [22.9, 49871.0], [23.0, 49889.0], [23.1, 49889.0], [23.2, 49889.0], [23.3, 49889.0], [23.4, 50018.0], [23.5, 50018.0], [23.6, 50018.0], [23.7, 50534.0], [23.8, 50534.0], [23.9, 50534.0], [24.0, 51233.0], [24.1, 51233.0], [24.2, 51233.0], [24.3, 51233.0], [24.4, 51860.0], [24.5, 51860.0], [24.6, 51860.0], [24.7, 53422.0], [24.8, 53422.0], [24.9, 53422.0], [25.0, 54245.0], [25.1, 54245.0], [25.2, 54245.0], [25.3, 54245.0], [25.4, 54769.0], [25.5, 54769.0], [25.6, 54769.0], [25.7, 55011.0], [25.8, 55011.0], [25.9, 55011.0], [26.0, 55052.0], [26.1, 55052.0], [26.2, 55052.0], [26.3, 55052.0], [26.4, 55077.0], [26.5, 55077.0], [26.6, 55077.0], [26.7, 55099.0], [26.8, 55099.0], [26.9, 55099.0], [27.0, 55228.0], [27.1, 55228.0], [27.2, 55228.0], [27.3, 55228.0], [27.4, 55280.0], [27.5, 55280.0], [27.6, 55280.0], [27.7, 55387.0], [27.8, 55387.0], [27.9, 55387.0], [28.0, 55458.0], [28.1, 55458.0], [28.2, 55458.0], [28.3, 55458.0], [28.4, 55558.0], [28.5, 55558.0], [28.6, 55558.0], [28.7, 55680.0], [28.8, 55680.0], [28.9, 55680.0], [29.0, 55762.0], [29.1, 55762.0], [29.2, 55762.0], [29.3, 55762.0], [29.4, 55763.0], [29.5, 55763.0], [29.6, 55763.0], [29.7, 55903.0], [29.8, 55903.0], [29.9, 55903.0], [30.0, 55934.0], [30.1, 55934.0], [30.2, 55934.0], [30.3, 55934.0], [30.4, 55935.0], [30.5, 55935.0], [30.6, 55935.0], [30.7, 55958.0], [30.8, 55958.0], [30.9, 55958.0], [31.0, 55971.0], [31.1, 55971.0], [31.2, 55971.0], [31.3, 55971.0], [31.4, 55995.0], [31.5, 55995.0], [31.6, 55995.0], [31.7, 57617.0], [31.8, 57617.0], [31.9, 57617.0], [32.0, 57950.0], [32.1, 57950.0], [32.2, 57950.0], [32.3, 57950.0], [32.4, 58105.0], [32.5, 58105.0], [32.6, 58105.0], [32.7, 58183.0], [32.8, 58183.0], [32.9, 58183.0], [33.0, 58333.0], [33.1, 58333.0], [33.2, 58333.0], [33.3, 58333.0], [33.4, 58384.0], [33.5, 58384.0], [33.6, 58384.0], [33.7, 58419.0], [33.8, 58419.0], [33.9, 58419.0], [34.0, 60010.0], [34.1, 60010.0], [34.2, 60010.0], [34.3, 60010.0], [34.4, 60012.0], [34.5, 60012.0], [34.6, 60012.0], [34.7, 60021.0], [34.8, 60021.0], [34.9, 60021.0], [35.0, 60028.0], [35.1, 60028.0], [35.2, 60028.0], [35.3, 60028.0], [35.4, 60029.0], [35.5, 60029.0], [35.6, 60029.0], [35.7, 60029.0], [35.8, 60029.0], [35.9, 60029.0], [36.0, 60029.0], [36.1, 60029.0], [36.2, 60029.0], [36.3, 60029.0], [36.4, 60033.0], [36.5, 60033.0], [36.6, 60033.0], [36.7, 60034.0], [36.8, 60034.0], [36.9, 60034.0], [37.0, 60039.0], [37.1, 60039.0], [37.2, 60039.0], [37.3, 60039.0], [37.4, 60040.0], [37.5, 60040.0], [37.6, 60040.0], [37.7, 60040.0], [37.8, 60040.0], [37.9, 60040.0], [38.0, 60043.0], [38.1, 60043.0], [38.2, 60043.0], [38.3, 60043.0], [38.4, 60044.0], [38.5, 60044.0], [38.6, 60044.0], [38.7, 60045.0], [38.8, 60045.0], [38.9, 60045.0], [39.0, 60045.0], [39.1, 60045.0], [39.2, 60045.0], [39.3, 60045.0], [39.4, 60046.0], [39.5, 60046.0], [39.6, 60046.0], [39.7, 60048.0], [39.8, 60048.0], [39.9, 60048.0], [40.0, 60048.0], [40.1, 60048.0], [40.2, 60048.0], [40.3, 60048.0], [40.4, 60049.0], [40.5, 60049.0], [40.6, 60049.0], [40.7, 60051.0], [40.8, 60051.0], [40.9, 60051.0], [41.0, 60051.0], [41.1, 60051.0], [41.2, 60051.0], [41.3, 60051.0], [41.4, 60053.0], [41.5, 60053.0], [41.6, 60053.0], [41.7, 60061.0], [41.8, 60061.0], [41.9, 60061.0], [42.0, 60063.0], [42.1, 60063.0], [42.2, 60063.0], [42.3, 60063.0], [42.4, 60065.0], [42.5, 60065.0], [42.6, 60065.0], [42.7, 60070.0], [42.8, 60070.0], [42.9, 60070.0], [43.0, 60071.0], [43.1, 60071.0], [43.2, 60071.0], [43.3, 60071.0], [43.4, 60071.0], [43.5, 60071.0], [43.6, 60071.0], [43.7, 60072.0], [43.8, 60072.0], [43.9, 60072.0], [44.0, 60073.0], [44.1, 60073.0], [44.2, 60073.0], [44.3, 60073.0], [44.4, 60074.0], [44.5, 60074.0], [44.6, 60074.0], [44.7, 60075.0], [44.8, 60075.0], [44.9, 60075.0], [45.0, 60076.0], [45.1, 60076.0], [45.2, 60076.0], [45.3, 60076.0], [45.4, 60078.0], [45.5, 60078.0], [45.6, 60078.0], [45.7, 60080.0], [45.8, 60080.0], [45.9, 60080.0], [46.0, 60080.0], [46.1, 60085.0], [46.2, 60085.0], [46.3, 60085.0], [46.4, 60227.0], [46.5, 60227.0], [46.6, 60227.0], [46.7, 60248.0], [46.8, 60248.0], [46.9, 60248.0], [47.0, 60248.0], [47.1, 60253.0], [47.2, 60253.0], [47.3, 60253.0], [47.4, 60306.0], [47.5, 60306.0], [47.6, 60306.0], [47.7, 62025.0], [47.8, 62025.0], [47.9, 62025.0], [48.0, 62025.0], [48.1, 62138.0], [48.2, 62138.0], [48.3, 62138.0], [48.4, 62200.0], [48.5, 62200.0], [48.6, 62200.0], [48.7, 62788.0], [48.8, 62788.0], [48.9, 62788.0], [49.0, 62788.0], [49.1, 62807.0], [49.2, 62807.0], [49.3, 62807.0], [49.4, 62829.0], [49.5, 62829.0], [49.6, 62829.0], [49.7, 63010.0], [49.8, 63010.0], [49.9, 63010.0], [50.0, 63010.0], [50.1, 63047.0], [50.2, 63047.0], [50.3, 63047.0], [50.4, 63108.0], [50.5, 63108.0], [50.6, 63108.0], [50.7, 63139.0], [50.8, 63139.0], [50.9, 63139.0], [51.0, 63139.0], [51.1, 63217.0], [51.2, 63217.0], [51.3, 63217.0], [51.4, 63398.0], [51.5, 63398.0], [51.6, 63398.0], [51.7, 63499.0], [51.8, 63499.0], [51.9, 63499.0], [52.0, 63499.0], [52.1, 63596.0], [52.2, 63596.0], [52.3, 63596.0], [52.4, 63599.0], [52.5, 63599.0], [52.6, 63599.0], [52.7, 63789.0], [52.8, 63789.0], [52.9, 63789.0], [53.0, 63789.0], [53.1, 63840.0], [53.2, 63840.0], [53.3, 63840.0], [53.4, 63868.0], [53.5, 63868.0], [53.6, 63868.0], [53.7, 64039.0], [53.8, 64039.0], [53.9, 64039.0], [54.0, 64039.0], [54.1, 64123.0], [54.2, 64123.0], [54.3, 64123.0], [54.4, 64214.0], [54.5, 64214.0], [54.6, 64214.0], [54.7, 64308.0], [54.8, 64308.0], [54.9, 64308.0], [55.0, 64308.0], [55.1, 64356.0], [55.2, 64356.0], [55.3, 64356.0], [55.4, 64431.0], [55.5, 64431.0], [55.6, 64431.0], [55.7, 64477.0], [55.8, 64477.0], [55.9, 64477.0], [56.0, 64477.0], [56.1, 64514.0], [56.2, 64514.0], [56.3, 64514.0], [56.4, 64552.0], [56.5, 64552.0], [56.6, 64552.0], [56.7, 64559.0], [56.8, 64559.0], [56.9, 64559.0], [57.0, 64559.0], [57.1, 64604.0], [57.2, 64604.0], [57.3, 64604.0], [57.4, 64652.0], [57.5, 64652.0], [57.6, 64652.0], [57.7, 65546.0], [57.8, 65546.0], [57.9, 65546.0], [58.0, 65546.0], [58.1, 65819.0], [58.2, 65819.0], [58.3, 65819.0], [58.4, 65970.0], [58.5, 65970.0], [58.6, 65970.0], [58.7, 66571.0], [58.8, 66571.0], [58.9, 66571.0], [59.0, 66571.0], [59.1, 66823.0], [59.2, 66823.0], [59.3, 66823.0], [59.4, 66850.0], [59.5, 66850.0], [59.6, 66850.0], [59.7, 66873.0], [59.8, 66873.0], [59.9, 66873.0], [60.0, 66873.0], [60.1, 66950.0], [60.2, 66950.0], [60.3, 66950.0], [60.4, 67028.0], [60.5, 67028.0], [60.6, 67028.0], [60.7, 67077.0], [60.8, 67077.0], [60.9, 67077.0], [61.0, 67077.0], [61.1, 67079.0], [61.2, 67079.0], [61.3, 67079.0], [61.4, 67180.0], [61.5, 67180.0], [61.6, 67180.0], [61.7, 67213.0], [61.8, 67213.0], [61.9, 67213.0], [62.0, 67213.0], [62.1, 67809.0], [62.2, 67809.0], [62.3, 67809.0], [62.4, 67990.0], [62.5, 67990.0], [62.6, 67990.0], [62.7, 68197.0], [62.8, 68197.0], [62.9, 68197.0], [63.0, 68197.0], [63.1, 68309.0], [63.2, 68309.0], [63.3, 68309.0], [63.4, 68586.0], [63.5, 68586.0], [63.6, 68586.0], [63.7, 68618.0], [63.8, 68618.0], [63.9, 68618.0], [64.0, 68618.0], [64.1, 68624.0], [64.2, 68624.0], [64.3, 68624.0], [64.4, 68792.0], [64.5, 68792.0], [64.6, 68792.0], [64.7, 68793.0], [64.8, 68793.0], [64.9, 68793.0], [65.0, 68793.0], [65.1, 68797.0], [65.2, 68797.0], [65.3, 68797.0], [65.4, 68922.0], [65.5, 68922.0], [65.6, 68922.0], [65.7, 68926.0], [65.8, 68926.0], [65.9, 68926.0], [66.0, 68926.0], [66.1, 69089.0], [66.2, 69089.0], [66.3, 69089.0], [66.4, 69301.0], [66.5, 69301.0], [66.6, 69301.0], [66.7, 69316.0], [66.8, 69316.0], [66.9, 69316.0], [67.0, 69316.0], [67.1, 69363.0], [67.2, 69363.0], [67.3, 69363.0], [67.4, 69369.0], [67.5, 69369.0], [67.6, 69369.0], [67.7, 69391.0], [67.8, 69391.0], [67.9, 69391.0], [68.0, 69391.0], [68.1, 69422.0], [68.2, 69422.0], [68.3, 69422.0], [68.4, 69498.0], [68.5, 69498.0], [68.6, 69498.0], [68.7, 69679.0], [68.8, 69679.0], [68.9, 69679.0], [69.0, 69679.0], [69.1, 69767.0], [69.2, 69767.0], [69.3, 69767.0], [69.4, 69810.0], [69.5, 69810.0], [69.6, 69810.0], [69.7, 69828.0], [69.8, 69828.0], [69.9, 69828.0], [70.0, 69828.0], [70.1, 69833.0], [70.2, 69833.0], [70.3, 69833.0], [70.4, 69842.0], [70.5, 69842.0], [70.6, 69842.0], [70.7, 69854.0], [70.8, 69854.0], [70.9, 69854.0], [71.0, 69854.0], [71.1, 69918.0], [71.2, 69918.0], [71.3, 69918.0], [71.4, 69922.0], [71.5, 69922.0], [71.6, 69922.0], [71.7, 69943.0], [71.8, 69943.0], [71.9, 69943.0], [72.0, 69943.0], [72.1, 69996.0], [72.2, 69996.0], [72.3, 69996.0], [72.4, 70050.0], [72.5, 70050.0], [72.6, 70050.0], [72.7, 70054.0], [72.8, 70054.0], [72.9, 70054.0], [73.0, 70055.0], [73.1, 70055.0], [73.2, 70055.0], [73.3, 70055.0], [73.4, 70068.0], [73.5, 70068.0], [73.6, 70068.0], [73.7, 70104.0], [73.8, 70104.0], [73.9, 70104.0], [74.0, 70106.0], [74.1, 70106.0], [74.2, 70106.0], [74.3, 70106.0], [74.4, 70188.0], [74.5, 70188.0], [74.6, 70188.0], [74.7, 70216.0], [74.8, 70216.0], [74.9, 70216.0], [75.0, 70231.0], [75.1, 70231.0], [75.2, 70231.0], [75.3, 70231.0], [75.4, 70265.0], [75.5, 70265.0], [75.6, 70265.0], [75.7, 70373.0], [75.8, 70373.0], [75.9, 70373.0], [76.0, 70383.0], [76.1, 70383.0], [76.2, 70383.0], [76.3, 70383.0], [76.4, 70389.0], [76.5, 70389.0], [76.6, 70389.0], [76.7, 70399.0], [76.8, 70399.0], [76.9, 70399.0], [77.0, 70401.0], [77.1, 70401.0], [77.2, 70401.0], [77.3, 70401.0], [77.4, 70407.0], [77.5, 70407.0], [77.6, 70407.0], [77.7, 70410.0], [77.8, 70410.0], [77.9, 70410.0], [78.0, 70410.0], [78.1, 70410.0], [78.2, 70410.0], [78.3, 70410.0], [78.4, 70425.0], [78.5, 70425.0], [78.6, 70425.0], [78.7, 70429.0], [78.8, 70429.0], [78.9, 70429.0], [79.0, 70446.0], [79.1, 70446.0], [79.2, 70446.0], [79.3, 70446.0], [79.4, 70467.0], [79.5, 70467.0], [79.6, 70467.0], [79.7, 70473.0], [79.8, 70473.0], [79.9, 70473.0], [80.0, 70483.0], [80.1, 70483.0], [80.2, 70483.0], [80.3, 70483.0], [80.4, 70495.0], [80.5, 70495.0], [80.6, 70495.0], [80.7, 70501.0], [80.8, 70501.0], [80.9, 70501.0], [81.0, 70503.0], [81.1, 70503.0], [81.2, 70503.0], [81.3, 70503.0], [81.4, 70504.0], [81.5, 70504.0], [81.6, 70504.0], [81.7, 70520.0], [81.8, 70520.0], [81.9, 70520.0], [82.0, 70554.0], [82.1, 70554.0], [82.2, 70554.0], [82.3, 70554.0], [82.4, 70559.0], [82.5, 70559.0], [82.6, 70559.0], [82.7, 70576.0], [82.8, 70576.0], [82.9, 70576.0], [83.0, 70579.0], [83.1, 70579.0], [83.2, 70579.0], [83.3, 70579.0], [83.4, 70593.0], [83.5, 70593.0], [83.6, 70593.0], [83.7, 70621.0], [83.8, 70621.0], [83.9, 70621.0], [84.0, 70645.0], [84.1, 70645.0], [84.2, 70645.0], [84.3, 70645.0], [84.4, 70660.0], [84.5, 70660.0], [84.6, 70660.0], [84.7, 70660.0], [84.8, 70660.0], [84.9, 70660.0], [85.0, 70661.0], [85.1, 70661.0], [85.2, 70661.0], [85.3, 70661.0], [85.4, 70662.0], [85.5, 70662.0], [85.6, 70662.0], [85.7, 70674.0], [85.8, 70674.0], [85.9, 70674.0], [86.0, 70701.0], [86.1, 70701.0], [86.2, 70701.0], [86.3, 70701.0], [86.4, 70761.0], [86.5, 70761.0], [86.6, 70761.0], [86.7, 70765.0], [86.8, 70765.0], [86.9, 70765.0], [87.0, 70768.0], [87.1, 70768.0], [87.2, 70768.0], [87.3, 70768.0], [87.4, 70802.0], [87.5, 70802.0], [87.6, 70802.0], [87.7, 70836.0], [87.8, 70836.0], [87.9, 70836.0], [88.0, 70849.0], [88.1, 70849.0], [88.2, 70849.0], [88.3, 70849.0], [88.4, 70872.0], [88.5, 70872.0], [88.6, 70872.0], [88.7, 70886.0], [88.8, 70886.0], [88.9, 70886.0], [89.0, 70891.0], [89.1, 70891.0], [89.2, 70891.0], [89.3, 70891.0], [89.4, 70899.0], [89.5, 70899.0], [89.6, 70899.0], [89.7, 70908.0], [89.8, 70908.0], [89.9, 70908.0], [90.0, 70913.0], [90.1, 70913.0], [90.2, 70913.0], [90.3, 70913.0], [90.4, 70930.0], [90.5, 70930.0], [90.6, 70930.0], [90.7, 70939.0], [90.8, 70939.0], [90.9, 70939.0], [91.0, 70957.0], [91.1, 70957.0], [91.2, 70957.0], [91.3, 70957.0], [91.4, 70957.0], [91.5, 70957.0], [91.6, 70957.0], [91.7, 71011.0], [91.8, 71011.0], [91.9, 71011.0], [92.0, 71020.0], [92.1, 71020.0], [92.2, 71020.0], [92.3, 71020.0], [92.4, 71024.0], [92.5, 71024.0], [92.6, 71024.0], [92.7, 71033.0], [92.8, 71033.0], [92.9, 71033.0], [93.0, 71035.0], [93.1, 71035.0], [93.2, 71035.0], [93.3, 71035.0], [93.4, 71041.0], [93.5, 71041.0], [93.6, 71041.0], [93.7, 71059.0], [93.8, 71059.0], [93.9, 71059.0], [94.0, 71066.0], [94.1, 71066.0], [94.2, 71066.0], [94.3, 71066.0], [94.4, 71070.0], [94.5, 71070.0], [94.6, 71070.0], [94.7, 71116.0], [94.8, 71116.0], [94.9, 71116.0], [95.0, 71352.0], [95.1, 71352.0], [95.2, 71352.0], [95.3, 71352.0], [95.4, 71462.0], [95.5, 71462.0], [95.6, 71462.0], [95.7, 71482.0], [95.8, 71482.0], [95.9, 71482.0], [96.0, 71919.0], [96.1, 71919.0], [96.2, 71919.0], [96.3, 71919.0], [96.4, 71923.0], [96.5, 71923.0], [96.6, 71923.0], [96.7, 73592.0], [96.8, 73592.0], [96.9, 73592.0], [97.0, 73610.0], [97.1, 73610.0], [97.2, 73610.0], [97.3, 73610.0], [97.4, 73628.0], [97.5, 73628.0], [97.6, 73628.0], [97.7, 73640.0], [97.8, 73640.0], [97.9, 73640.0], [98.0, 73655.0], [98.1, 73655.0], [98.2, 73655.0], [98.3, 73655.0], [98.4, 73679.0], [98.5, 73679.0], [98.6, 73679.0], [98.7, 73695.0], [98.8, 73695.0], [98.9, 73695.0], [99.0, 73706.0], [99.1, 73706.0], [99.2, 73706.0], [99.3, 73706.0], [99.4, 73723.0], [99.5, 73723.0], [99.6, 73723.0], [99.7, 73749.0], [99.8, 73749.0], [99.9, 73749.0]], "isOverall": false, "label": "Student Attendance SchoolWise", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 900.0, "maxY": 37.0, "series": [{"data": [[900.0, 1.0], [1100.0, 1.0], [2000.0, 2.0], [2400.0, 2.0], [3100.0, 1.0], [3200.0, 1.0], [3300.0, 2.0], [3400.0, 6.0], [3500.0, 3.0], [3700.0, 3.0], [3600.0, 3.0], [3800.0, 3.0], [3900.0, 4.0], [4000.0, 4.0], [4100.0, 7.0], [4200.0, 4.0], [4300.0, 2.0], [4500.0, 3.0], [4400.0, 4.0], [4600.0, 6.0], [4800.0, 1.0], [4700.0, 5.0], [4900.0, 3.0], [5100.0, 2.0], [5700.0, 1.0], [6500.0, 13.0], [6600.0, 2.0], [6900.0, 14.0], [6800.0, 5.0], [6700.0, 2.0], [7100.0, 16.0], [7000.0, 9.0], [7400.0, 25.0], [7200.0, 8.0], [7300.0, 13.0], [7500.0, 12.0], [7900.0, 1.0], [8000.0, 4.0], [8100.0, 4.0], [8500.0, 6.0], [8600.0, 18.0], [8400.0, 7.0], [8300.0, 7.0], [8200.0, 4.0], [9000.0, 1.0], [9700.0, 7.0], [9600.0, 5.0], [9500.0, 1.0], [9900.0, 12.0], [10100.0, 14.0], [10000.0, 9.0], [9800.0, 2.0], [10200.0, 2.0], [10300.0, 1.0], [10500.0, 2.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[65900.0, 1.0], [67100.0, 1.0], [67900.0, 1.0], [68700.0, 3.0], [68300.0, 1.0], [70700.0, 4.0], [69900.0, 4.0], [70300.0, 4.0], [71100.0, 1.0], [71900.0, 2.0], [73500.0, 1.0], [38300.0, 1.0], [38500.0, 1.0], [39700.0, 1.0], [45900.0, 2.0], [46500.0, 1.0], [48700.0, 2.0], [48100.0, 1.0], [47900.0, 1.0], [48500.0, 2.0], [48300.0, 1.0], [48900.0, 1.0], [49300.0, 3.0], [49700.0, 1.0], [49500.0, 2.0], [50500.0, 1.0], [54700.0, 1.0], [55300.0, 1.0], [55500.0, 1.0], [55700.0, 2.0], [55900.0, 6.0], [57900.0, 1.0], [58100.0, 2.0], [58300.0, 2.0], [60300.0, 1.0], [63100.0, 2.0], [62100.0, 1.0], [62700.0, 1.0], [63300.0, 1.0], [64300.0, 2.0], [63500.0, 2.0], [63700.0, 1.0], [65500.0, 1.0], [64100.0, 1.0], [64500.0, 3.0], [65800.0, 1.0], [67000.0, 3.0], [67800.0, 1.0], [69000.0, 1.0], [69400.0, 2.0], [68600.0, 2.0], [69800.0, 5.0], [70200.0, 3.0], [70600.0, 7.0], [71000.0, 9.0], [71400.0, 2.0], [66500.0, 1.0], [66900.0, 1.0], [68100.0, 1.0], [68500.0, 1.0], [68900.0, 2.0], [69300.0, 5.0], [70100.0, 3.0], [70500.0, 9.0], [70900.0, 6.0], [69700.0, 1.0], [71300.0, 1.0], [73700.0, 3.0], [8400.0, 1.0], [9700.0, 1.0], [12400.0, 1.0], [21600.0, 1.0], [21700.0, 1.0], [21800.0, 1.0], [21900.0, 3.0], [22100.0, 1.0], [22200.0, 3.0], [23600.0, 1.0], [24200.0, 1.0], [27800.0, 1.0], [28000.0, 2.0], [27700.0, 1.0], [28100.0, 2.0], [28400.0, 1.0], [28600.0, 1.0], [28700.0, 1.0], [31800.0, 1.0], [36400.0, 1.0], [37000.0, 1.0], [38000.0, 1.0], [42800.0, 1.0], [44800.0, 1.0], [45000.0, 2.0], [46000.0, 1.0], [47800.0, 2.0], [48400.0, 2.0], [49000.0, 1.0], [48800.0, 1.0], [49400.0, 2.0], [49200.0, 2.0], [49600.0, 4.0], [49800.0, 3.0], [50000.0, 1.0], [51200.0, 1.0], [51800.0, 1.0], [53400.0, 1.0], [54200.0, 1.0], [55000.0, 4.0], [55200.0, 2.0], [55400.0, 1.0], [55600.0, 1.0], [57600.0, 1.0], [58400.0, 1.0], [60000.0, 37.0], [60200.0, 3.0], [62000.0, 1.0], [62200.0, 1.0], [63000.0, 2.0], [62800.0, 2.0], [63200.0, 1.0], [63400.0, 1.0], [63800.0, 2.0], [64600.0, 2.0], [64000.0, 1.0], [64200.0, 1.0], [64400.0, 2.0], [66800.0, 3.0], [67200.0, 1.0], [69600.0, 1.0], [70400.0, 11.0], [70800.0, 7.0], [70000.0, 4.0], [73600.0, 6.0]], "isOverall": false, "label": "Student Attendance SchoolWise", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 73700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 558.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 558.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 40.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 138.1745454545453, "minX": 1.59475512E12, "maxY": 299.07692307692326, "series": [{"data": [[1.59475512E12, 299.07692307692326], [1.59475518E12, 138.1745454545453]], "isOverall": false, "label": "Student Attendance Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59475518E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 7119.083333333332, "minX": 1.0, "maxY": 73749.0, "series": [{"data": [[300.0, 7119.083333333332]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[300.0, 7119.083333333332]], "isOverall": false, "label": "Login-Aggregated", "isController": false}, {"data": [[2.0, 73749.0], [3.0, 70674.0], [4.0, 70939.0], [5.0, 71033.0], [6.0, 71066.0], [7.0, 71059.0], [8.0, 73723.0], [9.0, 71041.0], [10.0, 73695.0], [11.0, 73679.0], [12.0, 70899.0], [13.0, 71020.0], [15.0, 72345.0], [16.0, 73706.0], [17.0, 71011.0], [18.0, 73640.0], [19.0, 70872.0], [20.0, 70957.0], [21.0, 70849.0], [22.0, 73628.0], [23.0, 70576.0], [24.0, 73610.0], [25.0, 70957.0], [26.0, 70836.0], [27.0, 70559.0], [28.0, 73592.0], [29.0, 70483.0], [30.0, 70891.0], [31.0, 70473.0], [33.0, 70761.0], [32.0, 70802.0], [35.0, 70660.0], [34.0, 70768.0], [37.0, 70660.0], [36.0, 70661.0], [39.0, 70621.0], [38.0, 70645.0], [41.0, 70579.0], [40.0, 70593.0], [43.0, 70504.0], [42.0, 70554.0], [45.0, 70495.0], [44.0, 70503.0], [47.0, 70467.0], [46.0, 70501.0], [49.0, 70425.0], [48.0, 70429.0], [51.0, 70410.0], [50.0, 70407.0], [53.0, 70410.0], [52.0, 71923.0], [55.0, 71919.0], [54.0, 70399.0], [57.0, 70401.0], [56.0, 70383.0], [59.0, 70216.0], [58.0, 70373.0], [61.0, 70068.0], [60.0, 70188.0], [63.0, 70054.5], [67.0, 69854.0], [66.0, 71462.0], [65.0, 71482.0], [64.0, 70050.0], [71.0, 69767.0], [70.0, 69810.0], [69.0, 71352.0], [68.0, 69842.0], [75.0, 69422.0], [74.0, 71024.0], [73.0, 71116.0], [72.0, 69679.0], [79.0, 70910.5], [76.0, 70930.0], [83.0, 70765.0], [82.0, 70886.0], [81.0, 69363.0], [80.0, 69380.0], [87.0, 70265.0], [86.0, 70389.0], [85.0, 70520.0], [84.0, 70662.0], [91.0, 70106.0], [90.0, 68624.0], [89.0, 68618.0], [88.0, 70231.0], [95.0, 69922.0], [94.0, 69943.0], [93.0, 69996.0], [92.0, 70104.0], [99.0, 70701.0], [98.0, 69828.0], [97.0, 68309.0], [96.0, 69918.0], [103.0, 69301.0], [102.0, 69316.0], [101.0, 70446.0], [100.0, 69498.0], [107.0, 69833.0], [106.0, 68793.0], [105.0, 68797.0], [104.0, 68792.0], [111.0, 68922.0], [110.0, 67809.0], [109.0, 69089.0], [108.0, 67990.0], [115.0, 67028.0], [114.0, 68197.0], [113.0, 68586.0], [112.0, 68926.0], [119.0, 65970.0], [118.0, 67077.0], [117.0, 67180.0], [116.0, 67213.0], [123.0, 66873.0], [122.0, 65819.0], [121.0, 66950.0], [120.0, 67079.0], [127.0, 66571.0], [126.0, 65546.0], [125.0, 66823.0], [124.0, 66850.0], [135.0, 64356.0], [134.0, 64431.0], [133.0, 64477.0], [132.0, 64514.0], [131.0, 64559.0], [130.0, 64552.0], [129.0, 64604.0], [128.0, 64652.0], [143.0, 63840.0], [142.0, 63868.0], [141.0, 64039.0], [140.0, 64123.0], [139.0, 63010.0], [138.0, 63047.0], [137.0, 64214.0], [136.0, 64308.0], [151.0, 63108.0], [150.0, 63139.0], [149.0, 63217.0], [148.0, 63398.0], [147.0, 63499.0], [146.0, 63599.0], [145.0, 63596.0], [144.0, 63789.0], [157.0, 60080.0], [156.0, 62807.0], [155.0, 62788.0], [154.0, 62829.0], [153.0, 60250.5], [167.0, 60051.0], [166.0, 60051.0], [165.0, 60078.0], [163.0, 60072.0], [162.0, 60074.5], [161.0, 60073.0], [174.0, 60042.5], [172.0, 60227.0], [171.0, 62025.0], [170.0, 62138.0], [169.0, 62200.0], [168.0, 60065.0], [183.0, 60029.0], [182.0, 60037.333333333336], [179.0, 60044.0], [178.0, 60061.0], [177.0, 60045.0], [191.0, 60053.5], [189.0, 60049.0], [187.0, 60048.0], [186.0, 60306.0], [185.0, 60010.0], [184.0, 60012.0], [199.0, 58419.0], [198.0, 60048.5], [197.0, 60030.5], [194.0, 60048.0], [207.0, 55935.0], [206.0, 55958.0], [205.0, 55971.0], [204.0, 55995.0], [203.0, 58105.0], [202.0, 58183.0], [201.0, 58384.0], [200.0, 58333.0], [215.0, 57617.0], [214.0, 55458.0], [213.0, 55558.0], [212.0, 55680.0], [211.0, 55762.0], [210.0, 55763.0], [209.0, 55903.0], [208.0, 55934.0], [223.0, 54769.0], [222.0, 57950.0], [221.0, 55011.0], [220.0, 55052.0], [219.0, 55077.0], [218.0, 55099.0], [217.0, 55228.0], [216.0, 55280.0], [231.0, 49870.0], [230.0, 49606.0], [229.0, 51233.0], [228.0, 51860.0], [227.0, 50534.0], [226.0, 55387.0], [225.0, 53422.0], [224.0, 54245.0], [239.0, 49771.0], [238.0, 49889.0], [237.0, 46549.0], [236.0, 50018.0], [235.0, 49659.0], [234.0, 49534.0], [233.0, 49568.0], [232.0, 49084.0], [247.0, 49320.0], [246.0, 49446.0], [245.0, 48598.0], [244.0, 49232.0], [243.0, 49652.0], [242.0, 49242.0], [241.0, 49601.0], [240.0, 49871.0], [254.0, 45947.0], [252.0, 46077.0], [251.0, 48761.0], [250.0, 49389.0], [249.0, 49411.0], [248.0, 48975.0], [270.0, 39766.0], [271.0, 38588.0], [269.0, 42845.0], [268.0, 48136.0], [267.0, 44810.0], [266.0, 47886.0], [265.0, 45005.0], [264.0, 45079.0], [263.0, 47918.0], [257.0, 48412.0], [256.0, 48040.666666666664], [259.0, 47874.0], [258.0, 48342.0], [262.0, 48434.0], [261.0, 48596.0], [260.0, 48752.0], [286.0, 24235.0], [287.0, 23658.0], [285.0, 27873.0], [284.0, 28050.0], [283.0, 27770.0], [282.0, 28081.0], [281.0, 28705.0], [280.0, 28180.0], [279.0, 28414.0], [273.0, 38052.0], [272.0, 38371.0], [275.0, 36453.0], [274.0, 37041.0], [278.0, 28193.0], [277.0, 28680.0], [276.0, 31869.0], [296.0, 21767.0], [300.0, 8417.0], [299.0, 9743.0], [298.0, 12406.0], [297.0, 21697.0], [295.0, 21822.0], [294.0, 21929.0], [293.0, 21936.0], [292.0, 22146.0], [291.0, 21982.0], [290.0, 22239.0], [289.0, 22240.0], [288.0, 22245.0], [1.0, 71070.0]], "isOverall": false, "label": "Student Attendance SchoolWise", "isController": false}, {"data": [[150.6599999999999, 59167.27]], "isOverall": false, "label": "Student Attendance SchoolWise-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 300.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1658.3333333333333, "minX": 1.59475512E12, "maxY": 1.904846075E7, "series": [{"data": [[1.59475512E12, 2031931.25], [1.59475518E12, 1.904846075E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.59475512E12, 1658.3333333333333], [1.59475518E12, 4546.666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59475518E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 7119.083333333332, "minX": 1.59475512E12, "maxY": 62421.4690909091, "series": [{"data": [[1.59475512E12, 7119.083333333332]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.59475512E12, 23371.079999999998], [1.59475518E12, 62421.4690909091]], "isOverall": false, "label": "Student Attendance SchoolWise", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59475518E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 6278.240000000001, "minX": 1.59475512E12, "maxY": 37460.17090909091, "series": [{"data": [[1.59475512E12, 7119.059999999999]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.59475512E12, 6278.240000000001], [1.59475518E12, 37460.17090909091]], "isOverall": false, "label": "Student Attendance SchoolWise", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59475518E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 5.800000000000001, "minX": 1.59475512E12, "maxY": 2783.923333333334, "series": [{"data": [[1.59475512E12, 2783.923333333334]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.59475512E12, 5.800000000000001], [1.59475518E12, 29.47636363636362]], "isOverall": false, "label": "Student Attendance SchoolWise", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59475518E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 908.0, "minX": 1.59475512E12, "maxY": 73749.0, "series": [{"data": [[1.59475512E12, 31869.0], [1.59475518E12, 73749.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.59475512E12, 908.0], [1.59475518E12, 36453.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.59475512E12, 10161.8], [1.59475518E12, 71021.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.59475512E12, 28610.840000000004], [1.59475518E12, 73716.88]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.59475512E12, 22096.8], [1.59475518E12, 71919.8]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59475518E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 3912.0, "minX": 1.0, "maxY": 71011.0, "series": [{"data": [[8.0, 28186.5], [2.0, 53833.5], [35.0, 71011.0], [9.0, 61129.0], [37.0, 70425.0], [45.0, 3912.0], [11.0, 55903.0], [3.0, 38371.0], [12.0, 63694.0], [52.0, 8474.0], [13.0, 60306.0], [15.0, 69918.0], [4.0, 62138.0], [1.0, 27873.0], [16.0, 70591.0], [19.0, 4673.0], [78.0, 9911.5], [20.0, 49237.0], [6.0, 68754.0], [102.0, 7211.5], [7.0, 33527.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 60227.0], [20.0, 60072.5], [13.0, 60043.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 102.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 3912.0, "minX": 1.0, "maxY": 60227.0, "series": [{"data": [[8.0, 7204.0], [2.0, 19627.0], [35.0, 55111.0], [9.0, 24848.0], [37.0, 47177.0], [45.0, 3912.0], [11.0, 21613.0], [3.0, 7567.0], [12.0, 28655.0], [52.0, 8474.0], [13.0, 20798.0], [15.0, 39179.0], [4.0, 22784.0], [1.0, 5754.0], [16.0, 40628.0], [19.0, 4673.0], [78.0, 9911.5], [20.0, 15929.5], [6.0, 34157.5], [102.0, 7211.5], [7.0, 7121.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 60227.0], [20.0, 60072.5], [13.0, 60043.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 102.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.59475512E12, "maxY": 10.0, "series": [{"data": [[1.59475512E12, 10.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59475512E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.59475512E12, "maxY": 5.416666666666667, "series": [{"data": [[1.59475512E12, 5.416666666666667], [1.59475518E12, 3.9166666666666665]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.59475518E12, 0.6666666666666666]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59475518E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.4166666666666667, "minX": 1.59475512E12, "maxY": 5.0, "series": [{"data": [[1.59475518E12, 0.6666666666666666]], "isOverall": false, "label": "Student Attendance SchoolWise-failure", "isController": false}, {"data": [[1.59475512E12, 0.4166666666666667], [1.59475518E12, 3.9166666666666665]], "isOverall": false, "label": "Student Attendance SchoolWise-success", "isController": false}, {"data": [[1.59475512E12, 5.0]], "isOverall": false, "label": "Login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59475518E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.59475512E12, "maxY": 5.416666666666667, "series": [{"data": [[1.59475512E12, 5.416666666666667], [1.59475518E12, 3.9166666666666665]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.59475518E12, 0.6666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59475518E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

