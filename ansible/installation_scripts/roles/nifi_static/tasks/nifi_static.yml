- name: Fetch nifi root processor group id
  uri:
    url: http://localhost:{{ nifi_port }}/nifi-api/process-groups/root
    method: GET
  register: processor_id

- name: upload template
  action: shell curl -POST http://localhost:{{ nifi_port }}/nifi-api/process-groups/{{ processor_id.json.id }}/templates/upload -k -v -F template=@../../development/nifi/static_data_transformer.xml
  register: xml_output
  args:
    warn: false

- name: upload parameters
  action: shell curl -d @{{ item }} -H Content-Type:application/json -X POST http://localhost:{{ nifi_port }}/nifi-api/parameter-contexts
  with_items:
     - nifi_json_files/raw.json
     - nifi_json_files/static.json
  args:
    warn: false

- name: Get processor group
  uri:
    url: http://localhost:{{ nifi_port }}/nifi-api/flow/process-groups/{{ processor_id.json.id }}
    method: GET
  register: processor_group

- name: Get template list
  uri:
    url: http://localhost:{{ nifi_port }}/nifi-api/flow/templates
    method: GET
  register: template_list

- name: Instatiate template list
  action: shell curl -X POST  -H 'Content-Type:application/json' -d '{ "originX":0.0, "originY":0.0, "templateId":"{{ item.template.id }}" }' http://localhost:{{ nifi_port }}/nifi-api/process-groups/{{ processor_group.json.processGroupFlow.id }}/template-instance
  loop: "{{ template_list.json | json_query('templates[*]') }}"
  when: item.template.name == 'static_data_transformer'
  no_log: True
  args:
    warn: false

- name: Fetch nifi processor group id
  uri:
    url: http://localhost:{{ nifi_port }}/nifi-api/process-groups/root
    method: GET
  register: processor_id

- name: Get processor group after instantiation of template
  uri:
    url: http://localhost:{{ nifi_port }}/nifi-api/flow/process-groups/{{ processor_id.json.id }}
    method: GET
  register: processor_group_temp

#--- Fetching processor group id of static data processor ---
- name: Get processor group id of the static data  processor
  uri:
    url: http://localhost:{{ nifi_port }}/nifi-api/flow/process-groups/{{ item.id }}
    method: GET
  loop: "{{ processor_group_temp.json | json_query('processGroupFlow.flow.processGroups[*]') }}"
  when: item.component.name == 'static_data_transformer'
  register: processor_group_template
  no_log: True

- set_fact:
    static_pg_id: "{{  processor_group_template | json_query('results[?item.component.name == `static_data_transformer`]') }}"

- name: Get multi processor group
  uri:
    url: http://localhost:{{ nifi_port }}/nifi-api/flow/process-groups/{{ static_pg_id[0].item.component.id }}
    method: GET
  register: multi_processor

- name: Run jmesquery
  debug: msg={{ multi_processor.json | json_query(jmesquery) }}
  vars:
    jmesquery: "processGroupFlow.flow.processGroups[*].{Name: component.name, ID: component.id,  Version: revision.version}"
  register: output

#--- Fetch ID and Version of respective processor

- name: Display ID of static raw processor
  debug:
    var: item
  loop: "{{ output | json_query(static_raw_id) }}"
  vars:
    static_raw_id: "msg[?Name=='cQube_raw_data_fetch_static'].ID"
  register: static_raw_id

- name: Display version of static raw processor
  debug:
    var: item
  loop: "{{ output | json_query(static_raw_version) }}"
  vars:
    static_raw_version: "msg[?Name=='cQube_raw_data_fetch_static'].Version"
  register: static_raw_version

- name: Display ID of static data processor
  debug:
    var: item
  loop: "{{ output | json_query(static_data_id) }}"
  vars:
    static_data_id: "msg[?Name=='static_data_processor'].ID"
  register: static_data_id

- name: Display version of static data processor
  debug:
    var: item
  loop: "{{ output | json_query(static_data_version) }}"
  vars:
    static_data_version: "msg[?Name=='static_data_processor'].Version"
  register: static_data_version

- name: Get parameter contexts
  uri:
    url: http://localhost:{{ nifi_port }}/nifi-api/flow/parameter-contexts
    method: GET
  register: parameters

#---Connection of processor groups to respective parameter contexts--
- name: Connection static raw processor group to raw parameters
  uri:
    url: http://localhost:{{ nifi_port }}/nifi-api/process-groups/{{ static_raw_id.results[0].item }}
    method: PUT
    body_format: json
    body: {"revision": {
            "version": "{{ static_raw_version.results[0].item }}",
            "lastModifier": "Ansible"
        },"component":
              {"id": "{{ static_raw_id.results[0].item }}","parameterContext":{"id": "{{ item.component.id }}"}}
     }
  loop: "{{ parameters.json | json_query('parameterContexts[*]') }}"
  when: item.component.name == 'cQube-raw-data-fetch-parameters'
  no_log: True

- name: Connection static processor group to static parameters
  uri:
    url: http://localhost:{{ nifi_port }}/nifi-api/process-groups/{{ static_data_id.results[0].item }}
    method: PUT
    body_format: json
    body: {"revision": {
            "version": "{{ static_data_version.results[0].item }}",
            "lastModifier": "Ansible"
        },"component":
              {"id": "{{ static_data_id.results[0].item }}","parameterContext":{"id": "{{ item.component.id }}"}}
     }
  loop: "{{ parameters.json | json_query('parameterContexts[*]') }}"
  when: item.component.name == 'static_data_parameters'
  no_log: True

- name: Create DistributedMapCacheServer
  uri:
    url: http://localhost:{{ nifi_port }}/nifi-api/process-groups/{{ static_raw_id.results[0].item }}/controller-services
    method: POST
    body_format: json
    status_code: 201
    body: {"revision": {"clientId": "ansible","version": 0,"lastModifier": "ansible"},"component":{"type":"org.apache.nifi.distributed.cache.server.map.DistributedMapCacheServer","properties" : { "Port": "4559"}}}

#--- Run a python code to load required parameter values ---
- name: Deleting params file if exists
  file:
    path: "{{ base_dir }}/cqube/emission_app/python/update_nifi_params.py"
    state: absent

- name: creating python code for parameters
  template:
    src: update_nifi_params.py.j2
    dest: "{{ base_dir }}/cqube/emission_app/python/update_nifi_params.py"
    mode: "0644"

- name: Run python code
  shell: "{{ base_dir }}/cqube/emission_app/flaskenv/bin/python {{ base_dir }}/cqube/emission_app/python/update_nifi_params.py"

#--- Starting of Controllers ---
- name: Get controllers
  uri:
    url: http://localhost:{{ nifi_port }}/nifi-api/flow/process-groups/{{ static_raw_id.results[0].item }}/controller-services
    method: GET
  register: controllers_list_raw
  no_log: True

- name: Get controllers
  uri:
    url: http://localhost:{{ nifi_port }}/nifi-api/flow/process-groups/{{ static_data_id.results[0].item }}/controller-services
    method: GET
  register: controllers_list_data
  no_log: True

- name: Add s3 credentials parameters
  uri:
    url: http://localhost:{{ nifi_port }}/nifi-api/controller-services/{{ item.id }}
    method: PUT
    body_format: json
    body: {"revision": {
             "version": "{{ item.revision.version }}",
            "lastModifier": "Ansible"
        },
        "component": {"id": "{{ item.id }}", "name": "cQube_s3_static_raw",
        "properties" : { "Access Key" : "#{s3_access_key}", "Secret Key":"#{s3_secret_key}"}}

     }
  loop: "{{ controllers_list_raw.json | json_query('controllerServices[*]') }}"
  when: item.component.name == 'cQube_s3_static_raw'
  no_log: True

- name: Add s3 credentials parameters
  uri:
    url: http://localhost:{{ nifi_port }}/nifi-api/controller-services/{{ item.id }}
    method: PUT
    body_format: json
    body: {"revision": {
             "version": "{{ item.revision.version }}",
            "lastModifier": "Ansible"
        },
        "component": {"id": "{{ item.id }}", "name": "cQube_s3_static",
        "properties" : { "Access Key" : "#{s3_access_key}", "Secret Key":"#{s3_secret_key}"}}

     }
  loop: "{{ controllers_list_data.json | json_query('controllerServices[*]') }}"
  when: item.component.name == 'cQube_s3_static'
  no_log: True

- name: Add postgre-source-pwd  
  uri:
    url: http://localhost:{{ nifi_port }}/nifi-api/controller-services/{{ item.id }}
    method: PUT
    body_format: json
    body: {"revision": {
             "version": "{{ item.revision.version }}",
            "lastModifier": "Ansible"
        },
        "component": {"id": "{{ item.id }}", "name": "postgres_static_raw",
        "properties" : { "Password" : "#{db_password}"}}

     }
  loop: "{{ controllers_list_raw.json | json_query('controllerServices[*]') }}"
  when: item.component.name == 'postgres_static_raw'
  no_log: True

- name: Add postgre-source-pwd
  uri:
    url: http://localhost:{{ nifi_port }}/nifi-api/controller-services/{{ item.id }}
    method: PUT
    body_format: json
    body: {"revision": {
             "version": "{{ item.revision.version }}",
            "lastModifier": "Ansible"
        },
       "component": {"id": "{{ item.id }}", "name": "postgres_static",
       "properties" : { "Password" : "#{db_password}"}}

    }
  loop: "{{ controllers_list_data.json | json_query('controllerServices[*]') }}"
  when: item.component.name == 'postgres_static'
  no_log: True

- name: Get controllers raw updated
  uri:
    url: http://localhost:{{ nifi_port }}/nifi-api/flow/process-groups/{{ static_raw_id.results[0].item }}/controller-services
    method: GET
  register: controllers_list_raw_updated
  no_log: True

- name: Get controllers static updated
  uri:
    url: http://localhost:{{ nifi_port }}/nifi-api/flow/process-groups/{{ static_data_id.results[0].item }}/controller-services
    method: GET
  register: controllers_list_static_updated
  no_log: True

- name: Start static raw controllers
  uri:
    url: http://localhost:{{ nifi_port }}/nifi-api/controller-services/{{ item.id }}/run-status
    method: PUT
    body_format: json
    body: {"revision": {
            "version": "{{ item.revision.version }}"
        },
        "state":"ENABLED"
        }
  loop: "{{ controllers_list_raw_updated.json | json_query('controllerServices[*]') }}"
  when: item.component.state == 'DISABLED'
  no_log: True

- name: Start static controllers
  uri:
    url: http://localhost:{{ nifi_port }}/nifi-api/controller-services/{{ item.id }}/run-status
    method: PUT
    body_format: json
    body: {"revision": {
            "version": "{{ item.revision.version }}"
        },
        "state":"ENABLED"
        }
  loop: "{{ controllers_list_static_updated.json | json_query('controllerServices[*]') }}"
  when: item.component.state == 'DISABLED'
  no_log: True 
