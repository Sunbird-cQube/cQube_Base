/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1657.0, "minX": 0.0, "maxY": 39150.0, "series": [{"data": [[0.0, 14969.0], [0.1, 14969.0], [0.2, 14969.0], [0.3, 14969.0], [0.4, 14969.0], [0.5, 14969.0], [0.6, 14969.0], [0.7, 14969.0], [0.8, 14969.0], [0.9, 14969.0], [1.0, 24733.0], [1.1, 24733.0], [1.2, 24733.0], [1.3, 24733.0], [1.4, 24733.0], [1.5, 24733.0], [1.6, 24733.0], [1.7, 24733.0], [1.8, 24733.0], [1.9, 24733.0], [2.0, 30975.0], [2.1, 30975.0], [2.2, 30975.0], [2.3, 30975.0], [2.4, 30975.0], [2.5, 30975.0], [2.6, 30975.0], [2.7, 30975.0], [2.8, 30975.0], [2.9, 30975.0], [3.0, 31300.0], [3.1, 31300.0], [3.2, 31300.0], [3.3, 31300.0], [3.4, 31300.0], [3.5, 31300.0], [3.6, 31300.0], [3.7, 31300.0], [3.8, 31300.0], [3.9, 31300.0], [4.0, 32428.0], [4.1, 32428.0], [4.2, 32428.0], [4.3, 32428.0], [4.4, 32428.0], [4.5, 32428.0], [4.6, 32428.0], [4.7, 32428.0], [4.8, 32428.0], [4.9, 32428.0], [5.0, 35249.0], [5.1, 35249.0], [5.2, 35249.0], [5.3, 35249.0], [5.4, 35249.0], [5.5, 35249.0], [5.6, 35249.0], [5.7, 35249.0], [5.8, 35249.0], [5.9, 35249.0], [6.0, 35253.0], [6.1, 35253.0], [6.2, 35253.0], [6.3, 35253.0], [6.4, 35253.0], [6.5, 35253.0], [6.6, 35253.0], [6.7, 35253.0], [6.8, 35253.0], [6.9, 35253.0], [7.0, 35494.0], [7.1, 35494.0], [7.2, 35494.0], [7.3, 35494.0], [7.4, 35494.0], [7.5, 35494.0], [7.6, 35494.0], [7.7, 35494.0], [7.8, 35494.0], [7.9, 35494.0], [8.0, 35635.0], [8.1, 35635.0], [8.2, 35635.0], [8.3, 35635.0], [8.4, 35635.0], [8.5, 35635.0], [8.6, 35635.0], [8.7, 35635.0], [8.8, 35635.0], [8.9, 35635.0], [9.0, 35776.0], [9.1, 35776.0], [9.2, 35776.0], [9.3, 35776.0], [9.4, 35776.0], [9.5, 35776.0], [9.6, 35776.0], [9.7, 35776.0], [9.8, 35776.0], [9.9, 35776.0], [10.0, 35780.0], [10.1, 35780.0], [10.2, 35780.0], [10.3, 35780.0], [10.4, 35780.0], [10.5, 35780.0], [10.6, 35780.0], [10.7, 35780.0], [10.8, 35780.0], [10.9, 35780.0], [11.0, 35953.0], [11.1, 35953.0], [11.2, 35953.0], [11.3, 35953.0], [11.4, 35953.0], [11.5, 35953.0], [11.6, 35953.0], [11.7, 35953.0], [11.8, 35953.0], [11.9, 35953.0], [12.0, 36055.0], [12.1, 36055.0], [12.2, 36055.0], [12.3, 36055.0], [12.4, 36055.0], [12.5, 36055.0], [12.6, 36055.0], [12.7, 36055.0], [12.8, 36055.0], [12.9, 36055.0], [13.0, 36060.0], [13.1, 36060.0], [13.2, 36060.0], [13.3, 36060.0], [13.4, 36060.0], [13.5, 36060.0], [13.6, 36060.0], [13.7, 36060.0], [13.8, 36060.0], [13.9, 36060.0], [14.0, 36213.0], [14.1, 36213.0], [14.2, 36213.0], [14.3, 36213.0], [14.4, 36213.0], [14.5, 36213.0], [14.6, 36213.0], [14.7, 36213.0], [14.8, 36213.0], [14.9, 36213.0], [15.0, 36400.0], [15.1, 36400.0], [15.2, 36400.0], [15.3, 36400.0], [15.4, 36400.0], [15.5, 36400.0], [15.6, 36400.0], [15.7, 36400.0], [15.8, 36400.0], [15.9, 36400.0], [16.0, 36459.0], [16.1, 36459.0], [16.2, 36459.0], [16.3, 36459.0], [16.4, 36459.0], [16.5, 36459.0], [16.6, 36459.0], [16.7, 36459.0], [16.8, 36459.0], [16.9, 36459.0], [17.0, 36549.0], [17.1, 36549.0], [17.2, 36549.0], [17.3, 36549.0], [17.4, 36549.0], [17.5, 36549.0], [17.6, 36549.0], [17.7, 36549.0], [17.8, 36549.0], [17.9, 36549.0], [18.0, 36662.0], [18.1, 36662.0], [18.2, 36662.0], [18.3, 36662.0], [18.4, 36662.0], [18.5, 36662.0], [18.6, 36662.0], [18.7, 36662.0], [18.8, 36662.0], [18.9, 36662.0], [19.0, 36756.0], [19.1, 36756.0], [19.2, 36756.0], [19.3, 36756.0], [19.4, 36756.0], [19.5, 36756.0], [19.6, 36756.0], [19.7, 36756.0], [19.8, 36756.0], [19.9, 36756.0], [20.0, 36776.0], [20.1, 36776.0], [20.2, 36776.0], [20.3, 36776.0], [20.4, 36776.0], [20.5, 36776.0], [20.6, 36776.0], [20.7, 36776.0], [20.8, 36776.0], [20.9, 36776.0], [21.0, 36790.0], [21.1, 36790.0], [21.2, 36790.0], [21.3, 36790.0], [21.4, 36790.0], [21.5, 36790.0], [21.6, 36790.0], [21.7, 36790.0], [21.8, 36790.0], [21.9, 36790.0], [22.0, 36840.0], [22.1, 36840.0], [22.2, 36840.0], [22.3, 36840.0], [22.4, 36840.0], [22.5, 36840.0], [22.6, 36840.0], [22.7, 36840.0], [22.8, 36840.0], [22.9, 36840.0], [23.0, 36850.0], [23.1, 36850.0], [23.2, 36850.0], [23.3, 36850.0], [23.4, 36850.0], [23.5, 36850.0], [23.6, 36850.0], [23.7, 36850.0], [23.8, 36850.0], [23.9, 36850.0], [24.0, 36907.0], [24.1, 36907.0], [24.2, 36907.0], [24.3, 36907.0], [24.4, 36907.0], [24.5, 36907.0], [24.6, 36907.0], [24.7, 36907.0], [24.8, 36907.0], [24.9, 36907.0], [25.0, 36909.0], [25.1, 36909.0], [25.2, 36909.0], [25.3, 36909.0], [25.4, 36909.0], [25.5, 36909.0], [25.6, 36909.0], [25.7, 36909.0], [25.8, 36909.0], [25.9, 36909.0], [26.0, 36981.0], [26.1, 36981.0], [26.2, 36981.0], [26.3, 36981.0], [26.4, 36981.0], [26.5, 36981.0], [26.6, 36981.0], [26.7, 36981.0], [26.8, 36981.0], [26.9, 36981.0], [27.0, 37009.0], [27.1, 37009.0], [27.2, 37009.0], [27.3, 37009.0], [27.4, 37009.0], [27.5, 37009.0], [27.6, 37009.0], [27.7, 37009.0], [27.8, 37009.0], [27.9, 37009.0], [28.0, 37030.0], [28.1, 37030.0], [28.2, 37030.0], [28.3, 37030.0], [28.4, 37030.0], [28.5, 37030.0], [28.6, 37030.0], [28.7, 37030.0], [28.8, 37030.0], [28.9, 37030.0], [29.0, 37125.0], [29.1, 37125.0], [29.2, 37125.0], [29.3, 37125.0], [29.4, 37125.0], [29.5, 37125.0], [29.6, 37125.0], [29.7, 37125.0], [29.8, 37125.0], [29.9, 37125.0], [30.0, 37131.0], [30.1, 37131.0], [30.2, 37131.0], [30.3, 37131.0], [30.4, 37131.0], [30.5, 37131.0], [30.6, 37131.0], [30.7, 37131.0], [30.8, 37131.0], [30.9, 37131.0], [31.0, 37153.0], [31.1, 37153.0], [31.2, 37153.0], [31.3, 37153.0], [31.4, 37153.0], [31.5, 37153.0], [31.6, 37153.0], [31.7, 37153.0], [31.8, 37153.0], [31.9, 37153.0], [32.0, 37156.0], [32.1, 37156.0], [32.2, 37156.0], [32.3, 37156.0], [32.4, 37156.0], [32.5, 37156.0], [32.6, 37156.0], [32.7, 37156.0], [32.8, 37156.0], [32.9, 37156.0], [33.0, 37335.0], [33.1, 37335.0], [33.2, 37335.0], [33.3, 37335.0], [33.4, 37335.0], [33.5, 37335.0], [33.6, 37335.0], [33.7, 37335.0], [33.8, 37335.0], [33.9, 37335.0], [34.0, 37351.0], [34.1, 37351.0], [34.2, 37351.0], [34.3, 37351.0], [34.4, 37351.0], [34.5, 37351.0], [34.6, 37351.0], [34.7, 37351.0], [34.8, 37351.0], [34.9, 37351.0], [35.0, 37384.0], [35.1, 37384.0], [35.2, 37384.0], [35.3, 37384.0], [35.4, 37384.0], [35.5, 37384.0], [35.6, 37384.0], [35.7, 37384.0], [35.8, 37384.0], [35.9, 37384.0], [36.0, 37516.0], [36.1, 37516.0], [36.2, 37516.0], [36.3, 37516.0], [36.4, 37516.0], [36.5, 37516.0], [36.6, 37516.0], [36.7, 37516.0], [36.8, 37516.0], [36.9, 37516.0], [37.0, 37526.0], [37.1, 37526.0], [37.2, 37526.0], [37.3, 37526.0], [37.4, 37526.0], [37.5, 37526.0], [37.6, 37526.0], [37.7, 37526.0], [37.8, 37526.0], [37.9, 37526.0], [38.0, 37557.0], [38.1, 37557.0], [38.2, 37557.0], [38.3, 37557.0], [38.4, 37557.0], [38.5, 37557.0], [38.6, 37557.0], [38.7, 37557.0], [38.8, 37557.0], [38.9, 37557.0], [39.0, 37592.0], [39.1, 37592.0], [39.2, 37592.0], [39.3, 37592.0], [39.4, 37592.0], [39.5, 37592.0], [39.6, 37592.0], [39.7, 37592.0], [39.8, 37592.0], [39.9, 37592.0], [40.0, 37626.0], [40.1, 37626.0], [40.2, 37626.0], [40.3, 37626.0], [40.4, 37626.0], [40.5, 37626.0], [40.6, 37626.0], [40.7, 37626.0], [40.8, 37626.0], [40.9, 37626.0], [41.0, 37628.0], [41.1, 37628.0], [41.2, 37628.0], [41.3, 37628.0], [41.4, 37628.0], [41.5, 37628.0], [41.6, 37628.0], [41.7, 37628.0], [41.8, 37628.0], [41.9, 37628.0], [42.0, 37630.0], [42.1, 37630.0], [42.2, 37630.0], [42.3, 37630.0], [42.4, 37630.0], [42.5, 37630.0], [42.6, 37630.0], [42.7, 37630.0], [42.8, 37630.0], [42.9, 37630.0], [43.0, 37644.0], [43.1, 37644.0], [43.2, 37644.0], [43.3, 37644.0], [43.4, 37644.0], [43.5, 37644.0], [43.6, 37644.0], [43.7, 37644.0], [43.8, 37644.0], [43.9, 37644.0], [44.0, 37679.0], [44.1, 37679.0], [44.2, 37679.0], [44.3, 37679.0], [44.4, 37679.0], [44.5, 37679.0], [44.6, 37679.0], [44.7, 37679.0], [44.8, 37679.0], [44.9, 37679.0], [45.0, 37695.0], [45.1, 37695.0], [45.2, 37695.0], [45.3, 37695.0], [45.4, 37695.0], [45.5, 37695.0], [45.6, 37695.0], [45.7, 37695.0], [45.8, 37695.0], [45.9, 37695.0], [46.0, 37715.0], [46.1, 37715.0], [46.2, 37715.0], [46.3, 37715.0], [46.4, 37715.0], [46.5, 37715.0], [46.6, 37715.0], [46.7, 37715.0], [46.8, 37715.0], [46.9, 37715.0], [47.0, 37735.0], [47.1, 37735.0], [47.2, 37735.0], [47.3, 37735.0], [47.4, 37735.0], [47.5, 37735.0], [47.6, 37735.0], [47.7, 37735.0], [47.8, 37735.0], [47.9, 37735.0], [48.0, 37745.0], [48.1, 37745.0], [48.2, 37745.0], [48.3, 37745.0], [48.4, 37745.0], [48.5, 37745.0], [48.6, 37745.0], [48.7, 37745.0], [48.8, 37745.0], [48.9, 37745.0], [49.0, 37761.0], [49.1, 37761.0], [49.2, 37761.0], [49.3, 37761.0], [49.4, 37761.0], [49.5, 37761.0], [49.6, 37761.0], [49.7, 37761.0], [49.8, 37761.0], [49.9, 37761.0], [50.0, 37769.0], [50.1, 37769.0], [50.2, 37769.0], [50.3, 37769.0], [50.4, 37769.0], [50.5, 37769.0], [50.6, 37769.0], [50.7, 37769.0], [50.8, 37769.0], [50.9, 37769.0], [51.0, 37772.0], [51.1, 37772.0], [51.2, 37772.0], [51.3, 37772.0], [51.4, 37772.0], [51.5, 37772.0], [51.6, 37772.0], [51.7, 37772.0], [51.8, 37772.0], [51.9, 37772.0], [52.0, 37778.0], [52.1, 37778.0], [52.2, 37778.0], [52.3, 37778.0], [52.4, 37778.0], [52.5, 37778.0], [52.6, 37778.0], [52.7, 37778.0], [52.8, 37778.0], [52.9, 37778.0], [53.0, 37782.0], [53.1, 37782.0], [53.2, 37782.0], [53.3, 37782.0], [53.4, 37782.0], [53.5, 37782.0], [53.6, 37782.0], [53.7, 37782.0], [53.8, 37782.0], [53.9, 37782.0], [54.0, 37792.0], [54.1, 37792.0], [54.2, 37792.0], [54.3, 37792.0], [54.4, 37792.0], [54.5, 37792.0], [54.6, 37792.0], [54.7, 37792.0], [54.8, 37792.0], [54.9, 37792.0], [55.0, 37808.0], [55.1, 37808.0], [55.2, 37808.0], [55.3, 37808.0], [55.4, 37808.0], [55.5, 37808.0], [55.6, 37808.0], [55.7, 37808.0], [55.8, 37808.0], [55.9, 37808.0], [56.0, 37823.0], [56.1, 37823.0], [56.2, 37823.0], [56.3, 37823.0], [56.4, 37823.0], [56.5, 37823.0], [56.6, 37823.0], [56.7, 37823.0], [56.8, 37823.0], [56.9, 37823.0], [57.0, 37825.0], [57.1, 37825.0], [57.2, 37825.0], [57.3, 37825.0], [57.4, 37825.0], [57.5, 37825.0], [57.6, 37825.0], [57.7, 37825.0], [57.8, 37825.0], [57.9, 37825.0], [58.0, 37833.0], [58.1, 37833.0], [58.2, 37833.0], [58.3, 37833.0], [58.4, 37833.0], [58.5, 37833.0], [58.6, 37833.0], [58.7, 37833.0], [58.8, 37833.0], [58.9, 37833.0], [59.0, 37851.0], [59.1, 37851.0], [59.2, 37851.0], [59.3, 37851.0], [59.4, 37851.0], [59.5, 37851.0], [59.6, 37851.0], [59.7, 37851.0], [59.8, 37851.0], [59.9, 37851.0], [60.0, 37895.0], [60.1, 37895.0], [60.2, 37895.0], [60.3, 37895.0], [60.4, 37895.0], [60.5, 37895.0], [60.6, 37895.0], [60.7, 37895.0], [60.8, 37895.0], [60.9, 37895.0], [61.0, 37899.0], [61.1, 37899.0], [61.2, 37899.0], [61.3, 37899.0], [61.4, 37899.0], [61.5, 37899.0], [61.6, 37899.0], [61.7, 37899.0], [61.8, 37899.0], [61.9, 37899.0], [62.0, 37910.0], [62.1, 37910.0], [62.2, 37910.0], [62.3, 37910.0], [62.4, 37910.0], [62.5, 37910.0], [62.6, 37910.0], [62.7, 37910.0], [62.8, 37910.0], [62.9, 37910.0], [63.0, 37916.0], [63.1, 37916.0], [63.2, 37916.0], [63.3, 37916.0], [63.4, 37916.0], [63.5, 37916.0], [63.6, 37916.0], [63.7, 37916.0], [63.8, 37916.0], [63.9, 37916.0], [64.0, 37943.0], [64.1, 37943.0], [64.2, 37943.0], [64.3, 37943.0], [64.4, 37943.0], [64.5, 37943.0], [64.6, 37943.0], [64.7, 37943.0], [64.8, 37943.0], [64.9, 37943.0], [65.0, 37949.0], [65.1, 37949.0], [65.2, 37949.0], [65.3, 37949.0], [65.4, 37949.0], [65.5, 37949.0], [65.6, 37949.0], [65.7, 37949.0], [65.8, 37949.0], [65.9, 37949.0], [66.0, 37956.0], [66.1, 37956.0], [66.2, 37956.0], [66.3, 37956.0], [66.4, 37956.0], [66.5, 37956.0], [66.6, 37956.0], [66.7, 37956.0], [66.8, 37956.0], [66.9, 37956.0], [67.0, 37985.0], [67.1, 37985.0], [67.2, 37985.0], [67.3, 37985.0], [67.4, 37985.0], [67.5, 37985.0], [67.6, 37985.0], [67.7, 37985.0], [67.8, 37985.0], [67.9, 37985.0], [68.0, 38015.0], [68.1, 38015.0], [68.2, 38015.0], [68.3, 38015.0], [68.4, 38015.0], [68.5, 38015.0], [68.6, 38015.0], [68.7, 38015.0], [68.8, 38015.0], [68.9, 38015.0], [69.0, 38022.0], [69.1, 38022.0], [69.2, 38022.0], [69.3, 38022.0], [69.4, 38022.0], [69.5, 38022.0], [69.6, 38022.0], [69.7, 38022.0], [69.8, 38022.0], [69.9, 38022.0], [70.0, 38050.0], [70.1, 38050.0], [70.2, 38050.0], [70.3, 38050.0], [70.4, 38050.0], [70.5, 38050.0], [70.6, 38050.0], [70.7, 38050.0], [70.8, 38050.0], [70.9, 38050.0], [71.0, 38058.0], [71.1, 38058.0], [71.2, 38058.0], [71.3, 38058.0], [71.4, 38058.0], [71.5, 38058.0], [71.6, 38058.0], [71.7, 38058.0], [71.8, 38058.0], [71.9, 38058.0], [72.0, 38063.0], [72.1, 38063.0], [72.2, 38063.0], [72.3, 38063.0], [72.4, 38063.0], [72.5, 38063.0], [72.6, 38063.0], [72.7, 38063.0], [72.8, 38063.0], [72.9, 38063.0], [73.0, 38090.0], [73.1, 38090.0], [73.2, 38090.0], [73.3, 38090.0], [73.4, 38090.0], [73.5, 38090.0], [73.6, 38090.0], [73.7, 38090.0], [73.8, 38090.0], [73.9, 38090.0], [74.0, 38106.0], [74.1, 38106.0], [74.2, 38106.0], [74.3, 38106.0], [74.4, 38106.0], [74.5, 38106.0], [74.6, 38106.0], [74.7, 38106.0], [74.8, 38106.0], [74.9, 38106.0], [75.0, 38114.0], [75.1, 38114.0], [75.2, 38114.0], [75.3, 38114.0], [75.4, 38114.0], [75.5, 38114.0], [75.6, 38114.0], [75.7, 38114.0], [75.8, 38114.0], [75.9, 38114.0], [76.0, 38117.0], [76.1, 38117.0], [76.2, 38117.0], [76.3, 38117.0], [76.4, 38117.0], [76.5, 38117.0], [76.6, 38117.0], [76.7, 38117.0], [76.8, 38117.0], [76.9, 38117.0], [77.0, 38159.0], [77.1, 38159.0], [77.2, 38159.0], [77.3, 38159.0], [77.4, 38159.0], [77.5, 38159.0], [77.6, 38159.0], [77.7, 38159.0], [77.8, 38159.0], [77.9, 38159.0], [78.0, 38169.0], [78.1, 38169.0], [78.2, 38169.0], [78.3, 38169.0], [78.4, 38169.0], [78.5, 38169.0], [78.6, 38169.0], [78.7, 38169.0], [78.8, 38169.0], [78.9, 38169.0], [79.0, 38187.0], [79.1, 38187.0], [79.2, 38187.0], [79.3, 38187.0], [79.4, 38187.0], [79.5, 38187.0], [79.6, 38187.0], [79.7, 38187.0], [79.8, 38187.0], [79.9, 38187.0], [80.0, 38188.0], [80.1, 38188.0], [80.2, 38188.0], [80.3, 38188.0], [80.4, 38188.0], [80.5, 38188.0], [80.6, 38188.0], [80.7, 38188.0], [80.8, 38188.0], [80.9, 38188.0], [81.0, 38221.0], [81.1, 38221.0], [81.2, 38221.0], [81.3, 38221.0], [81.4, 38221.0], [81.5, 38221.0], [81.6, 38221.0], [81.7, 38221.0], [81.8, 38221.0], [81.9, 38221.0], [82.0, 38227.0], [82.1, 38227.0], [82.2, 38227.0], [82.3, 38227.0], [82.4, 38227.0], [82.5, 38227.0], [82.6, 38227.0], [82.7, 38227.0], [82.8, 38227.0], [82.9, 38227.0], [83.0, 38268.0], [83.1, 38268.0], [83.2, 38268.0], [83.3, 38268.0], [83.4, 38268.0], [83.5, 38268.0], [83.6, 38268.0], [83.7, 38268.0], [83.8, 38268.0], [83.9, 38268.0], [84.0, 38279.0], [84.1, 38279.0], [84.2, 38279.0], [84.3, 38279.0], [84.4, 38279.0], [84.5, 38279.0], [84.6, 38279.0], [84.7, 38279.0], [84.8, 38279.0], [84.9, 38279.0], [85.0, 38387.0], [85.1, 38387.0], [85.2, 38387.0], [85.3, 38387.0], [85.4, 38387.0], [85.5, 38387.0], [85.6, 38387.0], [85.7, 38387.0], [85.8, 38387.0], [85.9, 38387.0], [86.0, 38392.0], [86.1, 38392.0], [86.2, 38392.0], [86.3, 38392.0], [86.4, 38392.0], [86.5, 38392.0], [86.6, 38392.0], [86.7, 38392.0], [86.8, 38392.0], [86.9, 38392.0], [87.0, 38403.0], [87.1, 38403.0], [87.2, 38403.0], [87.3, 38403.0], [87.4, 38403.0], [87.5, 38403.0], [87.6, 38403.0], [87.7, 38403.0], [87.8, 38403.0], [87.9, 38403.0], [88.0, 38445.0], [88.1, 38445.0], [88.2, 38445.0], [88.3, 38445.0], [88.4, 38445.0], [88.5, 38445.0], [88.6, 38445.0], [88.7, 38445.0], [88.8, 38445.0], [88.9, 38445.0], [89.0, 38448.0], [89.1, 38448.0], [89.2, 38448.0], [89.3, 38448.0], [89.4, 38448.0], [89.5, 38448.0], [89.6, 38448.0], [89.7, 38448.0], [89.8, 38448.0], [89.9, 38448.0], [90.0, 38546.0], [90.1, 38546.0], [90.2, 38546.0], [90.3, 38546.0], [90.4, 38546.0], [90.5, 38546.0], [90.6, 38546.0], [90.7, 38546.0], [90.8, 38546.0], [90.9, 38546.0], [91.0, 38564.0], [91.1, 38564.0], [91.2, 38564.0], [91.3, 38564.0], [91.4, 38564.0], [91.5, 38564.0], [91.6, 38564.0], [91.7, 38564.0], [91.8, 38564.0], [91.9, 38564.0], [92.0, 38605.0], [92.1, 38605.0], [92.2, 38605.0], [92.3, 38605.0], [92.4, 38605.0], [92.5, 38605.0], [92.6, 38605.0], [92.7, 38605.0], [92.8, 38605.0], [92.9, 38605.0], [93.0, 38689.0], [93.1, 38689.0], [93.2, 38689.0], [93.3, 38689.0], [93.4, 38689.0], [93.5, 38689.0], [93.6, 38689.0], [93.7, 38689.0], [93.8, 38689.0], [93.9, 38689.0], [94.0, 38723.0], [94.1, 38723.0], [94.2, 38723.0], [94.3, 38723.0], [94.4, 38723.0], [94.5, 38723.0], [94.6, 38723.0], [94.7, 38723.0], [94.8, 38723.0], [94.9, 38723.0], [95.0, 38944.0], [95.1, 38944.0], [95.2, 38944.0], [95.3, 38944.0], [95.4, 38944.0], [95.5, 38944.0], [95.6, 38944.0], [95.7, 38944.0], [95.8, 38944.0], [95.9, 38944.0], [96.0, 38986.0], [96.1, 38986.0], [96.2, 38986.0], [96.3, 38986.0], [96.4, 38986.0], [96.5, 38986.0], [96.6, 38986.0], [96.7, 38986.0], [96.8, 38986.0], [96.9, 38986.0], [97.0, 39001.0], [97.1, 39001.0], [97.2, 39001.0], [97.3, 39001.0], [97.4, 39001.0], [97.5, 39001.0], [97.6, 39001.0], [97.7, 39001.0], [97.8, 39001.0], [97.9, 39001.0], [98.0, 39146.0], [98.1, 39146.0], [98.2, 39146.0], [98.3, 39146.0], [98.4, 39146.0], [98.5, 39146.0], [98.6, 39146.0], [98.7, 39146.0], [98.8, 39146.0], [98.9, 39146.0], [99.0, 39150.0], [99.1, 39150.0], [99.2, 39150.0], [99.3, 39150.0], [99.4, 39150.0], [99.5, 39150.0], [99.6, 39150.0], [99.7, 39150.0], [99.8, 39150.0], [99.9, 39150.0]], "isOverall": false, "label": "Semester SchoolWise", "isController": false}, {"data": [[0.0, 1657.0], [0.1, 1657.0], [0.2, 1657.0], [0.3, 1657.0], [0.4, 1657.0], [0.5, 1657.0], [0.6, 1657.0], [0.7, 1657.0], [0.8, 1657.0], [0.9, 1657.0], [1.0, 1790.0], [1.1, 1790.0], [1.2, 1790.0], [1.3, 1790.0], [1.4, 1790.0], [1.5, 1790.0], [1.6, 1790.0], [1.7, 1790.0], [1.8, 1790.0], [1.9, 1790.0], [2.0, 1834.0], [2.1, 1834.0], [2.2, 1834.0], [2.3, 1834.0], [2.4, 1834.0], [2.5, 1834.0], [2.6, 1834.0], [2.7, 1834.0], [2.8, 1834.0], [2.9, 1834.0], [3.0, 1851.0], [3.1, 1851.0], [3.2, 1851.0], [3.3, 1851.0], [3.4, 1851.0], [3.5, 1851.0], [3.6, 1851.0], [3.7, 1851.0], [3.8, 1851.0], [3.9, 1851.0], [4.0, 1873.0], [4.1, 1873.0], [4.2, 1873.0], [4.3, 1873.0], [4.4, 1873.0], [4.5, 1873.0], [4.6, 1873.0], [4.7, 1873.0], [4.8, 1873.0], [4.9, 1873.0], [5.0, 2099.0], [5.1, 2099.0], [5.2, 2099.0], [5.3, 2099.0], [5.4, 2099.0], [5.5, 2099.0], [5.6, 2099.0], [5.7, 2099.0], [5.8, 2099.0], [5.9, 2099.0], [6.0, 2179.0], [6.1, 2179.0], [6.2, 2179.0], [6.3, 2179.0], [6.4, 2179.0], [6.5, 2179.0], [6.6, 2179.0], [6.7, 2179.0], [6.8, 2179.0], [6.9, 2179.0], [7.0, 2182.0], [7.1, 2182.0], [7.2, 2182.0], [7.3, 2182.0], [7.4, 2182.0], [7.5, 2182.0], [7.6, 2182.0], [7.7, 2182.0], [7.8, 2182.0], [7.9, 2182.0], [8.0, 2219.0], [8.1, 2219.0], [8.2, 2219.0], [8.3, 2219.0], [8.4, 2219.0], [8.5, 2219.0], [8.6, 2219.0], [8.7, 2219.0], [8.8, 2219.0], [8.9, 2219.0], [9.0, 2247.0], [9.1, 2247.0], [9.2, 2247.0], [9.3, 2247.0], [9.4, 2247.0], [9.5, 2247.0], [9.6, 2247.0], [9.7, 2247.0], [9.8, 2247.0], [9.9, 2247.0], [10.0, 2250.0], [10.1, 2250.0], [10.2, 2250.0], [10.3, 2250.0], [10.4, 2250.0], [10.5, 2250.0], [10.6, 2250.0], [10.7, 2250.0], [10.8, 2250.0], [10.9, 2250.0], [11.0, 2280.0], [11.1, 2280.0], [11.2, 2280.0], [11.3, 2280.0], [11.4, 2280.0], [11.5, 2280.0], [11.6, 2280.0], [11.7, 2280.0], [11.8, 2280.0], [11.9, 2280.0], [12.0, 2332.0], [12.1, 2332.0], [12.2, 2332.0], [12.3, 2332.0], [12.4, 2332.0], [12.5, 2332.0], [12.6, 2332.0], [12.7, 2332.0], [12.8, 2332.0], [12.9, 2332.0], [13.0, 2346.0], [13.1, 2346.0], [13.2, 2346.0], [13.3, 2346.0], [13.4, 2346.0], [13.5, 2346.0], [13.6, 2346.0], [13.7, 2346.0], [13.8, 2346.0], [13.9, 2346.0], [14.0, 2349.0], [14.1, 2349.0], [14.2, 2349.0], [14.3, 2349.0], [14.4, 2349.0], [14.5, 2349.0], [14.6, 2349.0], [14.7, 2349.0], [14.8, 2349.0], [14.9, 2349.0], [15.0, 2374.0], [15.1, 2374.0], [15.2, 2374.0], [15.3, 2374.0], [15.4, 2374.0], [15.5, 2374.0], [15.6, 2374.0], [15.7, 2374.0], [15.8, 2374.0], [15.9, 2374.0], [16.0, 2398.0], [16.1, 2398.0], [16.2, 2398.0], [16.3, 2398.0], [16.4, 2398.0], [16.5, 2398.0], [16.6, 2398.0], [16.7, 2398.0], [16.8, 2398.0], [16.9, 2398.0], [17.0, 2411.0], [17.1, 2411.0], [17.2, 2411.0], [17.3, 2411.0], [17.4, 2411.0], [17.5, 2411.0], [17.6, 2411.0], [17.7, 2411.0], [17.8, 2411.0], [17.9, 2411.0], [18.0, 2416.0], [18.1, 2416.0], [18.2, 2416.0], [18.3, 2416.0], [18.4, 2416.0], [18.5, 2416.0], [18.6, 2416.0], [18.7, 2416.0], [18.8, 2416.0], [18.9, 2416.0], [19.0, 2417.0], [19.1, 2417.0], [19.2, 2417.0], [19.3, 2417.0], [19.4, 2417.0], [19.5, 2417.0], [19.6, 2417.0], [19.7, 2417.0], [19.8, 2417.0], [19.9, 2417.0], [20.0, 2430.0], [20.1, 2430.0], [20.2, 2430.0], [20.3, 2430.0], [20.4, 2430.0], [20.5, 2430.0], [20.6, 2430.0], [20.7, 2430.0], [20.8, 2430.0], [20.9, 2430.0], [21.0, 2476.0], [21.1, 2476.0], [21.2, 2476.0], [21.3, 2476.0], [21.4, 2476.0], [21.5, 2476.0], [21.6, 2476.0], [21.7, 2476.0], [21.8, 2476.0], [21.9, 2476.0], [22.0, 2497.0], [22.1, 2497.0], [22.2, 2497.0], [22.3, 2497.0], [22.4, 2497.0], [22.5, 2497.0], [22.6, 2497.0], [22.7, 2497.0], [22.8, 2497.0], [22.9, 2497.0], [23.0, 2498.0], [23.1, 2498.0], [23.2, 2498.0], [23.3, 2498.0], [23.4, 2498.0], [23.5, 2498.0], [23.6, 2498.0], [23.7, 2498.0], [23.8, 2498.0], [23.9, 2498.0], [24.0, 2533.0], [24.1, 2533.0], [24.2, 2533.0], [24.3, 2533.0], [24.4, 2533.0], [24.5, 2533.0], [24.6, 2533.0], [24.7, 2533.0], [24.8, 2533.0], [24.9, 2533.0], [25.0, 2548.0], [25.1, 2548.0], [25.2, 2548.0], [25.3, 2548.0], [25.4, 2548.0], [25.5, 2548.0], [25.6, 2548.0], [25.7, 2548.0], [25.8, 2548.0], [25.9, 2548.0], [26.0, 2559.0], [26.1, 2559.0], [26.2, 2559.0], [26.3, 2559.0], [26.4, 2559.0], [26.5, 2559.0], [26.6, 2559.0], [26.7, 2559.0], [26.8, 2559.0], [26.9, 2559.0], [27.0, 2564.0], [27.1, 2564.0], [27.2, 2564.0], [27.3, 2564.0], [27.4, 2564.0], [27.5, 2564.0], [27.6, 2564.0], [27.7, 2564.0], [27.8, 2564.0], [27.9, 2564.0], [28.0, 2566.0], [28.1, 2566.0], [28.2, 2566.0], [28.3, 2566.0], [28.4, 2566.0], [28.5, 2566.0], [28.6, 2566.0], [28.7, 2566.0], [28.8, 2566.0], [28.9, 2566.0], [29.0, 2641.0], [29.1, 2641.0], [29.2, 2641.0], [29.3, 2641.0], [29.4, 2641.0], [29.5, 2641.0], [29.6, 2641.0], [29.7, 2641.0], [29.8, 2641.0], [29.9, 2641.0], [30.0, 2661.0], [30.1, 2661.0], [30.2, 2661.0], [30.3, 2661.0], [30.4, 2661.0], [30.5, 2661.0], [30.6, 2661.0], [30.7, 2661.0], [30.8, 2661.0], [30.9, 2661.0], [31.0, 2668.0], [31.1, 2668.0], [31.2, 2668.0], [31.3, 2668.0], [31.4, 2668.0], [31.5, 2668.0], [31.6, 2668.0], [31.7, 2668.0], [31.8, 2668.0], [31.9, 2668.0], [32.0, 2693.0], [32.1, 2693.0], [32.2, 2693.0], [32.3, 2693.0], [32.4, 2693.0], [32.5, 2693.0], [32.6, 2693.0], [32.7, 2693.0], [32.8, 2693.0], [32.9, 2693.0], [33.0, 2721.0], [33.1, 2721.0], [33.2, 2721.0], [33.3, 2721.0], [33.4, 2721.0], [33.5, 2721.0], [33.6, 2721.0], [33.7, 2721.0], [33.8, 2721.0], [33.9, 2721.0], [34.0, 2726.0], [34.1, 2726.0], [34.2, 2726.0], [34.3, 2726.0], [34.4, 2726.0], [34.5, 2726.0], [34.6, 2726.0], [34.7, 2726.0], [34.8, 2726.0], [34.9, 2726.0], [35.0, 2730.0], [35.1, 2730.0], [35.2, 2730.0], [35.3, 2730.0], [35.4, 2730.0], [35.5, 2730.0], [35.6, 2730.0], [35.7, 2730.0], [35.8, 2730.0], [35.9, 2730.0], [36.0, 2737.0], [36.1, 2737.0], [36.2, 2737.0], [36.3, 2737.0], [36.4, 2737.0], [36.5, 2737.0], [36.6, 2737.0], [36.7, 2737.0], [36.8, 2737.0], [36.9, 2737.0], [37.0, 2790.0], [37.1, 2790.0], [37.2, 2790.0], [37.3, 2790.0], [37.4, 2790.0], [37.5, 2790.0], [37.6, 2790.0], [37.7, 2790.0], [37.8, 2790.0], [37.9, 2790.0], [38.0, 2814.0], [38.1, 2814.0], [38.2, 2814.0], [38.3, 2814.0], [38.4, 2814.0], [38.5, 2814.0], [38.6, 2814.0], [38.7, 2814.0], [38.8, 2814.0], [38.9, 2814.0], [39.0, 2838.0], [39.1, 2838.0], [39.2, 2838.0], [39.3, 2838.0], [39.4, 2838.0], [39.5, 2838.0], [39.6, 2838.0], [39.7, 2838.0], [39.8, 2838.0], [39.9, 2838.0], [40.0, 2874.0], [40.1, 2874.0], [40.2, 2874.0], [40.3, 2874.0], [40.4, 2874.0], [40.5, 2874.0], [40.6, 2874.0], [40.7, 2874.0], [40.8, 2874.0], [40.9, 2874.0], [41.0, 2882.0], [41.1, 2882.0], [41.2, 2882.0], [41.3, 2882.0], [41.4, 2882.0], [41.5, 2882.0], [41.6, 2882.0], [41.7, 2882.0], [41.8, 2882.0], [41.9, 2882.0], [42.0, 2922.0], [42.1, 2922.0], [42.2, 2922.0], [42.3, 2922.0], [42.4, 2922.0], [42.5, 2922.0], [42.6, 2922.0], [42.7, 2922.0], [42.8, 2922.0], [42.9, 2922.0], [43.0, 2994.0], [43.1, 2994.0], [43.2, 2994.0], [43.3, 2994.0], [43.4, 2994.0], [43.5, 2994.0], [43.6, 2994.0], [43.7, 2994.0], [43.8, 2994.0], [43.9, 2994.0], [44.0, 3020.0], [44.1, 3020.0], [44.2, 3020.0], [44.3, 3020.0], [44.4, 3020.0], [44.5, 3020.0], [44.6, 3020.0], [44.7, 3020.0], [44.8, 3020.0], [44.9, 3020.0], [45.0, 3035.0], [45.1, 3035.0], [45.2, 3035.0], [45.3, 3035.0], [45.4, 3035.0], [45.5, 3035.0], [45.6, 3035.0], [45.7, 3035.0], [45.8, 3035.0], [45.9, 3035.0], [46.0, 3048.0], [46.1, 3048.0], [46.2, 3048.0], [46.3, 3048.0], [46.4, 3048.0], [46.5, 3048.0], [46.6, 3048.0], [46.7, 3048.0], [46.8, 3048.0], [46.9, 3048.0], [47.0, 3048.0], [47.1, 3048.0], [47.2, 3048.0], [47.3, 3048.0], [47.4, 3048.0], [47.5, 3048.0], [47.6, 3048.0], [47.7, 3048.0], [47.8, 3048.0], [47.9, 3048.0], [48.0, 3055.0], [48.1, 3055.0], [48.2, 3055.0], [48.3, 3055.0], [48.4, 3055.0], [48.5, 3055.0], [48.6, 3055.0], [48.7, 3055.0], [48.8, 3055.0], [48.9, 3055.0], [49.0, 3055.0], [49.1, 3055.0], [49.2, 3055.0], [49.3, 3055.0], [49.4, 3055.0], [49.5, 3055.0], [49.6, 3055.0], [49.7, 3055.0], [49.8, 3055.0], [49.9, 3055.0], [50.0, 3078.0], [50.1, 3078.0], [50.2, 3078.0], [50.3, 3078.0], [50.4, 3078.0], [50.5, 3078.0], [50.6, 3078.0], [50.7, 3078.0], [50.8, 3078.0], [50.9, 3078.0], [51.0, 3097.0], [51.1, 3097.0], [51.2, 3097.0], [51.3, 3097.0], [51.4, 3097.0], [51.5, 3097.0], [51.6, 3097.0], [51.7, 3097.0], [51.8, 3097.0], [51.9, 3097.0], [52.0, 3124.0], [52.1, 3124.0], [52.2, 3124.0], [52.3, 3124.0], [52.4, 3124.0], [52.5, 3124.0], [52.6, 3124.0], [52.7, 3124.0], [52.8, 3124.0], [52.9, 3124.0], [53.0, 3166.0], [53.1, 3166.0], [53.2, 3166.0], [53.3, 3166.0], [53.4, 3166.0], [53.5, 3166.0], [53.6, 3166.0], [53.7, 3166.0], [53.8, 3166.0], [53.9, 3166.0], [54.0, 3208.0], [54.1, 3208.0], [54.2, 3208.0], [54.3, 3208.0], [54.4, 3208.0], [54.5, 3208.0], [54.6, 3208.0], [54.7, 3208.0], [54.8, 3208.0], [54.9, 3208.0], [55.0, 3210.0], [55.1, 3210.0], [55.2, 3210.0], [55.3, 3210.0], [55.4, 3210.0], [55.5, 3210.0], [55.6, 3210.0], [55.7, 3210.0], [55.8, 3210.0], [55.9, 3210.0], [56.0, 3224.0], [56.1, 3224.0], [56.2, 3224.0], [56.3, 3224.0], [56.4, 3224.0], [56.5, 3224.0], [56.6, 3224.0], [56.7, 3224.0], [56.8, 3224.0], [56.9, 3224.0], [57.0, 3240.0], [57.1, 3240.0], [57.2, 3240.0], [57.3, 3240.0], [57.4, 3240.0], [57.5, 3240.0], [57.6, 3240.0], [57.7, 3240.0], [57.8, 3240.0], [57.9, 3240.0], [58.0, 3241.0], [58.1, 3241.0], [58.2, 3241.0], [58.3, 3241.0], [58.4, 3241.0], [58.5, 3241.0], [58.6, 3241.0], [58.7, 3241.0], [58.8, 3241.0], [58.9, 3241.0], [59.0, 3242.0], [59.1, 3242.0], [59.2, 3242.0], [59.3, 3242.0], [59.4, 3242.0], [59.5, 3242.0], [59.6, 3242.0], [59.7, 3242.0], [59.8, 3242.0], [59.9, 3242.0], [60.0, 3249.0], [60.1, 3249.0], [60.2, 3249.0], [60.3, 3249.0], [60.4, 3249.0], [60.5, 3249.0], [60.6, 3249.0], [60.7, 3249.0], [60.8, 3249.0], [60.9, 3249.0], [61.0, 3254.0], [61.1, 3254.0], [61.2, 3254.0], [61.3, 3254.0], [61.4, 3254.0], [61.5, 3254.0], [61.6, 3254.0], [61.7, 3254.0], [61.8, 3254.0], [61.9, 3254.0], [62.0, 3274.0], [62.1, 3274.0], [62.2, 3274.0], [62.3, 3274.0], [62.4, 3274.0], [62.5, 3274.0], [62.6, 3274.0], [62.7, 3274.0], [62.8, 3274.0], [62.9, 3274.0], [63.0, 3285.0], [63.1, 3285.0], [63.2, 3285.0], [63.3, 3285.0], [63.4, 3285.0], [63.5, 3285.0], [63.6, 3285.0], [63.7, 3285.0], [63.8, 3285.0], [63.9, 3285.0], [64.0, 3307.0], [64.1, 3307.0], [64.2, 3307.0], [64.3, 3307.0], [64.4, 3307.0], [64.5, 3307.0], [64.6, 3307.0], [64.7, 3307.0], [64.8, 3307.0], [64.9, 3307.0], [65.0, 3319.0], [65.1, 3319.0], [65.2, 3319.0], [65.3, 3319.0], [65.4, 3319.0], [65.5, 3319.0], [65.6, 3319.0], [65.7, 3319.0], [65.8, 3319.0], [65.9, 3319.0], [66.0, 3352.0], [66.1, 3352.0], [66.2, 3352.0], [66.3, 3352.0], [66.4, 3352.0], [66.5, 3352.0], [66.6, 3352.0], [66.7, 3352.0], [66.8, 3352.0], [66.9, 3352.0], [67.0, 3356.0], [67.1, 3356.0], [67.2, 3356.0], [67.3, 3356.0], [67.4, 3356.0], [67.5, 3356.0], [67.6, 3356.0], [67.7, 3356.0], [67.8, 3356.0], [67.9, 3356.0], [68.0, 3361.0], [68.1, 3361.0], [68.2, 3361.0], [68.3, 3361.0], [68.4, 3361.0], [68.5, 3361.0], [68.6, 3361.0], [68.7, 3361.0], [68.8, 3361.0], [68.9, 3361.0], [69.0, 3441.0], [69.1, 3441.0], [69.2, 3441.0], [69.3, 3441.0], [69.4, 3441.0], [69.5, 3441.0], [69.6, 3441.0], [69.7, 3441.0], [69.8, 3441.0], [69.9, 3441.0], [70.0, 3447.0], [70.1, 3447.0], [70.2, 3447.0], [70.3, 3447.0], [70.4, 3447.0], [70.5, 3447.0], [70.6, 3447.0], [70.7, 3447.0], [70.8, 3447.0], [70.9, 3447.0], [71.0, 3455.0], [71.1, 3455.0], [71.2, 3455.0], [71.3, 3455.0], [71.4, 3455.0], [71.5, 3455.0], [71.6, 3455.0], [71.7, 3455.0], [71.8, 3455.0], [71.9, 3455.0], [72.0, 3474.0], [72.1, 3474.0], [72.2, 3474.0], [72.3, 3474.0], [72.4, 3474.0], [72.5, 3474.0], [72.6, 3474.0], [72.7, 3474.0], [72.8, 3474.0], [72.9, 3474.0], [73.0, 3501.0], [73.1, 3501.0], [73.2, 3501.0], [73.3, 3501.0], [73.4, 3501.0], [73.5, 3501.0], [73.6, 3501.0], [73.7, 3501.0], [73.8, 3501.0], [73.9, 3501.0], [74.0, 3511.0], [74.1, 3511.0], [74.2, 3511.0], [74.3, 3511.0], [74.4, 3511.0], [74.5, 3511.0], [74.6, 3511.0], [74.7, 3511.0], [74.8, 3511.0], [74.9, 3511.0], [75.0, 3558.0], [75.1, 3558.0], [75.2, 3558.0], [75.3, 3558.0], [75.4, 3558.0], [75.5, 3558.0], [75.6, 3558.0], [75.7, 3558.0], [75.8, 3558.0], [75.9, 3558.0], [76.0, 3563.0], [76.1, 3563.0], [76.2, 3563.0], [76.3, 3563.0], [76.4, 3563.0], [76.5, 3563.0], [76.6, 3563.0], [76.7, 3563.0], [76.8, 3563.0], [76.9, 3563.0], [77.0, 3567.0], [77.1, 3567.0], [77.2, 3567.0], [77.3, 3567.0], [77.4, 3567.0], [77.5, 3567.0], [77.6, 3567.0], [77.7, 3567.0], [77.8, 3567.0], [77.9, 3567.0], [78.0, 3574.0], [78.1, 3574.0], [78.2, 3574.0], [78.3, 3574.0], [78.4, 3574.0], [78.5, 3574.0], [78.6, 3574.0], [78.7, 3574.0], [78.8, 3574.0], [78.9, 3574.0], [79.0, 3574.0], [79.1, 3574.0], [79.2, 3574.0], [79.3, 3574.0], [79.4, 3574.0], [79.5, 3574.0], [79.6, 3574.0], [79.7, 3574.0], [79.8, 3574.0], [79.9, 3574.0], [80.0, 3594.0], [80.1, 3594.0], [80.2, 3594.0], [80.3, 3594.0], [80.4, 3594.0], [80.5, 3594.0], [80.6, 3594.0], [80.7, 3594.0], [80.8, 3594.0], [80.9, 3594.0], [81.0, 3624.0], [81.1, 3624.0], [81.2, 3624.0], [81.3, 3624.0], [81.4, 3624.0], [81.5, 3624.0], [81.6, 3624.0], [81.7, 3624.0], [81.8, 3624.0], [81.9, 3624.0], [82.0, 3663.0], [82.1, 3663.0], [82.2, 3663.0], [82.3, 3663.0], [82.4, 3663.0], [82.5, 3663.0], [82.6, 3663.0], [82.7, 3663.0], [82.8, 3663.0], [82.9, 3663.0], [83.0, 3737.0], [83.1, 3737.0], [83.2, 3737.0], [83.3, 3737.0], [83.4, 3737.0], [83.5, 3737.0], [83.6, 3737.0], [83.7, 3737.0], [83.8, 3737.0], [83.9, 3737.0], [84.0, 3740.0], [84.1, 3740.0], [84.2, 3740.0], [84.3, 3740.0], [84.4, 3740.0], [84.5, 3740.0], [84.6, 3740.0], [84.7, 3740.0], [84.8, 3740.0], [84.9, 3740.0], [85.0, 3761.0], [85.1, 3761.0], [85.2, 3761.0], [85.3, 3761.0], [85.4, 3761.0], [85.5, 3761.0], [85.6, 3761.0], [85.7, 3761.0], [85.8, 3761.0], [85.9, 3761.0], [86.0, 3853.0], [86.1, 3853.0], [86.2, 3853.0], [86.3, 3853.0], [86.4, 3853.0], [86.5, 3853.0], [86.6, 3853.0], [86.7, 3853.0], [86.8, 3853.0], [86.9, 3853.0], [87.0, 3891.0], [87.1, 3891.0], [87.2, 3891.0], [87.3, 3891.0], [87.4, 3891.0], [87.5, 3891.0], [87.6, 3891.0], [87.7, 3891.0], [87.8, 3891.0], [87.9, 3891.0], [88.0, 3907.0], [88.1, 3907.0], [88.2, 3907.0], [88.3, 3907.0], [88.4, 3907.0], [88.5, 3907.0], [88.6, 3907.0], [88.7, 3907.0], [88.8, 3907.0], [88.9, 3907.0], [89.0, 3909.0], [89.1, 3909.0], [89.2, 3909.0], [89.3, 3909.0], [89.4, 3909.0], [89.5, 3909.0], [89.6, 3909.0], [89.7, 3909.0], [89.8, 3909.0], [89.9, 3909.0], [90.0, 4022.0], [90.1, 4022.0], [90.2, 4022.0], [90.3, 4022.0], [90.4, 4022.0], [90.5, 4022.0], [90.6, 4022.0], [90.7, 4022.0], [90.8, 4022.0], [90.9, 4022.0], [91.0, 4038.0], [91.1, 4038.0], [91.2, 4038.0], [91.3, 4038.0], [91.4, 4038.0], [91.5, 4038.0], [91.6, 4038.0], [91.7, 4038.0], [91.8, 4038.0], [91.9, 4038.0], [92.0, 4065.0], [92.1, 4065.0], [92.2, 4065.0], [92.3, 4065.0], [92.4, 4065.0], [92.5, 4065.0], [92.6, 4065.0], [92.7, 4065.0], [92.8, 4065.0], [92.9, 4065.0], [93.0, 4151.0], [93.1, 4151.0], [93.2, 4151.0], [93.3, 4151.0], [93.4, 4151.0], [93.5, 4151.0], [93.6, 4151.0], [93.7, 4151.0], [93.8, 4151.0], [93.9, 4151.0], [94.0, 4285.0], [94.1, 4285.0], [94.2, 4285.0], [94.3, 4285.0], [94.4, 4285.0], [94.5, 4285.0], [94.6, 4285.0], [94.7, 4285.0], [94.8, 4285.0], [94.9, 4285.0], [95.0, 4332.0], [95.1, 4332.0], [95.2, 4332.0], [95.3, 4332.0], [95.4, 4332.0], [95.5, 4332.0], [95.6, 4332.0], [95.7, 4332.0], [95.8, 4332.0], [95.9, 4332.0], [96.0, 4333.0], [96.1, 4333.0], [96.2, 4333.0], [96.3, 4333.0], [96.4, 4333.0], [96.5, 4333.0], [96.6, 4333.0], [96.7, 4333.0], [96.8, 4333.0], [96.9, 4333.0], [97.0, 4366.0], [97.1, 4366.0], [97.2, 4366.0], [97.3, 4366.0], [97.4, 4366.0], [97.5, 4366.0], [97.6, 4366.0], [97.7, 4366.0], [97.8, 4366.0], [97.9, 4366.0], [98.0, 4624.0], [98.1, 4624.0], [98.2, 4624.0], [98.3, 4624.0], [98.4, 4624.0], [98.5, 4624.0], [98.6, 4624.0], [98.7, 4624.0], [98.8, 4624.0], [98.9, 4624.0], [99.0, 4670.0], [99.1, 4670.0], [99.2, 4670.0], [99.3, 4670.0], [99.4, 4670.0], [99.5, 4670.0], [99.6, 4670.0], [99.7, 4670.0], [99.8, 4670.0], [99.9, 4670.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1600.0, "maxY": 10.0, "series": [{"data": [[14900.0, 1.0], [24700.0, 1.0], [30900.0, 1.0], [31300.0, 1.0], [32400.0, 1.0], [36500.0, 1.0], [35200.0, 2.0], [35900.0, 1.0], [35400.0, 1.0], [36000.0, 2.0], [35700.0, 2.0], [35600.0, 1.0], [36400.0, 2.0], [36600.0, 1.0], [36700.0, 3.0], [36800.0, 2.0], [36200.0, 1.0], [37300.0, 3.0], [37000.0, 2.0], [37100.0, 4.0], [36900.0, 3.0], [37700.0, 9.0], [37800.0, 7.0], [37500.0, 4.0], [37600.0, 6.0], [37900.0, 6.0], [38600.0, 2.0], [38700.0, 1.0], [38400.0, 3.0], [38500.0, 2.0], [38900.0, 2.0], [38100.0, 7.0], [38300.0, 2.0], [38200.0, 4.0], [38000.0, 6.0], [39100.0, 2.0], [39000.0, 1.0]], "isOverall": false, "label": "Semester SchoolWise", "isController": false}, {"data": [[1600.0, 1.0], [1700.0, 1.0], [1800.0, 3.0], [2000.0, 1.0], [2100.0, 2.0], [2200.0, 4.0], [2300.0, 5.0], [2400.0, 7.0], [2500.0, 5.0], [2600.0, 4.0], [2700.0, 5.0], [2800.0, 4.0], [2900.0, 2.0], [3000.0, 8.0], [3100.0, 2.0], [3200.0, 10.0], [3300.0, 5.0], [3400.0, 4.0], [3500.0, 8.0], [3600.0, 2.0], [3700.0, 3.0], [3800.0, 2.0], [3900.0, 2.0], [4000.0, 3.0], [4100.0, 1.0], [4200.0, 1.0], [4300.0, 3.0], [4600.0, 2.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 39100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 200.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 200.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 200.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 37.86956521739131, "minX": 1.59430902E12, "maxY": 96.45038167938935, "series": [{"data": [[1.59430902E12, 96.45038167938935], [1.59430908E12, 37.86956521739131]], "isOverall": false, "label": "Semester Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59430908E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3069.4400000000005, "minX": 1.0, "maxY": 39073.5, "series": [{"data": [[2.0, 38187.0], [3.0, 38268.0], [4.0, 38015.0], [5.0, 38169.0], [6.0, 37910.0], [7.0, 38058.0], [8.0, 38227.0], [9.0, 37792.0], [10.0, 37956.0], [11.0, 37769.0], [12.0, 37761.0], [13.0, 38106.0], [14.0, 37916.0], [15.0, 37715.0], [16.0, 37808.0], [17.0, 38564.0], [18.0, 37384.0], [19.0, 37782.0], [20.0, 37745.0], [21.0, 37899.0], [22.0, 38063.0], [24.0, 38848.0], [25.0, 37825.0], [26.0, 37735.0], [27.0, 38050.0], [28.0, 38188.0], [29.0, 38448.0], [30.0, 37153.0], [31.0, 37851.0], [33.0, 37644.0], [32.0, 38159.0], [35.0, 37823.0], [34.0, 37833.0], [46.0, 39073.5], [49.0, 37985.0], [48.0, 38986.0], [57.0, 37751.6], [56.0, 38209.142857142855], [59.0, 38299.6], [58.0, 38312.0], [61.0, 38117.0], [60.0, 37841.0], [63.0, 37630.0], [62.0, 37351.0], [67.0, 37125.0], [66.0, 37557.0], [65.0, 37943.0], [64.0, 37335.0], [71.0, 37628.0], [70.0, 37030.0], [69.0, 36907.0], [68.0, 37526.0], [75.0, 36850.0], [74.0, 37131.0], [73.0, 36981.0], [72.0, 37516.0], [79.0, 37009.0], [78.0, 37156.0], [77.0, 36909.0], [76.0, 36776.0], [83.0, 36213.0], [82.0, 36756.0], [81.0, 36459.0], [80.0, 36790.0], [87.0, 36549.0], [86.0, 36060.0], [85.0, 36400.0], [84.0, 36662.0], [91.0, 35253.0], [90.0, 35776.0], [89.0, 35635.0], [88.0, 35780.0], [95.0, 35249.0], [94.0, 35953.0], [93.0, 35494.0], [92.0, 36055.0], [99.0, 24733.0], [98.0, 30975.0], [97.0, 31300.0], [96.0, 32428.0], [100.0, 14969.0], [1.0, 38114.0]], "isOverall": false, "label": "Semester SchoolWise", "isController": false}, {"data": [[52.48, 37047.22999999998]], "isOverall": false, "label": "Semester SchoolWise-Aggregated", "isController": false}, {"data": [[100.0, 3069.4400000000005]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[100.0, 3069.4400000000005]], "isOverall": false, "label": "Login-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 911.5166666666667, "minX": 1.59430902E12, "maxY": 8427967.05, "series": [{"data": [[1.59430902E12, 3788319.6166666667], [1.59430908E12, 8427967.05]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.59430902E12, 911.5166666666667], [1.59430908E12, 1105.15]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59430908E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3069.4400000000005, "minX": 1.59430902E12, "maxY": 38003.594202898545, "series": [{"data": [[1.59430902E12, 34918.54838709677], [1.59430908E12, 38003.594202898545]], "isOverall": false, "label": "Semester SchoolWise", "isController": false}, {"data": [[1.59430902E12, 3069.4400000000005]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59430908E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3069.4, "minX": 1.59430902E12, "maxY": 19552.753623188397, "series": [{"data": [[1.59430902E12, 8945.967741935483], [1.59430908E12, 19552.753623188397]], "isOverall": false, "label": "Semester SchoolWise", "isController": false}, {"data": [[1.59430902E12, 3069.4]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59430908E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3.8695652173913047, "minX": 1.59430902E12, "maxY": 1774.6600000000005, "series": [{"data": [[1.59430902E12, 4.193548387096774], [1.59430908E12, 3.8695652173913047]], "isOverall": false, "label": "Semester SchoolWise", "isController": false}, {"data": [[1.59430902E12, 1774.6600000000005]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59430908E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1657.0, "minX": 1.59430902E12, "maxY": 39150.0, "series": [{"data": [[1.59430902E12, 37628.0], [1.59430908E12, 39150.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.59430902E12, 1657.0], [1.59430908E12, 36840.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.59430902E12, 36639.4], [1.59430908E12, 38689.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.59430902E12, 37592.16], [1.59430908E12, 39150.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.59430902E12, 36992.2], [1.59430908E12, 38993.5]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59430908E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2219.0, "minX": 1.0, "maxY": 38015.0, "series": [{"data": [[1.0, 24733.0], [2.0, 31864.0], [16.0, 37662.5], [5.0, 2219.0], [44.0, 3534.5], [11.0, 37009.0], [48.0, 2603.5], [3.0, 19959.5], [12.0, 36136.5], [53.0, 38015.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 53.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2216.0, "minX": 1.0, "maxY": 21848.0, "series": [{"data": [[1.0, 5500.0], [2.0, 3759.0], [16.0, 15912.0], [5.0, 2216.0], [44.0, 3534.5], [11.0, 8698.0], [48.0, 2603.5], [3.0, 4647.0], [12.0, 9922.5], [53.0, 21848.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 53.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.3333333333333335, "minX": 1.59430902E12, "maxY": 3.3333333333333335, "series": [{"data": [[1.59430902E12, 3.3333333333333335]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59430902E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.15, "minX": 1.59430902E12, "maxY": 2.183333333333333, "series": [{"data": [[1.59430902E12, 2.183333333333333], [1.59430908E12, 1.15]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59430908E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.5166666666666667, "minX": 1.59430902E12, "maxY": 1.6666666666666667, "series": [{"data": [[1.59430902E12, 0.5166666666666667], [1.59430908E12, 1.15]], "isOverall": false, "label": "Semester SchoolWise-success", "isController": false}, {"data": [[1.59430902E12, 1.6666666666666667]], "isOverall": false, "label": "Login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59430908E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.15, "minX": 1.59430902E12, "maxY": 2.183333333333333, "series": [{"data": [[1.59430902E12, 2.183333333333333], [1.59430908E12, 1.15]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59430908E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

