/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2217.0, "minX": 0.0, "maxY": 108255.0, "series": [{"data": [[0.0, 5534.0], [0.1, 5534.0], [0.2, 5534.0], [0.3, 5534.0], [0.4, 5570.0], [0.5, 5570.0], [0.6, 5570.0], [0.7, 5791.0], [0.8, 5791.0], [0.9, 5791.0], [1.0, 5953.0], [1.1, 5953.0], [1.2, 5953.0], [1.3, 5953.0], [1.4, 5958.0], [1.5, 5958.0], [1.6, 5958.0], [1.7, 5993.0], [1.8, 5993.0], [1.9, 5993.0], [2.0, 6042.0], [2.1, 6042.0], [2.2, 6042.0], [2.3, 6042.0], [2.4, 6092.0], [2.5, 6092.0], [2.6, 6092.0], [2.7, 6128.0], [2.8, 6128.0], [2.9, 6128.0], [3.0, 8780.0], [3.1, 8780.0], [3.2, 8780.0], [3.3, 8780.0], [3.4, 48277.0], [3.5, 48277.0], [3.6, 48277.0], [3.7, 60010.0], [3.8, 60010.0], [3.9, 60010.0], [4.0, 60011.0], [4.1, 60011.0], [4.2, 60011.0], [4.3, 60011.0], [4.4, 60011.0], [4.5, 60011.0], [4.6, 60011.0], [4.7, 60011.0], [4.8, 60011.0], [4.9, 60011.0], [5.0, 60011.0], [5.1, 60011.0], [5.2, 60011.0], [5.3, 60011.0], [5.4, 60012.0], [5.5, 60012.0], [5.6, 60012.0], [5.7, 60012.0], [5.8, 60012.0], [5.9, 60012.0], [6.0, 60012.0], [6.1, 60012.0], [6.2, 60012.0], [6.3, 60012.0], [6.4, 60013.0], [6.5, 60013.0], [6.6, 60013.0], [6.7, 60013.0], [6.8, 60013.0], [6.9, 60013.0], [7.0, 60013.0], [7.1, 60013.0], [7.2, 60013.0], [7.3, 60013.0], [7.4, 60014.0], [7.5, 60014.0], [7.6, 60014.0], [7.7, 60015.0], [7.8, 60015.0], [7.9, 60015.0], [8.0, 60016.0], [8.1, 60016.0], [8.2, 60016.0], [8.3, 60016.0], [8.4, 60016.0], [8.5, 60016.0], [8.6, 60016.0], [8.7, 60016.0], [8.8, 60016.0], [8.9, 60016.0], [9.0, 60017.0], [9.1, 60017.0], [9.2, 60017.0], [9.3, 60017.0], [9.4, 60017.0], [9.5, 60017.0], [9.6, 60017.0], [9.7, 60017.0], [9.8, 60017.0], [9.9, 60017.0], [10.0, 60019.0], [10.1, 60019.0], [10.2, 60019.0], [10.3, 60019.0], [10.4, 60019.0], [10.5, 60019.0], [10.6, 60019.0], [10.7, 60021.0], [10.8, 60021.0], [10.9, 60021.0], [11.0, 60022.0], [11.1, 60022.0], [11.2, 60022.0], [11.3, 60022.0], [11.4, 60022.0], [11.5, 60022.0], [11.6, 60022.0], [11.7, 60023.0], [11.8, 60023.0], [11.9, 60023.0], [12.0, 60023.0], [12.1, 60023.0], [12.2, 60023.0], [12.3, 60023.0], [12.4, 60025.0], [12.5, 60025.0], [12.6, 60025.0], [12.7, 60025.0], [12.8, 60025.0], [12.9, 60025.0], [13.0, 60025.0], [13.1, 60025.0], [13.2, 60025.0], [13.3, 60025.0], [13.4, 60026.0], [13.5, 60026.0], [13.6, 60026.0], [13.7, 60028.0], [13.8, 60028.0], [13.9, 60028.0], [14.0, 60028.0], [14.1, 60028.0], [14.2, 60028.0], [14.3, 60028.0], [14.4, 60029.0], [14.5, 60029.0], [14.6, 60029.0], [14.7, 60030.0], [14.8, 60030.0], [14.9, 60030.0], [15.0, 60033.0], [15.1, 60033.0], [15.2, 60033.0], [15.3, 60033.0], [15.4, 60033.0], [15.5, 60033.0], [15.6, 60033.0], [15.7, 60034.0], [15.8, 60034.0], [15.9, 60034.0], [16.0, 60040.0], [16.1, 60040.0], [16.2, 60040.0], [16.3, 60040.0], [16.4, 60040.0], [16.5, 60040.0], [16.6, 60040.0], [16.7, 60041.0], [16.8, 60041.0], [16.9, 60041.0], [17.0, 60043.0], [17.1, 60043.0], [17.2, 60043.0], [17.3, 60043.0], [17.4, 60044.0], [17.5, 60044.0], [17.6, 60044.0], [17.7, 60045.0], [17.8, 60045.0], [17.9, 60045.0], [18.0, 60045.0], [18.1, 60045.0], [18.2, 60045.0], [18.3, 60045.0], [18.4, 60046.0], [18.5, 60046.0], [18.6, 60046.0], [18.7, 60047.0], [18.8, 60047.0], [18.9, 60047.0], [19.0, 60048.0], [19.1, 60048.0], [19.2, 60048.0], [19.3, 60048.0], [19.4, 60048.0], [19.5, 60048.0], [19.6, 60048.0], [19.7, 60052.0], [19.8, 60052.0], [19.9, 60052.0], [20.0, 60062.0], [20.1, 60062.0], [20.2, 60062.0], [20.3, 60062.0], [20.4, 60069.0], [20.5, 60069.0], [20.6, 60069.0], [20.7, 60071.0], [20.8, 60071.0], [20.9, 60071.0], [21.0, 60074.0], [21.1, 60074.0], [21.2, 60074.0], [21.3, 60074.0], [21.4, 60078.0], [21.5, 60078.0], [21.6, 60078.0], [21.7, 60242.0], [21.8, 60242.0], [21.9, 60242.0], [22.0, 60285.0], [22.1, 60285.0], [22.2, 60285.0], [22.3, 60285.0], [22.4, 60287.0], [22.5, 60287.0], [22.6, 60287.0], [22.7, 60292.0], [22.8, 60292.0], [22.9, 60292.0], [23.0, 60294.0], [23.1, 60294.0], [23.2, 60294.0], [23.3, 60294.0], [23.4, 60294.0], [23.5, 60294.0], [23.6, 60294.0], [23.7, 60296.0], [23.8, 60296.0], [23.9, 60296.0], [24.0, 60298.0], [24.1, 60298.0], [24.2, 60298.0], [24.3, 60298.0], [24.4, 60299.0], [24.5, 60299.0], [24.6, 60299.0], [24.7, 60299.0], [24.8, 60299.0], [24.9, 60299.0], [25.0, 60302.0], [25.1, 60302.0], [25.2, 60302.0], [25.3, 60302.0], [25.4, 60302.0], [25.5, 60302.0], [25.6, 60302.0], [25.7, 60304.0], [25.8, 60304.0], [25.9, 60304.0], [26.0, 60304.0], [26.1, 60304.0], [26.2, 60304.0], [26.3, 60304.0], [26.4, 60305.0], [26.5, 60305.0], [26.6, 60305.0], [26.7, 60308.0], [26.8, 60308.0], [26.9, 60308.0], [27.0, 60309.0], [27.1, 60309.0], [27.2, 60309.0], [27.3, 60309.0], [27.4, 60310.0], [27.5, 60310.0], [27.6, 60310.0], [27.7, 60310.0], [27.8, 60310.0], [27.9, 60310.0], [28.0, 60311.0], [28.1, 60311.0], [28.2, 60311.0], [28.3, 60311.0], [28.4, 60315.0], [28.5, 60315.0], [28.6, 60315.0], [28.7, 60324.0], [28.8, 60324.0], [28.9, 60324.0], [29.0, 60327.0], [29.1, 60327.0], [29.2, 60327.0], [29.3, 60327.0], [29.4, 60332.0], [29.5, 60332.0], [29.6, 60332.0], [29.7, 60338.0], [29.8, 60338.0], [29.9, 60338.0], [30.0, 60338.0], [30.1, 60338.0], [30.2, 60338.0], [30.3, 60338.0], [30.4, 70308.0], [30.5, 70308.0], [30.6, 70308.0], [30.7, 71584.0], [30.8, 71584.0], [30.9, 71584.0], [31.0, 81629.0], [31.1, 81629.0], [31.2, 81629.0], [31.3, 81629.0], [31.4, 81842.0], [31.5, 81842.0], [31.6, 81842.0], [31.7, 81987.0], [31.8, 81987.0], [31.9, 81987.0], [32.0, 82904.0], [32.1, 82904.0], [32.2, 82904.0], [32.3, 82904.0], [32.4, 83565.0], [32.5, 83565.0], [32.6, 83565.0], [32.7, 84273.0], [32.8, 84273.0], [32.9, 84273.0], [33.0, 85556.0], [33.1, 85556.0], [33.2, 85556.0], [33.3, 85556.0], [33.4, 85660.0], [33.5, 85660.0], [33.6, 85660.0], [33.7, 85925.0], [33.8, 85925.0], [33.9, 85925.0], [34.0, 86459.0], [34.1, 86459.0], [34.2, 86459.0], [34.3, 86459.0], [34.4, 86599.0], [34.5, 86599.0], [34.6, 86599.0], [34.7, 86732.0], [34.8, 86732.0], [34.9, 86732.0], [35.0, 86951.0], [35.1, 86951.0], [35.2, 86951.0], [35.3, 86951.0], [35.4, 87359.0], [35.5, 87359.0], [35.6, 87359.0], [35.7, 87896.0], [35.8, 87896.0], [35.9, 87896.0], [36.0, 88361.0], [36.1, 88361.0], [36.2, 88361.0], [36.3, 88361.0], [36.4, 88524.0], [36.5, 88524.0], [36.6, 88524.0], [36.7, 88563.0], [36.8, 88563.0], [36.9, 88563.0], [37.0, 88563.0], [37.1, 88564.0], [37.2, 88564.0], [37.3, 88564.0], [37.4, 88681.0], [37.5, 88681.0], [37.6, 88681.0], [37.7, 88812.0], [37.8, 88812.0], [37.9, 88812.0], [38.0, 88812.0], [38.1, 89556.0], [38.2, 89556.0], [38.3, 89556.0], [38.4, 89911.0], [38.5, 89911.0], [38.6, 89911.0], [38.7, 91506.0], [38.8, 91506.0], [38.9, 91506.0], [39.0, 91506.0], [39.1, 92358.0], [39.2, 92358.0], [39.3, 92358.0], [39.4, 92381.0], [39.5, 92381.0], [39.6, 92381.0], [39.7, 92392.0], [39.8, 92392.0], [39.9, 92392.0], [40.0, 92392.0], [40.1, 92836.0], [40.2, 92836.0], [40.3, 92836.0], [40.4, 93208.0], [40.5, 93208.0], [40.6, 93208.0], [40.7, 93766.0], [40.8, 93766.0], [40.9, 93766.0], [41.0, 93766.0], [41.1, 94085.0], [41.2, 94085.0], [41.3, 94085.0], [41.4, 94132.0], [41.5, 94132.0], [41.6, 94132.0], [41.7, 94460.0], [41.8, 94460.0], [41.9, 94460.0], [42.0, 94460.0], [42.1, 94810.0], [42.2, 94810.0], [42.3, 94810.0], [42.4, 94999.0], [42.5, 94999.0], [42.6, 94999.0], [42.7, 95028.0], [42.8, 95028.0], [42.9, 95028.0], [43.0, 95028.0], [43.1, 95056.0], [43.2, 95056.0], [43.3, 95056.0], [43.4, 95082.0], [43.5, 95082.0], [43.6, 95082.0], [43.7, 95276.0], [43.8, 95276.0], [43.9, 95276.0], [44.0, 95276.0], [44.1, 95482.0], [44.2, 95482.0], [44.3, 95482.0], [44.4, 95640.0], [44.5, 95640.0], [44.6, 95640.0], [44.7, 95775.0], [44.8, 95775.0], [44.9, 95775.0], [45.0, 95775.0], [45.1, 95841.0], [45.2, 95841.0], [45.3, 95841.0], [45.4, 95952.0], [45.5, 95952.0], [45.6, 95952.0], [45.7, 95987.0], [45.8, 95987.0], [45.9, 95987.0], [46.0, 95987.0], [46.1, 96411.0], [46.2, 96411.0], [46.3, 96411.0], [46.4, 96501.0], [46.5, 96501.0], [46.6, 96501.0], [46.7, 96536.0], [46.8, 96536.0], [46.9, 96536.0], [47.0, 96536.0], [47.1, 96582.0], [47.2, 96582.0], [47.3, 96582.0], [47.4, 96644.0], [47.5, 96644.0], [47.6, 96644.0], [47.7, 96876.0], [47.8, 96876.0], [47.9, 96876.0], [48.0, 96876.0], [48.1, 97246.0], [48.2, 97246.0], [48.3, 97246.0], [48.4, 97506.0], [48.5, 97506.0], [48.6, 97506.0], [48.7, 97607.0], [48.8, 97607.0], [48.9, 97607.0], [49.0, 97607.0], [49.1, 97960.0], [49.2, 97960.0], [49.3, 97960.0], [49.4, 98233.0], [49.5, 98233.0], [49.6, 98233.0], [49.7, 98239.0], [49.8, 98239.0], [49.9, 98239.0], [50.0, 98239.0], [50.1, 98604.0], [50.2, 98604.0], [50.3, 98604.0], [50.4, 98643.0], [50.5, 98643.0], [50.6, 98643.0], [50.7, 98717.0], [50.8, 98717.0], [50.9, 98717.0], [51.0, 98717.0], [51.1, 98850.0], [51.2, 98850.0], [51.3, 98850.0], [51.4, 98948.0], [51.5, 98948.0], [51.6, 98948.0], [51.7, 99164.0], [51.8, 99164.0], [51.9, 99164.0], [52.0, 99164.0], [52.1, 99377.0], [52.2, 99377.0], [52.3, 99377.0], [52.4, 99622.0], [52.5, 99622.0], [52.6, 99622.0], [52.7, 99635.0], [52.8, 99635.0], [52.9, 99635.0], [53.0, 99635.0], [53.1, 99768.0], [53.2, 99768.0], [53.3, 99768.0], [53.4, 99771.0], [53.5, 99771.0], [53.6, 99771.0], [53.7, 99953.0], [53.8, 99953.0], [53.9, 99953.0], [54.0, 99953.0], [54.1, 99991.0], [54.2, 99991.0], [54.3, 99991.0], [54.4, 100003.0], [54.5, 100003.0], [54.6, 100003.0], [54.7, 100010.0], [54.8, 100010.0], [54.9, 100010.0], [55.0, 100010.0], [55.1, 100106.0], [55.2, 100106.0], [55.3, 100106.0], [55.4, 100184.0], [55.5, 100184.0], [55.6, 100184.0], [55.7, 100199.0], [55.8, 100199.0], [55.9, 100199.0], [56.0, 100199.0], [56.1, 100251.0], [56.2, 100251.0], [56.3, 100251.0], [56.4, 100398.0], [56.5, 100398.0], [56.6, 100398.0], [56.7, 100540.0], [56.8, 100540.0], [56.9, 100540.0], [57.0, 100540.0], [57.1, 100556.0], [57.2, 100556.0], [57.3, 100556.0], [57.4, 100610.0], [57.5, 100610.0], [57.6, 100610.0], [57.7, 100828.0], [57.8, 100828.0], [57.9, 100828.0], [58.0, 100828.0], [58.1, 100917.0], [58.2, 100917.0], [58.3, 100917.0], [58.4, 100978.0], [58.5, 100978.0], [58.6, 100978.0], [58.7, 101028.0], [58.8, 101028.0], [58.9, 101028.0], [59.0, 101028.0], [59.1, 101043.0], [59.2, 101043.0], [59.3, 101043.0], [59.4, 101073.0], [59.5, 101073.0], [59.6, 101073.0], [59.7, 101090.0], [59.8, 101090.0], [59.9, 101090.0], [60.0, 101090.0], [60.1, 101205.0], [60.2, 101205.0], [60.3, 101205.0], [60.4, 101471.0], [60.5, 101471.0], [60.6, 101471.0], [60.7, 101911.0], [60.8, 101911.0], [60.9, 101911.0], [61.0, 101911.0], [61.1, 102073.0], [61.2, 102073.0], [61.3, 102073.0], [61.4, 102180.0], [61.5, 102180.0], [61.6, 102180.0], [61.7, 102259.0], [61.8, 102259.0], [61.9, 102259.0], [62.0, 102259.0], [62.1, 102376.0], [62.2, 102376.0], [62.3, 102376.0], [62.4, 102382.0], [62.5, 102382.0], [62.6, 102382.0], [62.7, 102389.0], [62.8, 102389.0], [62.9, 102389.0], [63.0, 102389.0], [63.1, 102431.0], [63.2, 102431.0], [63.3, 102431.0], [63.4, 102450.0], [63.5, 102450.0], [63.6, 102450.0], [63.7, 102507.0], [63.8, 102507.0], [63.9, 102507.0], [64.0, 102507.0], [64.1, 102570.0], [64.2, 102570.0], [64.3, 102570.0], [64.4, 102643.0], [64.5, 102643.0], [64.6, 102643.0], [64.7, 102701.0], [64.8, 102701.0], [64.9, 102701.0], [65.0, 102701.0], [65.1, 102814.0], [65.2, 102814.0], [65.3, 102814.0], [65.4, 102905.0], [65.5, 102905.0], [65.6, 102905.0], [65.7, 102936.0], [65.8, 102936.0], [65.9, 102936.0], [66.0, 102936.0], [66.1, 103023.0], [66.2, 103023.0], [66.3, 103023.0], [66.4, 103027.0], [66.5, 103027.0], [66.6, 103027.0], [66.7, 103103.0], [66.8, 103103.0], [66.9, 103103.0], [67.0, 103103.0], [67.1, 103227.0], [67.2, 103227.0], [67.3, 103227.0], [67.4, 103367.0], [67.5, 103367.0], [67.6, 103367.0], [67.7, 103419.0], [67.8, 103419.0], [67.9, 103419.0], [68.0, 103419.0], [68.1, 103448.0], [68.2, 103448.0], [68.3, 103448.0], [68.4, 103466.0], [68.5, 103466.0], [68.6, 103466.0], [68.7, 103467.0], [68.8, 103467.0], [68.9, 103467.0], [69.0, 103467.0], [69.1, 103585.0], [69.2, 103585.0], [69.3, 103585.0], [69.4, 103743.0], [69.5, 103743.0], [69.6, 103743.0], [69.7, 103784.0], [69.8, 103784.0], [69.9, 103784.0], [70.0, 103784.0], [70.1, 103863.0], [70.2, 103863.0], [70.3, 103863.0], [70.4, 103933.0], [70.5, 103933.0], [70.6, 103933.0], [70.7, 103976.0], [70.8, 103976.0], [70.9, 103976.0], [71.0, 103976.0], [71.1, 103996.0], [71.2, 103996.0], [71.3, 103996.0], [71.4, 104034.0], [71.5, 104034.0], [71.6, 104034.0], [71.7, 104066.0], [71.8, 104066.0], [71.9, 104066.0], [72.0, 104066.0], [72.1, 104112.0], [72.2, 104112.0], [72.3, 104112.0], [72.4, 104250.0], [72.5, 104250.0], [72.6, 104250.0], [72.7, 104289.0], [72.8, 104289.0], [72.9, 104289.0], [73.0, 104289.0], [73.1, 104305.0], [73.2, 104305.0], [73.3, 104305.0], [73.4, 104320.0], [73.5, 104320.0], [73.6, 104320.0], [73.7, 104615.0], [73.8, 104615.0], [73.9, 104615.0], [74.0, 104615.0], [74.1, 104719.0], [74.2, 104719.0], [74.3, 104719.0], [74.4, 104761.0], [74.5, 104761.0], [74.6, 104761.0], [74.7, 104792.0], [74.8, 104792.0], [74.9, 104792.0], [75.0, 104792.0], [75.1, 104823.0], [75.2, 104823.0], [75.3, 104823.0], [75.4, 104824.0], [75.5, 104824.0], [75.6, 104824.0], [75.7, 104835.0], [75.8, 104835.0], [75.9, 104835.0], [76.0, 104835.0], [76.1, 104967.0], [76.2, 104967.0], [76.3, 104967.0], [76.4, 104998.0], [76.5, 104998.0], [76.6, 104998.0], [76.7, 105076.0], [76.8, 105076.0], [76.9, 105076.0], [77.0, 105076.0], [77.1, 105091.0], [77.2, 105091.0], [77.3, 105091.0], [77.4, 105185.0], [77.5, 105185.0], [77.6, 105185.0], [77.7, 105188.0], [77.8, 105188.0], [77.9, 105188.0], [78.0, 105192.0], [78.1, 105192.0], [78.2, 105192.0], [78.3, 105192.0], [78.4, 105204.0], [78.5, 105204.0], [78.6, 105204.0], [78.7, 105207.0], [78.8, 105207.0], [78.9, 105207.0], [79.0, 105219.0], [79.1, 105219.0], [79.2, 105219.0], [79.3, 105219.0], [79.4, 105264.0], [79.5, 105264.0], [79.6, 105264.0], [79.7, 105270.0], [79.8, 105270.0], [79.9, 105270.0], [80.0, 105364.0], [80.1, 105364.0], [80.2, 105364.0], [80.3, 105364.0], [80.4, 105409.0], [80.5, 105409.0], [80.6, 105409.0], [80.7, 105419.0], [80.8, 105419.0], [80.9, 105419.0], [81.0, 105446.0], [81.1, 105446.0], [81.2, 105446.0], [81.3, 105446.0], [81.4, 105456.0], [81.5, 105456.0], [81.6, 105456.0], [81.7, 105475.0], [81.8, 105475.0], [81.9, 105475.0], [82.0, 105516.0], [82.1, 105516.0], [82.2, 105516.0], [82.3, 105516.0], [82.4, 105523.0], [82.5, 105523.0], [82.6, 105523.0], [82.7, 105531.0], [82.8, 105531.0], [82.9, 105531.0], [83.0, 105538.0], [83.1, 105538.0], [83.2, 105538.0], [83.3, 105538.0], [83.4, 105540.0], [83.5, 105540.0], [83.6, 105540.0], [83.7, 105580.0], [83.8, 105580.0], [83.9, 105580.0], [84.0, 105586.0], [84.1, 105586.0], [84.2, 105586.0], [84.3, 105586.0], [84.4, 105594.0], [84.5, 105594.0], [84.6, 105594.0], [84.7, 105608.0], [84.8, 105608.0], [84.9, 105608.0], [85.0, 105608.0], [85.1, 105608.0], [85.2, 105608.0], [85.3, 105608.0], [85.4, 105658.0], [85.5, 105658.0], [85.6, 105658.0], [85.7, 105689.0], [85.8, 105689.0], [85.9, 105689.0], [86.0, 105703.0], [86.1, 105703.0], [86.2, 105703.0], [86.3, 105703.0], [86.4, 105740.0], [86.5, 105740.0], [86.6, 105740.0], [86.7, 105761.0], [86.8, 105761.0], [86.9, 105761.0], [87.0, 105763.0], [87.1, 105763.0], [87.2, 105763.0], [87.3, 105763.0], [87.4, 105781.0], [87.5, 105781.0], [87.6, 105781.0], [87.7, 105823.0], [87.8, 105823.0], [87.9, 105823.0], [88.0, 105904.0], [88.1, 105904.0], [88.2, 105904.0], [88.3, 105904.0], [88.4, 105925.0], [88.5, 105925.0], [88.6, 105925.0], [88.7, 105941.0], [88.8, 105941.0], [88.9, 105941.0], [89.0, 105953.0], [89.1, 105953.0], [89.2, 105953.0], [89.3, 105953.0], [89.4, 105955.0], [89.5, 105955.0], [89.6, 105955.0], [89.7, 105972.0], [89.8, 105972.0], [89.9, 105972.0], [90.0, 105976.0], [90.1, 105976.0], [90.2, 105976.0], [90.3, 105976.0], [90.4, 106030.0], [90.5, 106030.0], [90.6, 106030.0], [90.7, 106070.0], [90.8, 106070.0], [90.9, 106070.0], [91.0, 106075.0], [91.1, 106075.0], [91.2, 106075.0], [91.3, 106075.0], [91.4, 106118.0], [91.5, 106118.0], [91.6, 106118.0], [91.7, 106182.0], [91.8, 106182.0], [91.9, 106182.0], [92.0, 106229.0], [92.1, 106229.0], [92.2, 106229.0], [92.3, 106229.0], [92.4, 106288.0], [92.5, 106288.0], [92.6, 106288.0], [92.7, 106308.0], [92.8, 106308.0], [92.9, 106308.0], [93.0, 106310.0], [93.1, 106310.0], [93.2, 106310.0], [93.3, 106310.0], [93.4, 106318.0], [93.5, 106318.0], [93.6, 106318.0], [93.7, 106332.0], [93.8, 106332.0], [93.9, 106332.0], [94.0, 106441.0], [94.1, 106441.0], [94.2, 106441.0], [94.3, 106441.0], [94.4, 106460.0], [94.5, 106460.0], [94.6, 106460.0], [94.7, 106474.0], [94.8, 106474.0], [94.9, 106474.0], [95.0, 106541.0], [95.1, 106541.0], [95.2, 106541.0], [95.3, 106541.0], [95.4, 106572.0], [95.5, 106572.0], [95.6, 106572.0], [95.7, 106634.0], [95.8, 106634.0], [95.9, 106634.0], [96.0, 106642.0], [96.1, 106642.0], [96.2, 106642.0], [96.3, 106642.0], [96.4, 106744.0], [96.5, 106744.0], [96.6, 106744.0], [96.7, 106758.0], [96.8, 106758.0], [96.9, 106758.0], [97.0, 106793.0], [97.1, 106793.0], [97.2, 106793.0], [97.3, 106793.0], [97.4, 106813.0], [97.5, 106813.0], [97.6, 106813.0], [97.7, 106953.0], [97.8, 106953.0], [97.9, 106953.0], [98.0, 107227.0], [98.1, 107227.0], [98.2, 107227.0], [98.3, 107227.0], [98.4, 107505.0], [98.5, 107505.0], [98.6, 107505.0], [98.7, 107560.0], [98.8, 107560.0], [98.9, 107560.0], [99.0, 107706.0], [99.1, 107706.0], [99.2, 107706.0], [99.3, 107706.0], [99.4, 108132.0], [99.5, 108132.0], [99.6, 108132.0], [99.7, 108255.0], [99.8, 108255.0], [99.9, 108255.0]], "isOverall": false, "label": "School Infra Map SchoolWise", "isController": false}, {"data": [[0.0, 2217.0], [0.1, 2217.0], [0.2, 2217.0], [0.3, 2217.0], [0.4, 3645.0], [0.5, 3645.0], [0.6, 3645.0], [0.7, 3666.0], [0.8, 3666.0], [0.9, 3666.0], [1.0, 3737.0], [1.1, 3737.0], [1.2, 3737.0], [1.3, 3737.0], [1.4, 3738.0], [1.5, 3738.0], [1.6, 3738.0], [1.7, 3810.0], [1.8, 3810.0], [1.9, 3810.0], [2.0, 4051.0], [2.1, 4051.0], [2.2, 4051.0], [2.3, 4051.0], [2.4, 4116.0], [2.5, 4116.0], [2.6, 4116.0], [2.7, 4121.0], [2.8, 4121.0], [2.9, 4121.0], [3.0, 4130.0], [3.1, 4130.0], [3.2, 4130.0], [3.3, 4130.0], [3.4, 4142.0], [3.5, 4142.0], [3.6, 4142.0], [3.7, 4181.0], [3.8, 4181.0], [3.9, 4181.0], [4.0, 4192.0], [4.1, 4192.0], [4.2, 4192.0], [4.3, 4192.0], [4.4, 4341.0], [4.5, 4341.0], [4.6, 4341.0], [4.7, 4367.0], [4.8, 4367.0], [4.9, 4367.0], [5.0, 4414.0], [5.1, 4414.0], [5.2, 4414.0], [5.3, 4414.0], [5.4, 4428.0], [5.5, 4428.0], [5.6, 4428.0], [5.7, 4461.0], [5.8, 4461.0], [5.9, 4461.0], [6.0, 4514.0], [6.1, 4514.0], [6.2, 4514.0], [6.3, 4514.0], [6.4, 4518.0], [6.5, 4518.0], [6.6, 4518.0], [6.7, 4529.0], [6.8, 4529.0], [6.9, 4529.0], [7.0, 4556.0], [7.1, 4556.0], [7.2, 4556.0], [7.3, 4556.0], [7.4, 4616.0], [7.5, 4616.0], [7.6, 4616.0], [7.7, 4667.0], [7.8, 4667.0], [7.9, 4667.0], [8.0, 4670.0], [8.1, 4670.0], [8.2, 4670.0], [8.3, 4670.0], [8.4, 4675.0], [8.5, 4675.0], [8.6, 4675.0], [8.7, 4681.0], [8.8, 4681.0], [8.9, 4681.0], [9.0, 4691.0], [9.1, 4691.0], [9.2, 4691.0], [9.3, 4691.0], [9.4, 4702.0], [9.5, 4702.0], [9.6, 4702.0], [9.7, 4703.0], [9.8, 4703.0], [9.9, 4703.0], [10.0, 4713.0], [10.1, 4713.0], [10.2, 4713.0], [10.3, 4713.0], [10.4, 4716.0], [10.5, 4716.0], [10.6, 4716.0], [10.7, 4739.0], [10.8, 4739.0], [10.9, 4739.0], [11.0, 4739.0], [11.1, 4762.0], [11.2, 4762.0], [11.3, 4762.0], [11.4, 4764.0], [11.5, 4764.0], [11.6, 4764.0], [11.7, 4857.0], [11.8, 4857.0], [11.9, 4857.0], [12.0, 4857.0], [12.1, 4891.0], [12.2, 4891.0], [12.3, 4891.0], [12.4, 4910.0], [12.5, 4910.0], [12.6, 4910.0], [12.7, 4923.0], [12.8, 4923.0], [12.9, 4923.0], [13.0, 4923.0], [13.1, 4962.0], [13.2, 4962.0], [13.3, 4962.0], [13.4, 5010.0], [13.5, 5010.0], [13.6, 5010.0], [13.7, 5045.0], [13.8, 5045.0], [13.9, 5045.0], [14.0, 5045.0], [14.1, 5047.0], [14.2, 5047.0], [14.3, 5047.0], [14.4, 5070.0], [14.5, 5070.0], [14.6, 5070.0], [14.7, 5072.0], [14.8, 5072.0], [14.9, 5072.0], [15.0, 5072.0], [15.1, 5093.0], [15.2, 5093.0], [15.3, 5093.0], [15.4, 5142.0], [15.5, 5142.0], [15.6, 5142.0], [15.7, 5162.0], [15.8, 5162.0], [15.9, 5162.0], [16.0, 5162.0], [16.1, 5180.0], [16.2, 5180.0], [16.3, 5180.0], [16.4, 5252.0], [16.5, 5252.0], [16.6, 5252.0], [16.7, 5262.0], [16.8, 5262.0], [16.9, 5262.0], [17.0, 5262.0], [17.1, 5271.0], [17.2, 5271.0], [17.3, 5271.0], [17.4, 5285.0], [17.5, 5285.0], [17.6, 5285.0], [17.7, 5306.0], [17.8, 5306.0], [17.9, 5306.0], [18.0, 5306.0], [18.1, 5332.0], [18.2, 5332.0], [18.3, 5332.0], [18.4, 5342.0], [18.5, 5342.0], [18.6, 5342.0], [18.7, 5532.0], [18.8, 5532.0], [18.9, 5532.0], [19.0, 5562.0], [19.1, 5562.0], [19.2, 5562.0], [19.3, 5562.0], [19.4, 6239.0], [19.5, 6239.0], [19.6, 6239.0], [19.7, 6323.0], [19.8, 6323.0], [19.9, 6323.0], [20.0, 6350.0], [20.1, 6350.0], [20.2, 6350.0], [20.3, 6350.0], [20.4, 6364.0], [20.5, 6364.0], [20.6, 6364.0], [20.7, 6423.0], [20.8, 6423.0], [20.9, 6423.0], [21.0, 6458.0], [21.1, 6458.0], [21.2, 6458.0], [21.3, 6458.0], [21.4, 6653.0], [21.5, 6653.0], [21.6, 6653.0], [21.7, 6665.0], [21.8, 6665.0], [21.9, 6665.0], [22.0, 6668.0], [22.1, 6668.0], [22.2, 6668.0], [22.3, 6668.0], [22.4, 6668.0], [22.5, 6668.0], [22.6, 6668.0], [22.7, 6672.0], [22.8, 6672.0], [22.9, 6672.0], [23.0, 6682.0], [23.1, 6682.0], [23.2, 6682.0], [23.3, 6682.0], [23.4, 6957.0], [23.5, 6957.0], [23.6, 6957.0], [23.7, 6983.0], [23.8, 6983.0], [23.9, 6983.0], [24.0, 6999.0], [24.1, 6999.0], [24.2, 6999.0], [24.3, 6999.0], [24.4, 7009.0], [24.5, 7009.0], [24.6, 7009.0], [24.7, 7011.0], [24.8, 7011.0], [24.9, 7011.0], [25.0, 7024.0], [25.1, 7024.0], [25.2, 7024.0], [25.3, 7024.0], [25.4, 7043.0], [25.5, 7043.0], [25.6, 7043.0], [25.7, 7059.0], [25.8, 7059.0], [25.9, 7059.0], [26.0, 7094.0], [26.1, 7094.0], [26.2, 7094.0], [26.3, 7094.0], [26.4, 7106.0], [26.5, 7106.0], [26.6, 7106.0], [26.7, 7113.0], [26.8, 7113.0], [26.9, 7113.0], [27.0, 7114.0], [27.1, 7114.0], [27.2, 7114.0], [27.3, 7114.0], [27.4, 7116.0], [27.5, 7116.0], [27.6, 7116.0], [27.7, 7128.0], [27.8, 7128.0], [27.9, 7128.0], [28.0, 7129.0], [28.1, 7129.0], [28.2, 7129.0], [28.3, 7129.0], [28.4, 7144.0], [28.5, 7144.0], [28.6, 7144.0], [28.7, 7145.0], [28.8, 7145.0], [28.9, 7145.0], [29.0, 7150.0], [29.1, 7150.0], [29.2, 7150.0], [29.3, 7150.0], [29.4, 7150.0], [29.5, 7150.0], [29.6, 7150.0], [29.7, 7151.0], [29.8, 7151.0], [29.9, 7151.0], [30.0, 7152.0], [30.1, 7152.0], [30.2, 7152.0], [30.3, 7152.0], [30.4, 7169.0], [30.5, 7169.0], [30.6, 7169.0], [30.7, 7179.0], [30.8, 7179.0], [30.9, 7179.0], [31.0, 7184.0], [31.1, 7184.0], [31.2, 7184.0], [31.3, 7184.0], [31.4, 7203.0], [31.5, 7203.0], [31.6, 7203.0], [31.7, 7206.0], [31.8, 7206.0], [31.9, 7206.0], [32.0, 7213.0], [32.1, 7213.0], [32.2, 7213.0], [32.3, 7213.0], [32.4, 7216.0], [32.5, 7216.0], [32.6, 7216.0], [32.7, 7221.0], [32.8, 7221.0], [32.9, 7221.0], [33.0, 7222.0], [33.1, 7222.0], [33.2, 7222.0], [33.3, 7222.0], [33.4, 7236.0], [33.5, 7236.0], [33.6, 7236.0], [33.7, 7243.0], [33.8, 7243.0], [33.9, 7243.0], [34.0, 7250.0], [34.1, 7250.0], [34.2, 7250.0], [34.3, 7250.0], [34.4, 7253.0], [34.5, 7253.0], [34.6, 7253.0], [34.7, 7258.0], [34.8, 7258.0], [34.9, 7258.0], [35.0, 7272.0], [35.1, 7272.0], [35.2, 7272.0], [35.3, 7272.0], [35.4, 7272.0], [35.5, 7272.0], [35.6, 7272.0], [35.7, 7272.0], [35.8, 7272.0], [35.9, 7272.0], [36.0, 7316.0], [36.1, 7316.0], [36.2, 7316.0], [36.3, 7316.0], [36.4, 7334.0], [36.5, 7334.0], [36.6, 7334.0], [36.7, 7334.0], [36.8, 7334.0], [36.9, 7334.0], [37.0, 7342.0], [37.1, 7342.0], [37.2, 7342.0], [37.3, 7342.0], [37.4, 7348.0], [37.5, 7348.0], [37.6, 7348.0], [37.7, 7356.0], [37.8, 7356.0], [37.9, 7356.0], [38.0, 7365.0], [38.1, 7365.0], [38.2, 7365.0], [38.3, 7365.0], [38.4, 7376.0], [38.5, 7376.0], [38.6, 7376.0], [38.7, 7382.0], [38.8, 7382.0], [38.9, 7382.0], [39.0, 7382.0], [39.1, 7382.0], [39.2, 7382.0], [39.3, 7382.0], [39.4, 7392.0], [39.5, 7392.0], [39.6, 7392.0], [39.7, 7403.0], [39.8, 7403.0], [39.9, 7403.0], [40.0, 7403.0], [40.1, 7403.0], [40.2, 7403.0], [40.3, 7403.0], [40.4, 7405.0], [40.5, 7405.0], [40.6, 7405.0], [40.7, 7413.0], [40.8, 7413.0], [40.9, 7413.0], [41.0, 7416.0], [41.1, 7416.0], [41.2, 7416.0], [41.3, 7416.0], [41.4, 7419.0], [41.5, 7419.0], [41.6, 7419.0], [41.7, 7421.0], [41.8, 7421.0], [41.9, 7421.0], [42.0, 7429.0], [42.1, 7429.0], [42.2, 7429.0], [42.3, 7429.0], [42.4, 7430.0], [42.5, 7430.0], [42.6, 7430.0], [42.7, 7432.0], [42.8, 7432.0], [42.9, 7432.0], [43.0, 7432.0], [43.1, 7434.0], [43.2, 7434.0], [43.3, 7434.0], [43.4, 7437.0], [43.5, 7437.0], [43.6, 7437.0], [43.7, 7438.0], [43.8, 7438.0], [43.9, 7438.0], [44.0, 7438.0], [44.1, 7441.0], [44.2, 7441.0], [44.3, 7441.0], [44.4, 7448.0], [44.5, 7448.0], [44.6, 7448.0], [44.7, 7450.0], [44.8, 7450.0], [44.9, 7450.0], [45.0, 7450.0], [45.1, 7452.0], [45.2, 7452.0], [45.3, 7452.0], [45.4, 7468.0], [45.5, 7468.0], [45.6, 7468.0], [45.7, 7472.0], [45.8, 7472.0], [45.9, 7472.0], [46.0, 7472.0], [46.1, 7477.0], [46.2, 7477.0], [46.3, 7477.0], [46.4, 7479.0], [46.5, 7479.0], [46.6, 7479.0], [46.7, 7490.0], [46.8, 7490.0], [46.9, 7490.0], [47.0, 7490.0], [47.1, 7491.0], [47.2, 7491.0], [47.3, 7491.0], [47.4, 7500.0], [47.5, 7500.0], [47.6, 7500.0], [47.7, 7500.0], [47.8, 7500.0], [47.9, 7500.0], [48.0, 7500.0], [48.1, 7511.0], [48.2, 7511.0], [48.3, 7511.0], [48.4, 7576.0], [48.5, 7576.0], [48.6, 7576.0], [48.7, 7600.0], [48.8, 7600.0], [48.9, 7600.0], [49.0, 7600.0], [49.1, 7608.0], [49.2, 7608.0], [49.3, 7608.0], [49.4, 7653.0], [49.5, 7653.0], [49.6, 7653.0], [49.7, 7661.0], [49.8, 7661.0], [49.9, 7661.0], [50.0, 7661.0], [50.1, 7774.0], [50.2, 7774.0], [50.3, 7774.0], [50.4, 7930.0], [50.5, 7930.0], [50.6, 7930.0], [50.7, 7998.0], [50.8, 7998.0], [50.9, 7998.0], [51.0, 7998.0], [51.1, 8003.0], [51.2, 8003.0], [51.3, 8003.0], [51.4, 8003.0], [51.5, 8003.0], [51.6, 8003.0], [51.7, 8016.0], [51.8, 8016.0], [51.9, 8016.0], [52.0, 8016.0], [52.1, 8017.0], [52.2, 8017.0], [52.3, 8017.0], [52.4, 8023.0], [52.5, 8023.0], [52.6, 8023.0], [52.7, 8024.0], [52.8, 8024.0], [52.9, 8024.0], [53.0, 8024.0], [53.1, 8026.0], [53.2, 8026.0], [53.3, 8026.0], [53.4, 8035.0], [53.5, 8035.0], [53.6, 8035.0], [53.7, 8045.0], [53.8, 8045.0], [53.9, 8045.0], [54.0, 8045.0], [54.1, 8101.0], [54.2, 8101.0], [54.3, 8101.0], [54.4, 8121.0], [54.5, 8121.0], [54.6, 8121.0], [54.7, 8345.0], [54.8, 8345.0], [54.9, 8345.0], [55.0, 8345.0], [55.1, 8356.0], [55.2, 8356.0], [55.3, 8356.0], [55.4, 8362.0], [55.5, 8362.0], [55.6, 8362.0], [55.7, 8364.0], [55.8, 8364.0], [55.9, 8364.0], [56.0, 8364.0], [56.1, 8365.0], [56.2, 8365.0], [56.3, 8365.0], [56.4, 8367.0], [56.5, 8367.0], [56.6, 8367.0], [56.7, 8373.0], [56.8, 8373.0], [56.9, 8373.0], [57.0, 8373.0], [57.1, 8376.0], [57.2, 8376.0], [57.3, 8376.0], [57.4, 8378.0], [57.5, 8378.0], [57.6, 8378.0], [57.7, 8380.0], [57.8, 8380.0], [57.9, 8380.0], [58.0, 8380.0], [58.1, 8382.0], [58.2, 8382.0], [58.3, 8382.0], [58.4, 8384.0], [58.5, 8384.0], [58.6, 8384.0], [58.7, 8386.0], [58.8, 8386.0], [58.9, 8386.0], [59.0, 8386.0], [59.1, 8406.0], [59.2, 8406.0], [59.3, 8406.0], [59.4, 8411.0], [59.5, 8411.0], [59.6, 8411.0], [59.7, 8439.0], [59.8, 8439.0], [59.9, 8439.0], [60.0, 8439.0], [60.1, 8452.0], [60.2, 8452.0], [60.3, 8452.0], [60.4, 8472.0], [60.5, 8472.0], [60.6, 8472.0], [60.7, 8475.0], [60.8, 8475.0], [60.9, 8475.0], [61.0, 8475.0], [61.1, 8481.0], [61.2, 8481.0], [61.3, 8481.0], [61.4, 8483.0], [61.5, 8483.0], [61.6, 8483.0], [61.7, 8492.0], [61.8, 8492.0], [61.9, 8492.0], [62.0, 8492.0], [62.1, 8494.0], [62.2, 8494.0], [62.3, 8494.0], [62.4, 8502.0], [62.5, 8502.0], [62.6, 8502.0], [62.7, 8506.0], [62.8, 8506.0], [62.9, 8506.0], [63.0, 8506.0], [63.1, 8510.0], [63.2, 8510.0], [63.3, 8510.0], [63.4, 8521.0], [63.5, 8521.0], [63.6, 8521.0], [63.7, 8528.0], [63.8, 8528.0], [63.9, 8528.0], [64.0, 8528.0], [64.1, 8539.0], [64.2, 8539.0], [64.3, 8539.0], [64.4, 8541.0], [64.5, 8541.0], [64.6, 8541.0], [64.7, 8541.0], [64.8, 8541.0], [64.9, 8541.0], [65.0, 8541.0], [65.1, 8599.0], [65.2, 8599.0], [65.3, 8599.0], [65.4, 8624.0], [65.5, 8624.0], [65.6, 8624.0], [65.7, 8625.0], [65.8, 8625.0], [65.9, 8625.0], [66.0, 8625.0], [66.1, 8625.0], [66.2, 8625.0], [66.3, 8625.0], [66.4, 8638.0], [66.5, 8638.0], [66.6, 8638.0], [66.7, 8639.0], [66.8, 8639.0], [66.9, 8639.0], [67.0, 8639.0], [67.1, 8648.0], [67.2, 8648.0], [67.3, 8648.0], [67.4, 8649.0], [67.5, 8649.0], [67.6, 8649.0], [67.7, 8650.0], [67.8, 8650.0], [67.9, 8650.0], [68.0, 8650.0], [68.1, 8650.0], [68.2, 8650.0], [68.3, 8650.0], [68.4, 8658.0], [68.5, 8658.0], [68.6, 8658.0], [68.7, 8658.0], [68.8, 8658.0], [68.9, 8658.0], [69.0, 8658.0], [69.1, 8662.0], [69.2, 8662.0], [69.3, 8662.0], [69.4, 8668.0], [69.5, 8668.0], [69.6, 8668.0], [69.7, 8672.0], [69.8, 8672.0], [69.9, 8672.0], [70.0, 8672.0], [70.1, 8691.0], [70.2, 8691.0], [70.3, 8691.0], [70.4, 8693.0], [70.5, 8693.0], [70.6, 8693.0], [70.7, 8696.0], [70.8, 8696.0], [70.9, 8696.0], [71.0, 8696.0], [71.1, 8702.0], [71.2, 8702.0], [71.3, 8702.0], [71.4, 8724.0], [71.5, 8724.0], [71.6, 8724.0], [71.7, 8730.0], [71.8, 8730.0], [71.9, 8730.0], [72.0, 8730.0], [72.1, 8758.0], [72.2, 8758.0], [72.3, 8758.0], [72.4, 8761.0], [72.5, 8761.0], [72.6, 8761.0], [72.7, 8765.0], [72.8, 8765.0], [72.9, 8765.0], [73.0, 8765.0], [73.1, 8765.0], [73.2, 8765.0], [73.3, 8765.0], [73.4, 8765.0], [73.5, 8765.0], [73.6, 8765.0], [73.7, 8769.0], [73.8, 8769.0], [73.9, 8769.0], [74.0, 8769.0], [74.1, 8781.0], [74.2, 8781.0], [74.3, 8781.0], [74.4, 8785.0], [74.5, 8785.0], [74.6, 8785.0], [74.7, 8788.0], [74.8, 8788.0], [74.9, 8788.0], [75.0, 8788.0], [75.1, 8794.0], [75.2, 8794.0], [75.3, 8794.0], [75.4, 8801.0], [75.5, 8801.0], [75.6, 8801.0], [75.7, 8802.0], [75.8, 8802.0], [75.9, 8802.0], [76.0, 8802.0], [76.1, 8802.0], [76.2, 8802.0], [76.3, 8802.0], [76.4, 8811.0], [76.5, 8811.0], [76.6, 8811.0], [76.7, 8855.0], [76.8, 8855.0], [76.9, 8855.0], [77.0, 8855.0], [77.1, 8856.0], [77.2, 8856.0], [77.3, 8856.0], [77.4, 8863.0], [77.5, 8863.0], [77.6, 8863.0], [77.7, 8863.0], [77.8, 8863.0], [77.9, 8863.0], [78.0, 8863.0], [78.1, 8869.0], [78.2, 8869.0], [78.3, 8869.0], [78.4, 8875.0], [78.5, 8875.0], [78.6, 8875.0], [78.7, 8942.0], [78.8, 8942.0], [78.9, 8942.0], [79.0, 8942.0], [79.1, 8960.0], [79.2, 8960.0], [79.3, 8960.0], [79.4, 9011.0], [79.5, 9011.0], [79.6, 9011.0], [79.7, 9117.0], [79.8, 9117.0], [79.9, 9117.0], [80.0, 9117.0], [80.1, 9140.0], [80.2, 9140.0], [80.3, 9140.0], [80.4, 9146.0], [80.5, 9146.0], [80.6, 9146.0], [80.7, 9161.0], [80.8, 9161.0], [80.9, 9161.0], [81.0, 9206.0], [81.1, 9206.0], [81.2, 9206.0], [81.3, 9206.0], [81.4, 9208.0], [81.5, 9208.0], [81.6, 9208.0], [81.7, 9238.0], [81.8, 9238.0], [81.9, 9238.0], [82.0, 9290.0], [82.1, 9290.0], [82.2, 9290.0], [82.3, 9290.0], [82.4, 9378.0], [82.5, 9378.0], [82.6, 9378.0], [82.7, 9423.0], [82.8, 9423.0], [82.9, 9423.0], [83.0, 9440.0], [83.1, 9440.0], [83.2, 9440.0], [83.3, 9440.0], [83.4, 9458.0], [83.5, 9458.0], [83.6, 9458.0], [83.7, 9458.0], [83.8, 9458.0], [83.9, 9458.0], [84.0, 9524.0], [84.1, 9524.0], [84.2, 9524.0], [84.3, 9524.0], [84.4, 9530.0], [84.5, 9530.0], [84.6, 9530.0], [84.7, 9566.0], [84.8, 9566.0], [84.9, 9566.0], [85.0, 9617.0], [85.1, 9617.0], [85.2, 9617.0], [85.3, 9617.0], [85.4, 9649.0], [85.5, 9649.0], [85.6, 9649.0], [85.7, 9697.0], [85.8, 9697.0], [85.9, 9697.0], [86.0, 9733.0], [86.1, 9733.0], [86.2, 9733.0], [86.3, 9733.0], [86.4, 9741.0], [86.5, 9741.0], [86.6, 9741.0], [86.7, 9767.0], [86.8, 9767.0], [86.9, 9767.0], [87.0, 9785.0], [87.1, 9785.0], [87.2, 9785.0], [87.3, 9785.0], [87.4, 9793.0], [87.5, 9793.0], [87.6, 9793.0], [87.7, 9800.0], [87.8, 9800.0], [87.9, 9800.0], [88.0, 9802.0], [88.1, 9802.0], [88.2, 9802.0], [88.3, 9802.0], [88.4, 9831.0], [88.5, 9831.0], [88.6, 9831.0], [88.7, 9881.0], [88.8, 9881.0], [88.9, 9881.0], [89.0, 9900.0], [89.1, 9900.0], [89.2, 9900.0], [89.3, 9900.0], [89.4, 9903.0], [89.5, 9903.0], [89.6, 9903.0], [89.7, 9944.0], [89.8, 9944.0], [89.9, 9944.0], [90.0, 9960.0], [90.1, 9960.0], [90.2, 9960.0], [90.3, 9960.0], [90.4, 9963.0], [90.5, 9963.0], [90.6, 9963.0], [90.7, 10031.0], [90.8, 10031.0], [90.9, 10031.0], [91.0, 10033.0], [91.1, 10033.0], [91.2, 10033.0], [91.3, 10033.0], [91.4, 10051.0], [91.5, 10051.0], [91.6, 10051.0], [91.7, 10056.0], [91.8, 10056.0], [91.9, 10056.0], [92.0, 10084.0], [92.1, 10084.0], [92.2, 10084.0], [92.3, 10084.0], [92.4, 10115.0], [92.5, 10115.0], [92.6, 10115.0], [92.7, 10135.0], [92.8, 10135.0], [92.9, 10135.0], [93.0, 10147.0], [93.1, 10147.0], [93.2, 10147.0], [93.3, 10147.0], [93.4, 10246.0], [93.5, 10246.0], [93.6, 10246.0], [93.7, 10299.0], [93.8, 10299.0], [93.9, 10299.0], [94.0, 10305.0], [94.1, 10305.0], [94.2, 10305.0], [94.3, 10305.0], [94.4, 10387.0], [94.5, 10387.0], [94.6, 10387.0], [94.7, 10407.0], [94.8, 10407.0], [94.9, 10407.0], [95.0, 10409.0], [95.1, 10409.0], [95.2, 10409.0], [95.3, 10409.0], [95.4, 10410.0], [95.5, 10410.0], [95.6, 10410.0], [95.7, 10533.0], [95.8, 10533.0], [95.9, 10533.0], [96.0, 10614.0], [96.1, 10614.0], [96.2, 10614.0], [96.3, 10614.0], [96.4, 10773.0], [96.5, 10773.0], [96.6, 10773.0], [96.7, 10782.0], [96.8, 10782.0], [96.9, 10782.0], [97.0, 10826.0], [97.1, 10826.0], [97.2, 10826.0], [97.3, 10826.0], [97.4, 10844.0], [97.5, 10844.0], [97.6, 10844.0], [97.7, 10850.0], [97.8, 10850.0], [97.9, 10850.0], [98.0, 10872.0], [98.1, 10872.0], [98.2, 10872.0], [98.3, 10872.0], [98.4, 10877.0], [98.5, 10877.0], [98.6, 10877.0], [98.7, 10879.0], [98.8, 10879.0], [98.9, 10879.0], [99.0, 10879.0], [99.1, 10879.0], [99.2, 10879.0], [99.3, 10879.0], [99.4, 10881.0], [99.5, 10881.0], [99.6, 10881.0], [99.7, 10917.0], [99.8, 10917.0], [99.9, 10917.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2200.0, "maxY": 54.0, "series": [{"data": [[70300.0, 1.0], [71500.0, 1.0], [81900.0, 1.0], [83500.0, 1.0], [85500.0, 1.0], [85900.0, 1.0], [86700.0, 1.0], [88300.0, 1.0], [89500.0, 1.0], [89900.0, 1.0], [92300.0, 3.0], [91500.0, 1.0], [95900.0, 2.0], [97900.0, 1.0], [97500.0, 1.0], [102300.0, 3.0], [101900.0, 1.0], [98700.0, 1.0], [99100.0, 1.0], [99900.0, 2.0], [100300.0, 1.0], [102700.0, 1.0], [103100.0, 1.0], [105500.0, 8.0], [103500.0, 1.0], [104300.0, 2.0], [104700.0, 3.0], [103900.0, 3.0], [105900.0, 7.0], [106300.0, 4.0], [105100.0, 3.0], [107500.0, 2.0], [106700.0, 3.0], [60300.0, 16.0], [81800.0, 1.0], [84200.0, 1.0], [87800.0, 1.0], [88600.0, 1.0], [95000.0, 3.0], [95800.0, 1.0], [98200.0, 2.0], [96600.0, 1.0], [95400.0, 1.0], [101400.0, 1.0], [102200.0, 1.0], [98600.0, 2.0], [100200.0, 1.0], [101000.0, 4.0], [100600.0, 1.0], [103000.0, 2.0], [102600.0, 1.0], [103400.0, 4.0], [103800.0, 1.0], [104200.0, 2.0], [104600.0, 1.0], [105000.0, 2.0], [105400.0, 5.0], [106200.0, 2.0], [105800.0, 1.0], [106600.0, 2.0], [108200.0, 1.0], [82900.0, 1.0], [86900.0, 1.0], [5500.0, 2.0], [86500.0, 1.0], [87300.0, 1.0], [88500.0, 3.0], [5700.0, 1.0], [93700.0, 1.0], [94100.0, 1.0], [5900.0, 3.0], [6000.0, 2.0], [6100.0, 1.0], [96500.0, 3.0], [95700.0, 1.0], [94900.0, 1.0], [99300.0, 1.0], [98900.0, 1.0], [100500.0, 2.0], [102100.0, 1.0], [100900.0, 2.0], [99700.0, 2.0], [100100.0, 3.0], [102900.0, 2.0], [103300.0, 1.0], [102500.0, 2.0], [104100.0, 1.0], [103700.0, 2.0], [106100.0, 2.0], [104900.0, 2.0], [105700.0, 5.0], [105300.0, 1.0], [106900.0, 1.0], [107700.0, 1.0], [108100.0, 1.0], [106500.0, 2.0], [8700.0, 1.0], [48200.0, 1.0], [60200.0, 10.0], [60000.0, 54.0], [81600.0, 1.0], [85600.0, 1.0], [86400.0, 1.0], [88800.0, 1.0], [92800.0, 1.0], [93200.0, 1.0], [94000.0, 1.0], [95200.0, 1.0], [94400.0, 1.0], [97600.0, 1.0], [96800.0, 1.0], [97200.0, 1.0], [96400.0, 1.0], [94800.0, 1.0], [95600.0, 1.0], [98800.0, 1.0], [99600.0, 2.0], [100000.0, 2.0], [102000.0, 1.0], [101200.0, 1.0], [100800.0, 1.0], [103200.0, 1.0], [102400.0, 2.0], [104800.0, 3.0], [102800.0, 1.0], [104000.0, 2.0], [105200.0, 5.0], [105600.0, 4.0], [106000.0, 3.0], [106400.0, 3.0], [107200.0, 1.0], [106800.0, 1.0]], "isOverall": false, "label": "School Infra Map SchoolWise", "isController": false}, {"data": [[2200.0, 1.0], [3700.0, 2.0], [3600.0, 2.0], [3800.0, 1.0], [4000.0, 1.0], [4100.0, 6.0], [4300.0, 2.0], [4600.0, 6.0], [4500.0, 4.0], [4400.0, 3.0], [4700.0, 7.0], [4800.0, 2.0], [4900.0, 3.0], [5000.0, 6.0], [5100.0, 3.0], [5200.0, 4.0], [5300.0, 3.0], [5500.0, 2.0], [6300.0, 3.0], [6200.0, 1.0], [6600.0, 6.0], [6400.0, 2.0], [6900.0, 3.0], [7100.0, 15.0], [7000.0, 6.0], [7300.0, 11.0], [7400.0, 23.0], [7200.0, 14.0], [7500.0, 4.0], [7600.0, 4.0], [7700.0, 1.0], [7900.0, 2.0], [8000.0, 9.0], [8100.0, 2.0], [8400.0, 10.0], [8500.0, 9.0], [8300.0, 13.0], [8700.0, 13.0], [8600.0, 17.0], [8800.0, 10.0], [8900.0, 2.0], [9000.0, 1.0], [9100.0, 4.0], [9200.0, 4.0], [9400.0, 4.0], [9500.0, 3.0], [9300.0, 1.0], [9600.0, 3.0], [9700.0, 5.0], [9800.0, 4.0], [9900.0, 5.0], [10000.0, 5.0], [10100.0, 3.0], [10200.0, 2.0], [10300.0, 2.0], [10400.0, 3.0], [10600.0, 1.0], [10500.0, 1.0], [10700.0, 2.0], [10800.0, 8.0], [10900.0, 1.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 108200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 80.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 520.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 520.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 80.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 104.03381642512086, "minX": 1.59430986E12, "maxY": 298.93870967741935, "series": [{"data": [[1.59430992E12, 251.43373493975903], [1.59430998E12, 104.03381642512086], [1.59430986E12, 298.93870967741935]], "isOverall": false, "label": "School Infra Map", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59430998E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5534.0, "minX": 1.0, "maxY": 108255.0, "series": [{"data": [[2.0, 108255.0], [3.0, 106118.0], [4.0, 105523.0], [5.0, 106541.0], [6.0, 105925.0], [7.0, 105516.0], [8.0, 106308.0], [9.0, 106813.0], [10.0, 106474.0], [11.0, 106793.0], [12.0, 106460.0], [13.0, 106441.0], [15.0, 105907.5], [16.0, 108132.0], [17.0, 106758.0], [18.0, 105823.0], [19.0, 106744.0], [20.0, 105364.0], [21.0, 105972.0], [22.0, 105409.0], [24.0, 105483.5], [25.0, 105270.0], [26.0, 107706.0], [27.0, 106634.0], [28.0, 106642.0], [29.0, 106070.0], [30.0, 106229.0], [31.0, 105540.0], [33.0, 105904.0], [32.0, 105594.0], [35.0, 105538.0], [34.0, 105580.0], [37.0, 104998.0], [36.0, 105781.0], [39.0, 106318.0], [38.0, 105475.0], [41.0, 106288.0], [40.0, 106310.0], [43.0, 107560.0], [42.0, 105446.0], [45.0, 105204.0], [44.0, 105658.0], [47.0, 106633.0], [49.0, 106030.0], [48.0, 105207.0], [51.0, 105941.0], [50.0, 105608.0], [53.0, 105188.0], [52.0, 107227.0], [55.0, 104967.0], [54.0, 105763.0], [57.0, 104320.0], [56.0, 105689.0], [59.0, 106953.0], [58.0, 105608.0], [61.0, 105531.0], [60.0, 105586.0], [63.0, 105419.0], [62.0, 105456.0], [67.0, 103784.0], [66.0, 105188.5], [64.0, 105219.0], [71.0, 103467.0], [70.0, 106332.0], [69.0, 105076.0], [68.0, 105091.0], [75.0, 104761.0], [74.0, 104824.0], [73.0, 104835.0], [72.0, 106182.0], [79.0, 104615.0], [78.0, 105976.0], [77.0, 104034.0], [76.0, 104719.0], [83.0, 105953.0], [82.0, 104250.0], [81.0, 103996.0], [80.0, 105955.0], [87.0, 103933.0], [86.0, 103976.0], [85.0, 104066.0], [84.0, 104289.0], [91.0, 104792.0], [90.0, 103743.0], [89.0, 102570.0], [88.0, 102814.0], [95.0, 103448.0], [94.0, 103466.0], [93.0, 102431.0], [92.0, 104823.0], [99.0, 102507.0], [98.0, 104112.0], [97.0, 104305.0], [96.0, 103227.0], [103.0, 102180.0], [102.0, 103585.0], [101.0, 102450.0], [100.0, 103863.0], [107.0, 103023.0], [106.0, 100610.0], [105.0, 103103.0], [104.0, 101911.0], [111.0, 102905.0], [110.0, 102936.0], [109.0, 100398.0], [108.0, 103027.0], [115.0, 101043.0], [114.0, 99953.0], [113.0, 101073.0], [112.0, 102701.0], [119.0, 101028.0], [118.0, 102382.0], [117.0, 102376.0], [116.0, 102389.0], [123.0, 100003.0], [122.0, 103419.0], [121.0, 100184.0], [120.0, 100251.0], [127.0, 100978.0], [126.0, 101090.0], [125.0, 100828.0], [124.0, 101205.0], [135.0, 99991.0], [134.0, 100010.0], [133.0, 98643.0], [132.0, 100106.0], [131.0, 102073.0], [130.0, 100199.0], [129.0, 100540.0], [128.0, 103367.0], [143.0, 97506.0], [142.0, 102259.0], [141.0, 99635.0], [140.0, 99622.0], [139.0, 99771.0], [138.0, 99768.0], [137.0, 98604.0], [136.0, 102643.0], [151.0, 98239.0], [150.0, 97246.0], [149.0, 98717.0], [148.0, 100917.0], [147.0, 98948.0], [146.0, 97607.0], [145.0, 101471.0], [144.0, 99164.0], [159.0, 98850.0], [158.0, 96536.0], [157.0, 99377.0], [156.0, 96644.0], [155.0, 96582.0], [154.0, 100556.0], [153.0, 97960.0], [152.0, 98233.0], [167.0, 96411.0], [166.0, 96876.0], [165.0, 95056.0], [164.0, 94132.0], [163.0, 95775.0], [162.0, 95952.0], [161.0, 94810.0], [160.0, 94999.0], [175.0, 95082.0], [174.0, 95987.0], [173.0, 93208.0], [172.0, 95640.0], [171.0, 95482.0], [170.0, 96501.0], [169.0, 93766.0], [168.0, 94085.0], [183.0, 93420.5], [182.0, 92392.0], [180.0, 95276.0], [179.0, 92836.0], [178.0, 91506.0], [177.0, 95028.0], [176.0, 95841.0], [191.0, 88564.0], [190.0, 88563.0], [189.0, 88681.0], [188.0, 86951.0], [187.0, 89733.5], [185.0, 88361.0], [184.0, 92358.0], [199.0, 85660.0], [198.0, 86459.0], [197.0, 86732.0], [196.0, 86599.0], [195.0, 87359.0], [194.0, 87896.0], [193.0, 88524.0], [192.0, 88812.0], [207.0, 81842.0], [206.0, 81629.0], [205.0, 81987.0], [204.0, 82904.0], [203.0, 83565.0], [202.0, 84273.0], [201.0, 85556.0], [200.0, 85925.0], [215.0, 60020.8], [210.0, 60013.0], [209.0, 70308.0], [208.0, 71584.0], [222.0, 60014.5], [220.0, 60016.0], [219.0, 60014.0], [218.0, 60017.333333333336], [231.0, 60011.0], [230.0, 60012.0], [229.0, 60242.0], [228.0, 60011.0], [227.0, 60015.0], [225.0, 60010.0], [239.0, 60029.0], [238.0, 60025.0], [237.0, 60017.0], [236.0, 60023.0], [235.0, 60012.0], [234.0, 60011.0], [233.0, 60011.0], [232.0, 60026.0], [247.0, 60047.0], [246.0, 60040.0], [245.0, 60078.0], [244.0, 60041.0], [243.0, 60044.0], [242.0, 60048.0], [241.0, 60033.0], [240.0, 60025.0], [255.0, 60027.0], [252.0, 60030.0], [251.0, 60034.0], [250.0, 60045.0], [249.0, 60048.0], [248.0, 60046.0], [264.0, 60033.0], [263.0, 60049.25], [259.0, 60063.0], [257.0, 60071.0], [256.0, 60062.0], [286.0, 60302.4], [284.0, 60288.666666666664], [282.0, 60313.14285714286], [277.0, 60310.0], [276.0, 60332.333333333336], [300.0, 5534.0], [299.0, 5570.0], [298.0, 5955.5], [296.0, 5993.0], [295.0, 6042.0], [294.0, 5791.0], [293.0, 6092.0], [292.0, 6128.0], [291.0, 8780.0], [290.0, 48277.0], [289.0, 60301.0], [1.0, 106572.0]], "isOverall": false, "label": "School Infra Map SchoolWise", "isController": false}, {"data": [[151.2, 86281.84]], "isOverall": false, "label": "School Infra Map SchoolWise-Aggregated", "isController": false}, {"data": [[300.0, 7321.411538461537], [299.0, 9914.666666666666], [298.0, 8791.0], [296.0, 10014.0], [295.0, 9967.666666666666], [294.0, 10033.0], [293.0, 10074.5], [292.0, 7653.0], [291.0, 10115.439999999999]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[299.0500000000002, 7667.786666666666]], "isOverall": false, "label": "Login-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 300.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1336.3, "minX": 1.59430986E12, "maxY": 4.14533508E7, "series": [{"data": [[1.59430992E12, 601257.2], [1.59430998E12, 4.14533508E7], [1.59430986E12, 2008102.3333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.59430992E12, 1336.3], [1.59430998E12, 3332.7], [1.59430986E12, 1406.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59430998E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6184.1, "minX": 1.59430986E12, "maxY": 100594.21256038646, "series": [{"data": [[1.59430992E12, 60237.45783132531], [1.59430998E12, 100594.21256038646], [1.59430986E12, 6184.1]], "isOverall": false, "label": "School Infra Map SchoolWise", "isController": false}, {"data": [[1.59430986E12, 7667.786666666666]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59430998E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3460.7, "minX": 1.59430986E12, "maxY": 58273.843373493975, "series": [{"data": [[1.59430992E12, 58273.843373493975], [1.59430998E12, 33616.666666666664], [1.59430986E12, 3460.7]], "isOverall": false, "label": "School Infra Map SchoolWise", "isController": false}, {"data": [[1.59430986E12, 7667.566666666666]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59430998E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 11.799999999999999, "minX": 1.59430986E12, "maxY": 3597.229999999999, "series": [{"data": [[1.59430992E12, 96.02409638554221], [1.59430998E12, 75.42995169082121], [1.59430986E12, 11.799999999999999]], "isOverall": false, "label": "School Infra Map SchoolWise", "isController": false}, {"data": [[1.59430986E12, 3597.229999999999]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59430998E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2217.0, "minX": 1.59430986E12, "maxY": 108255.0, "series": [{"data": [[1.59430992E12, 71584.0], [1.59430998E12, 108255.0], [1.59430986E12, 10917.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.59430992E12, 48277.0], [1.59430998E12, 81629.0], [1.59430986E12, 2217.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.59430992E12, 71584.0], [1.59430998E12, 106311.6], [1.59430986E12, 9939.900000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.59430992E12, 71584.0], [1.59430998E12, 108097.92], [1.59430986E12, 10879.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.59430992E12, 71584.0], [1.59430998E12, 106752.4], [1.59430986E12, 10407.9]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59430998E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 5257.0, "minX": 1.0, "maxY": 105633.0, "series": [{"data": [[32.0, 10397.0], [2.0, 88848.5], [8.0, 99794.0], [34.0, 55222.0], [10.0, 102920.5], [11.0, 95082.0], [3.0, 86841.5], [12.0, 102606.5], [53.0, 9440.0], [14.0, 5257.0], [1.0, 70946.0], [4.0, 88622.5], [5.0, 92392.0], [86.0, 7239.5], [84.0, 8624.5], [21.0, 105076.0], [6.0, 53296.0], [28.0, 105633.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[19.0, 60045.0], [10.0, 60031.0], [25.0, 60304.0], [26.0, 60015.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 86.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 5257.0, "minX": 1.0, "maxY": 60304.0, "series": [{"data": [[32.0, 10397.0], [2.0, 16736.5], [8.0, 27632.0], [34.0, 12229.0], [10.0, 30903.5], [11.0, 17781.0], [3.0, 11472.0], [12.0, 31474.5], [53.0, 9440.0], [14.0, 5257.0], [1.0, 10339.0], [4.0, 15386.5], [5.0, 15436.0], [86.0, 7239.5], [84.0, 8624.0], [21.0, 40067.0], [6.0, 15481.5], [28.0, 47908.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[19.0, 60045.0], [10.0, 60031.0], [25.0, 60304.0], [26.0, 60015.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 86.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.59430986E12, "maxY": 10.0, "series": [{"data": [[1.59430986E12, 10.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59430986E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.59430986E12, "maxY": 5.166666666666667, "series": [{"data": [[1.59430992E12, 0.05], [1.59430998E12, 3.45], [1.59430986E12, 5.166666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.59430992E12, 1.3333333333333333]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59430998E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.59430986E12, "maxY": 5.0, "series": [{"data": [[1.59430992E12, 0.05], [1.59430998E12, 3.45], [1.59430986E12, 0.16666666666666666]], "isOverall": false, "label": "School Infra Map SchoolWise-success", "isController": false}, {"data": [[1.59430992E12, 1.3333333333333333]], "isOverall": false, "label": "School Infra Map SchoolWise-failure", "isController": false}, {"data": [[1.59430986E12, 5.0]], "isOverall": false, "label": "Login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59430998E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.59430986E12, "maxY": 5.166666666666667, "series": [{"data": [[1.59430992E12, 0.05], [1.59430998E12, 3.45], [1.59430986E12, 5.166666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.59430992E12, 1.3333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59430998E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

