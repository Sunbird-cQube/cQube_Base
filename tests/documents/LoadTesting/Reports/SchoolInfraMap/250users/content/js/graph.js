/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 867.0, "minX": 0.0, "maxY": 92381.0, "series": [{"data": [[0.0, 9891.0], [0.1, 9891.0], [0.2, 9891.0], [0.3, 9891.0], [0.4, 10937.0], [0.5, 10937.0], [0.6, 10937.0], [0.7, 10937.0], [0.8, 10967.0], [0.9, 10967.0], [1.0, 10967.0], [1.1, 10967.0], [1.2, 10967.0], [1.3, 29560.0], [1.4, 29560.0], [1.5, 29560.0], [1.6, 35476.0], [1.7, 35476.0], [1.8, 35476.0], [1.9, 35476.0], [2.0, 40079.0], [2.1, 40079.0], [2.2, 40079.0], [2.3, 40079.0], [2.4, 40587.0], [2.5, 40587.0], [2.6, 40587.0], [2.7, 40587.0], [2.8, 40714.0], [2.9, 40714.0], [3.0, 40714.0], [3.1, 40714.0], [3.2, 42457.0], [3.3, 42457.0], [3.4, 42457.0], [3.5, 42457.0], [3.6, 43966.0], [3.7, 43966.0], [3.8, 43966.0], [3.9, 43966.0], [4.0, 45193.0], [4.1, 45193.0], [4.2, 45193.0], [4.3, 45193.0], [4.4, 53710.0], [4.5, 53710.0], [4.6, 53710.0], [4.7, 53710.0], [4.8, 57094.0], [4.9, 57094.0], [5.0, 57094.0], [5.1, 57094.0], [5.2, 57959.0], [5.3, 57959.0], [5.4, 57959.0], [5.5, 57959.0], [5.6, 57959.0], [5.7, 60016.0], [5.8, 60016.0], [5.9, 60016.0], [6.0, 60016.0], [6.1, 60016.0], [6.2, 60016.0], [6.3, 60016.0], [6.4, 60017.0], [6.5, 60017.0], [6.6, 60017.0], [6.7, 60017.0], [6.8, 60017.0], [6.9, 60021.0], [7.0, 60021.0], [7.1, 60021.0], [7.2, 60021.0], [7.3, 60022.0], [7.4, 60022.0], [7.5, 60022.0], [7.6, 60022.0], [7.7, 60025.0], [7.8, 60025.0], [7.9, 60025.0], [8.0, 60025.0], [8.1, 60031.0], [8.2, 60031.0], [8.3, 60031.0], [8.4, 60031.0], [8.5, 60045.0], [8.6, 60045.0], [8.7, 60045.0], [8.8, 60045.0], [8.9, 60057.0], [9.0, 60057.0], [9.1, 60057.0], [9.2, 60057.0], [9.3, 60076.0], [9.4, 60076.0], [9.5, 60076.0], [9.6, 60076.0], [9.7, 60078.0], [9.8, 60078.0], [9.9, 60078.0], [10.0, 60078.0], [10.1, 60302.0], [10.2, 60302.0], [10.3, 60302.0], [10.4, 60302.0], [10.5, 60395.0], [10.6, 60395.0], [10.7, 60395.0], [10.8, 60395.0], [10.9, 60398.0], [11.0, 60398.0], [11.1, 60398.0], [11.2, 60398.0], [11.3, 60400.0], [11.4, 60400.0], [11.5, 60400.0], [11.6, 60400.0], [11.7, 60401.0], [11.8, 60401.0], [11.9, 60401.0], [12.0, 60401.0], [12.1, 60405.0], [12.2, 60405.0], [12.3, 60405.0], [12.4, 60405.0], [12.5, 60405.0], [12.6, 60405.0], [12.7, 60405.0], [12.8, 60405.0], [12.9, 60407.0], [13.0, 60407.0], [13.1, 60407.0], [13.2, 60407.0], [13.3, 60407.0], [13.4, 60407.0], [13.5, 60407.0], [13.6, 60407.0], [13.7, 60408.0], [13.8, 60408.0], [13.9, 60408.0], [14.0, 60408.0], [14.1, 60413.0], [14.2, 60413.0], [14.3, 60413.0], [14.4, 60413.0], [14.5, 60415.0], [14.6, 60415.0], [14.7, 60415.0], [14.8, 60415.0], [14.9, 60424.0], [15.0, 60424.0], [15.1, 60424.0], [15.2, 60424.0], [15.3, 60550.0], [15.4, 60550.0], [15.5, 60550.0], [15.6, 60550.0], [15.7, 61214.0], [15.8, 61214.0], [15.9, 61214.0], [16.0, 61214.0], [16.1, 61339.0], [16.2, 61339.0], [16.3, 61339.0], [16.4, 61339.0], [16.5, 64404.0], [16.6, 64404.0], [16.7, 64404.0], [16.8, 64404.0], [16.9, 64734.0], [17.0, 64734.0], [17.1, 64734.0], [17.2, 64734.0], [17.3, 64901.0], [17.4, 64901.0], [17.5, 64901.0], [17.6, 64913.0], [17.7, 64913.0], [17.8, 64913.0], [17.9, 64913.0], [18.0, 68698.0], [18.1, 68698.0], [18.2, 68698.0], [18.3, 68698.0], [18.4, 68711.0], [18.5, 68711.0], [18.6, 68711.0], [18.7, 68711.0], [18.8, 68753.0], [18.9, 68753.0], [19.0, 68753.0], [19.1, 68753.0], [19.2, 68847.0], [19.3, 68847.0], [19.4, 68847.0], [19.5, 68847.0], [19.6, 68970.0], [19.7, 68970.0], [19.8, 68970.0], [19.9, 68970.0], [20.0, 69020.0], [20.1, 69020.0], [20.2, 69020.0], [20.3, 69020.0], [20.4, 69062.0], [20.5, 69062.0], [20.6, 69062.0], [20.7, 69062.0], [20.8, 69132.0], [20.9, 69132.0], [21.0, 69132.0], [21.1, 69132.0], [21.2, 69418.0], [21.3, 69418.0], [21.4, 69418.0], [21.5, 69418.0], [21.6, 69538.0], [21.7, 69538.0], [21.8, 69538.0], [21.9, 69538.0], [22.0, 69596.0], [22.1, 69596.0], [22.2, 69596.0], [22.3, 69596.0], [22.4, 69733.0], [22.5, 69733.0], [22.6, 69733.0], [22.7, 69733.0], [22.8, 70035.0], [22.9, 70035.0], [23.0, 70035.0], [23.1, 70035.0], [23.2, 70063.0], [23.3, 70063.0], [23.4, 70063.0], [23.5, 70063.0], [23.6, 70319.0], [23.7, 70319.0], [23.8, 70319.0], [23.9, 70319.0], [24.0, 70448.0], [24.1, 70448.0], [24.2, 70448.0], [24.3, 70448.0], [24.4, 70583.0], [24.5, 70583.0], [24.6, 70583.0], [24.7, 70583.0], [24.8, 70913.0], [24.9, 70913.0], [25.0, 70913.0], [25.1, 70913.0], [25.2, 71078.0], [25.3, 71078.0], [25.4, 71078.0], [25.5, 71078.0], [25.6, 71286.0], [25.7, 71286.0], [25.8, 71286.0], [25.9, 71286.0], [26.0, 71554.0], [26.1, 71554.0], [26.2, 71554.0], [26.3, 71554.0], [26.4, 71941.0], [26.5, 71941.0], [26.6, 71941.0], [26.7, 71941.0], [26.8, 72068.0], [26.9, 72068.0], [27.0, 72068.0], [27.1, 72068.0], [27.2, 72208.0], [27.3, 72208.0], [27.4, 72208.0], [27.5, 72208.0], [27.6, 72334.0], [27.7, 72334.0], [27.8, 72334.0], [27.9, 72334.0], [28.0, 72567.0], [28.1, 72567.0], [28.2, 72567.0], [28.3, 72567.0], [28.4, 72713.0], [28.5, 72713.0], [28.6, 72713.0], [28.7, 72713.0], [28.8, 73061.0], [28.9, 73061.0], [29.0, 73061.0], [29.1, 73061.0], [29.2, 73521.0], [29.3, 73521.0], [29.4, 73521.0], [29.5, 73521.0], [29.6, 73562.0], [29.7, 73562.0], [29.8, 73562.0], [29.9, 73562.0], [30.0, 73621.0], [30.1, 73621.0], [30.2, 73621.0], [30.3, 73621.0], [30.4, 73701.0], [30.5, 73701.0], [30.6, 73701.0], [30.7, 73701.0], [30.8, 73794.0], [30.9, 73794.0], [31.0, 73794.0], [31.1, 73794.0], [31.2, 73822.0], [31.3, 73822.0], [31.4, 73822.0], [31.5, 73822.0], [31.6, 74058.0], [31.7, 74058.0], [31.8, 74058.0], [31.9, 74058.0], [32.0, 74116.0], [32.1, 74116.0], [32.2, 74116.0], [32.3, 74116.0], [32.4, 74133.0], [32.5, 74133.0], [32.6, 74133.0], [32.7, 74133.0], [32.8, 74212.0], [32.9, 74212.0], [33.0, 74212.0], [33.1, 74212.0], [33.2, 74433.0], [33.3, 74433.0], [33.4, 74433.0], [33.5, 74433.0], [33.6, 74436.0], [33.7, 74436.0], [33.8, 74436.0], [33.9, 74436.0], [34.0, 74542.0], [34.1, 74542.0], [34.2, 74542.0], [34.3, 74542.0], [34.4, 74757.0], [34.5, 74757.0], [34.6, 74757.0], [34.7, 74757.0], [34.8, 74905.0], [34.9, 74905.0], [35.0, 74905.0], [35.1, 74905.0], [35.2, 74916.0], [35.3, 74916.0], [35.4, 74916.0], [35.5, 74916.0], [35.6, 75104.0], [35.7, 75104.0], [35.8, 75104.0], [35.9, 75104.0], [36.0, 75267.0], [36.1, 75267.0], [36.2, 75267.0], [36.3, 75267.0], [36.4, 75351.0], [36.5, 75351.0], [36.6, 75351.0], [36.7, 75351.0], [36.8, 75438.0], [36.9, 75438.0], [37.0, 75438.0], [37.1, 75438.0], [37.2, 75947.0], [37.3, 75947.0], [37.4, 75947.0], [37.5, 75947.0], [37.6, 76028.0], [37.7, 76028.0], [37.8, 76028.0], [37.9, 76028.0], [38.0, 76307.0], [38.1, 76307.0], [38.2, 76307.0], [38.3, 76307.0], [38.4, 76312.0], [38.5, 76312.0], [38.6, 76312.0], [38.7, 76312.0], [38.8, 76407.0], [38.9, 76407.0], [39.0, 76407.0], [39.1, 76407.0], [39.2, 76441.0], [39.3, 76441.0], [39.4, 76441.0], [39.5, 76441.0], [39.6, 76471.0], [39.7, 76471.0], [39.8, 76471.0], [39.9, 76471.0], [40.0, 76481.0], [40.1, 76481.0], [40.2, 76481.0], [40.3, 76481.0], [40.4, 76546.0], [40.5, 76546.0], [40.6, 76546.0], [40.7, 76546.0], [40.8, 76666.0], [40.9, 76666.0], [41.0, 76666.0], [41.1, 76666.0], [41.2, 76988.0], [41.3, 76988.0], [41.4, 76988.0], [41.5, 76988.0], [41.6, 77009.0], [41.7, 77009.0], [41.8, 77009.0], [41.9, 77009.0], [42.0, 77161.0], [42.1, 77161.0], [42.2, 77161.0], [42.3, 77161.0], [42.4, 77307.0], [42.5, 77307.0], [42.6, 77307.0], [42.7, 77307.0], [42.8, 77353.0], [42.9, 77353.0], [43.0, 77353.0], [43.1, 77353.0], [43.2, 77383.0], [43.3, 77383.0], [43.4, 77383.0], [43.5, 77383.0], [43.6, 79156.0], [43.7, 79156.0], [43.8, 79156.0], [43.9, 79156.0], [44.0, 79158.0], [44.1, 79158.0], [44.2, 79158.0], [44.3, 79158.0], [44.4, 79227.0], [44.5, 79227.0], [44.6, 79227.0], [44.7, 79227.0], [44.8, 79515.0], [44.9, 79515.0], [45.0, 79515.0], [45.1, 79515.0], [45.2, 79583.0], [45.3, 79583.0], [45.4, 79583.0], [45.5, 79583.0], [45.6, 79607.0], [45.7, 79607.0], [45.8, 79607.0], [45.9, 79607.0], [46.0, 79905.0], [46.1, 79905.0], [46.2, 79905.0], [46.3, 79905.0], [46.4, 80455.0], [46.5, 80455.0], [46.6, 80455.0], [46.7, 80455.0], [46.8, 80619.0], [46.9, 80619.0], [47.0, 80619.0], [47.1, 80619.0], [47.2, 81016.0], [47.3, 81016.0], [47.4, 81016.0], [47.5, 81016.0], [47.6, 81205.0], [47.7, 81205.0], [47.8, 81205.0], [47.9, 81205.0], [48.0, 81241.0], [48.1, 81241.0], [48.2, 81241.0], [48.3, 81241.0], [48.4, 81532.0], [48.5, 81532.0], [48.6, 81532.0], [48.7, 81532.0], [48.8, 81722.0], [48.9, 81722.0], [49.0, 81722.0], [49.1, 81722.0], [49.2, 82437.0], [49.3, 82437.0], [49.4, 82437.0], [49.5, 82437.0], [49.6, 82460.0], [49.7, 82460.0], [49.8, 82460.0], [49.9, 82460.0], [50.0, 82490.0], [50.1, 82490.0], [50.2, 82490.0], [50.3, 82490.0], [50.4, 82626.0], [50.5, 82626.0], [50.6, 82626.0], [50.7, 82626.0], [50.8, 82685.0], [50.9, 82685.0], [51.0, 82685.0], [51.1, 82685.0], [51.2, 82762.0], [51.3, 82762.0], [51.4, 82762.0], [51.5, 82762.0], [51.6, 82982.0], [51.7, 82982.0], [51.8, 82982.0], [51.9, 82982.0], [52.0, 83002.0], [52.1, 83002.0], [52.2, 83002.0], [52.3, 83002.0], [52.4, 83087.0], [52.5, 83087.0], [52.6, 83087.0], [52.7, 83087.0], [52.8, 83098.0], [52.9, 83098.0], [53.0, 83098.0], [53.1, 83098.0], [53.2, 83685.0], [53.3, 83685.0], [53.4, 83685.0], [53.5, 83685.0], [53.6, 83745.0], [53.7, 83745.0], [53.8, 83745.0], [53.9, 83745.0], [54.0, 83969.0], [54.1, 83969.0], [54.2, 83969.0], [54.3, 83969.0], [54.4, 84250.0], [54.5, 84250.0], [54.6, 84250.0], [54.7, 84250.0], [54.8, 84309.0], [54.9, 84309.0], [55.0, 84309.0], [55.1, 84309.0], [55.2, 84345.0], [55.3, 84345.0], [55.4, 84345.0], [55.5, 84345.0], [55.6, 84366.0], [55.7, 84366.0], [55.8, 84366.0], [55.9, 84366.0], [56.0, 84449.0], [56.1, 84449.0], [56.2, 84449.0], [56.3, 84449.0], [56.4, 84483.0], [56.5, 84483.0], [56.6, 84483.0], [56.7, 84483.0], [56.8, 84694.0], [56.9, 84694.0], [57.0, 84694.0], [57.1, 84694.0], [57.2, 84749.0], [57.3, 84749.0], [57.4, 84749.0], [57.5, 84749.0], [57.6, 84939.0], [57.7, 84939.0], [57.8, 84939.0], [57.9, 84939.0], [58.0, 84951.0], [58.1, 84951.0], [58.2, 84951.0], [58.3, 84951.0], [58.4, 85012.0], [58.5, 85012.0], [58.6, 85012.0], [58.7, 85012.0], [58.8, 85035.0], [58.9, 85035.0], [59.0, 85035.0], [59.1, 85035.0], [59.2, 85053.0], [59.3, 85053.0], [59.4, 85053.0], [59.5, 85053.0], [59.6, 85055.0], [59.7, 85055.0], [59.8, 85055.0], [59.9, 85055.0], [60.0, 85203.0], [60.1, 85203.0], [60.2, 85203.0], [60.3, 85203.0], [60.4, 85292.0], [60.5, 85292.0], [60.6, 85292.0], [60.7, 85292.0], [60.8, 85406.0], [60.9, 85406.0], [61.0, 85406.0], [61.1, 85406.0], [61.2, 85425.0], [61.3, 85425.0], [61.4, 85425.0], [61.5, 85425.0], [61.6, 85481.0], [61.7, 85481.0], [61.8, 85481.0], [61.9, 85481.0], [62.0, 85606.0], [62.1, 85606.0], [62.2, 85606.0], [62.3, 85606.0], [62.4, 85632.0], [62.5, 85632.0], [62.6, 85632.0], [62.7, 85632.0], [62.8, 85986.0], [62.9, 85986.0], [63.0, 85986.0], [63.1, 85986.0], [63.2, 85993.0], [63.3, 85993.0], [63.4, 85993.0], [63.5, 85993.0], [63.6, 86076.0], [63.7, 86076.0], [63.8, 86076.0], [63.9, 86076.0], [64.0, 86304.0], [64.1, 86304.0], [64.2, 86304.0], [64.3, 86304.0], [64.4, 86306.0], [64.5, 86306.0], [64.6, 86306.0], [64.7, 86306.0], [64.8, 86384.0], [64.9, 86384.0], [65.0, 86384.0], [65.1, 86384.0], [65.2, 86496.0], [65.3, 86496.0], [65.4, 86496.0], [65.5, 86496.0], [65.6, 86534.0], [65.7, 86534.0], [65.8, 86534.0], [65.9, 86534.0], [66.0, 86634.0], [66.1, 86634.0], [66.2, 86634.0], [66.3, 86634.0], [66.4, 86899.0], [66.5, 86899.0], [66.6, 86899.0], [66.7, 86899.0], [66.8, 86899.0], [66.9, 86899.0], [67.0, 86899.0], [67.1, 86899.0], [67.2, 86943.0], [67.3, 86943.0], [67.4, 86943.0], [67.5, 86943.0], [67.6, 86952.0], [67.7, 86952.0], [67.8, 86952.0], [67.9, 86952.0], [68.0, 86976.0], [68.1, 86976.0], [68.2, 86976.0], [68.3, 86976.0], [68.4, 87309.0], [68.5, 87309.0], [68.6, 87309.0], [68.7, 87309.0], [68.8, 87427.0], [68.9, 87427.0], [69.0, 87427.0], [69.1, 87427.0], [69.2, 87617.0], [69.3, 87617.0], [69.4, 87617.0], [69.5, 87617.0], [69.6, 87650.0], [69.7, 87650.0], [69.8, 87650.0], [69.9, 87650.0], [70.0, 87958.0], [70.1, 87958.0], [70.2, 87958.0], [70.3, 87958.0], [70.4, 88248.0], [70.5, 88248.0], [70.6, 88248.0], [70.7, 88248.0], [70.8, 88303.0], [70.9, 88303.0], [71.0, 88303.0], [71.1, 88303.0], [71.2, 88331.0], [71.3, 88331.0], [71.4, 88331.0], [71.5, 88331.0], [71.6, 88341.0], [71.7, 88341.0], [71.8, 88341.0], [71.9, 88341.0], [72.0, 88519.0], [72.1, 88519.0], [72.2, 88519.0], [72.3, 88519.0], [72.4, 88704.0], [72.5, 88704.0], [72.6, 88704.0], [72.7, 88704.0], [72.8, 88819.0], [72.9, 88819.0], [73.0, 88819.0], [73.1, 88819.0], [73.2, 88934.0], [73.3, 88934.0], [73.4, 88934.0], [73.5, 88934.0], [73.6, 89016.0], [73.7, 89016.0], [73.8, 89016.0], [73.9, 89016.0], [74.0, 89544.0], [74.1, 89544.0], [74.2, 89544.0], [74.3, 89544.0], [74.4, 89727.0], [74.5, 89727.0], [74.6, 89727.0], [74.7, 89727.0], [74.8, 89746.0], [74.9, 89746.0], [75.0, 89746.0], [75.1, 89746.0], [75.2, 89798.0], [75.3, 89798.0], [75.4, 89798.0], [75.5, 89798.0], [75.6, 89839.0], [75.7, 89839.0], [75.8, 89839.0], [75.9, 89839.0], [76.0, 89856.0], [76.1, 89856.0], [76.2, 89856.0], [76.3, 89856.0], [76.4, 89863.0], [76.5, 89863.0], [76.6, 89863.0], [76.7, 89863.0], [76.8, 90095.0], [76.9, 90095.0], [77.0, 90095.0], [77.1, 90095.0], [77.2, 90098.0], [77.3, 90098.0], [77.4, 90098.0], [77.5, 90098.0], [77.6, 90098.0], [77.7, 90217.0], [77.8, 90217.0], [77.9, 90217.0], [78.0, 90217.0], [78.1, 90246.0], [78.2, 90246.0], [78.3, 90246.0], [78.4, 90246.0], [78.5, 90333.0], [78.6, 90333.0], [78.7, 90333.0], [78.8, 90333.0], [78.9, 90362.0], [79.0, 90362.0], [79.1, 90362.0], [79.2, 90362.0], [79.3, 90456.0], [79.4, 90456.0], [79.5, 90456.0], [79.6, 90456.0], [79.7, 90457.0], [79.8, 90457.0], [79.9, 90457.0], [80.0, 90457.0], [80.1, 90488.0], [80.2, 90488.0], [80.3, 90488.0], [80.4, 90488.0], [80.5, 90533.0], [80.6, 90533.0], [80.7, 90533.0], [80.8, 90533.0], [80.9, 90583.0], [81.0, 90583.0], [81.1, 90583.0], [81.2, 90583.0], [81.3, 90619.0], [81.4, 90619.0], [81.5, 90619.0], [81.6, 90619.0], [81.7, 90660.0], [81.8, 90660.0], [81.9, 90660.0], [82.0, 90660.0], [82.1, 90709.0], [82.2, 90709.0], [82.3, 90709.0], [82.4, 90709.0], [82.5, 90764.0], [82.6, 90764.0], [82.7, 90764.0], [82.8, 90764.0], [82.9, 90773.0], [83.0, 90773.0], [83.1, 90773.0], [83.2, 90773.0], [83.3, 90781.0], [83.4, 90781.0], [83.5, 90781.0], [83.6, 90781.0], [83.7, 90806.0], [83.8, 90806.0], [83.9, 90806.0], [84.0, 90806.0], [84.1, 90807.0], [84.2, 90807.0], [84.3, 90807.0], [84.4, 90807.0], [84.5, 90809.0], [84.6, 90809.0], [84.7, 90809.0], [84.8, 90809.0], [84.9, 90827.0], [85.0, 90827.0], [85.1, 90827.0], [85.2, 90827.0], [85.3, 90899.0], [85.4, 90899.0], [85.5, 90899.0], [85.6, 90899.0], [85.7, 90901.0], [85.8, 90901.0], [85.9, 90901.0], [86.0, 90901.0], [86.1, 90904.0], [86.2, 90904.0], [86.3, 90904.0], [86.4, 90904.0], [86.5, 91138.0], [86.6, 91138.0], [86.7, 91138.0], [86.8, 91138.0], [86.9, 91158.0], [87.0, 91158.0], [87.1, 91158.0], [87.2, 91158.0], [87.3, 91187.0], [87.4, 91187.0], [87.5, 91187.0], [87.6, 91187.0], [87.7, 91213.0], [87.8, 91213.0], [87.9, 91213.0], [88.0, 91213.0], [88.1, 91292.0], [88.2, 91292.0], [88.3, 91292.0], [88.4, 91292.0], [88.5, 91465.0], [88.6, 91465.0], [88.7, 91465.0], [88.8, 91465.0], [88.9, 91518.0], [89.0, 91518.0], [89.1, 91518.0], [89.2, 91518.0], [89.3, 91585.0], [89.4, 91585.0], [89.5, 91585.0], [89.6, 91585.0], [89.7, 91665.0], [89.8, 91665.0], [89.9, 91665.0], [90.0, 91665.0], [90.1, 91696.0], [90.2, 91696.0], [90.3, 91696.0], [90.4, 91696.0], [90.5, 91868.0], [90.6, 91868.0], [90.7, 91868.0], [90.8, 91868.0], [90.9, 91877.0], [91.0, 91877.0], [91.1, 91877.0], [91.2, 91877.0], [91.3, 91877.0], [91.4, 91877.0], [91.5, 91877.0], [91.6, 91877.0], [91.7, 91894.0], [91.8, 91894.0], [91.9, 91894.0], [92.0, 91894.0], [92.1, 91960.0], [92.2, 91960.0], [92.3, 91960.0], [92.4, 91960.0], [92.5, 91994.0], [92.6, 91994.0], [92.7, 91994.0], [92.8, 91994.0], [92.9, 92001.0], [93.0, 92001.0], [93.1, 92001.0], [93.2, 92001.0], [93.3, 92005.0], [93.4, 92005.0], [93.5, 92005.0], [93.6, 92005.0], [93.7, 92016.0], [93.8, 92016.0], [93.9, 92016.0], [94.0, 92016.0], [94.1, 92130.0], [94.2, 92130.0], [94.3, 92130.0], [94.4, 92130.0], [94.5, 92143.0], [94.6, 92143.0], [94.7, 92143.0], [94.8, 92143.0], [94.9, 92157.0], [95.0, 92157.0], [95.1, 92157.0], [95.2, 92157.0], [95.3, 92207.0], [95.4, 92207.0], [95.5, 92207.0], [95.6, 92207.0], [95.7, 92253.0], [95.8, 92253.0], [95.9, 92253.0], [96.0, 92253.0], [96.1, 92254.0], [96.2, 92254.0], [96.3, 92254.0], [96.4, 92254.0], [96.5, 92261.0], [96.6, 92261.0], [96.7, 92261.0], [96.8, 92261.0], [96.9, 92264.0], [97.0, 92264.0], [97.1, 92264.0], [97.2, 92264.0], [97.3, 92264.0], [97.4, 92264.0], [97.5, 92264.0], [97.6, 92264.0], [97.7, 92291.0], [97.8, 92291.0], [97.9, 92291.0], [98.0, 92291.0], [98.1, 92328.0], [98.2, 92328.0], [98.3, 92328.0], [98.4, 92328.0], [98.5, 92344.0], [98.6, 92344.0], [98.7, 92344.0], [98.8, 92344.0], [98.9, 92345.0], [99.0, 92345.0], [99.1, 92345.0], [99.2, 92345.0], [99.3, 92347.0], [99.4, 92347.0], [99.5, 92347.0], [99.6, 92347.0], [99.7, 92381.0], [99.8, 92381.0], [99.9, 92381.0], [100.0, 92381.0]], "isOverall": false, "label": "School Infra Map SchoolWise", "isController": false}, {"data": [[0.0, 867.0], [0.1, 867.0], [0.2, 867.0], [0.3, 867.0], [0.4, 965.0], [0.5, 965.0], [0.6, 965.0], [0.7, 965.0], [0.8, 1213.0], [0.9, 1213.0], [1.0, 1213.0], [1.1, 1213.0], [1.2, 1213.0], [1.3, 1274.0], [1.4, 1274.0], [1.5, 1274.0], [1.6, 1462.0], [1.7, 1462.0], [1.8, 1462.0], [1.9, 1462.0], [2.0, 1473.0], [2.1, 1473.0], [2.2, 1473.0], [2.3, 1473.0], [2.4, 1482.0], [2.5, 1482.0], [2.6, 1482.0], [2.7, 1482.0], [2.8, 2035.0], [2.9, 2035.0], [3.0, 2035.0], [3.1, 2035.0], [3.2, 2262.0], [3.3, 2262.0], [3.4, 2262.0], [3.5, 2262.0], [3.6, 2325.0], [3.7, 2325.0], [3.8, 2325.0], [3.9, 2325.0], [4.0, 2387.0], [4.1, 2387.0], [4.2, 2387.0], [4.3, 2387.0], [4.4, 2406.0], [4.5, 2406.0], [4.6, 2406.0], [4.7, 2406.0], [4.8, 2469.0], [4.9, 2469.0], [5.0, 2469.0], [5.1, 2469.0], [5.2, 2558.0], [5.3, 2558.0], [5.4, 2558.0], [5.5, 2558.0], [5.6, 2558.0], [5.7, 2576.0], [5.8, 2576.0], [5.9, 2576.0], [6.0, 2576.0], [6.1, 2595.0], [6.2, 2595.0], [6.3, 2595.0], [6.4, 2595.0], [6.5, 2655.0], [6.6, 2655.0], [6.7, 2655.0], [6.8, 2655.0], [6.9, 2814.0], [7.0, 2814.0], [7.1, 2814.0], [7.2, 2814.0], [7.3, 2835.0], [7.4, 2835.0], [7.5, 2835.0], [7.6, 2835.0], [7.7, 2854.0], [7.8, 2854.0], [7.9, 2854.0], [8.0, 2854.0], [8.1, 2885.0], [8.2, 2885.0], [8.3, 2885.0], [8.4, 2885.0], [8.5, 2896.0], [8.6, 2896.0], [8.7, 2896.0], [8.8, 2896.0], [8.9, 2956.0], [9.0, 2956.0], [9.1, 2956.0], [9.2, 2956.0], [9.3, 3016.0], [9.4, 3016.0], [9.5, 3016.0], [9.6, 3016.0], [9.7, 3047.0], [9.8, 3047.0], [9.9, 3047.0], [10.0, 3047.0], [10.1, 3058.0], [10.2, 3058.0], [10.3, 3058.0], [10.4, 3058.0], [10.5, 3064.0], [10.6, 3064.0], [10.7, 3064.0], [10.8, 3064.0], [10.9, 3121.0], [11.0, 3121.0], [11.1, 3121.0], [11.2, 3121.0], [11.3, 3126.0], [11.4, 3126.0], [11.5, 3126.0], [11.6, 3126.0], [11.7, 3140.0], [11.8, 3140.0], [11.9, 3140.0], [12.0, 3140.0], [12.1, 3165.0], [12.2, 3165.0], [12.3, 3165.0], [12.4, 3165.0], [12.5, 3182.0], [12.6, 3182.0], [12.7, 3182.0], [12.8, 3182.0], [12.9, 3195.0], [13.0, 3195.0], [13.1, 3195.0], [13.2, 3195.0], [13.3, 3207.0], [13.4, 3207.0], [13.5, 3207.0], [13.6, 3207.0], [13.7, 3260.0], [13.8, 3260.0], [13.9, 3260.0], [14.0, 3260.0], [14.1, 3286.0], [14.2, 3286.0], [14.3, 3286.0], [14.4, 3286.0], [14.5, 3363.0], [14.6, 3363.0], [14.7, 3363.0], [14.8, 3363.0], [14.9, 3429.0], [15.0, 3429.0], [15.1, 3429.0], [15.2, 3429.0], [15.3, 3433.0], [15.4, 3433.0], [15.5, 3433.0], [15.6, 3433.0], [15.7, 3464.0], [15.8, 3464.0], [15.9, 3464.0], [16.0, 3464.0], [16.1, 3468.0], [16.2, 3468.0], [16.3, 3468.0], [16.4, 3468.0], [16.5, 3476.0], [16.6, 3476.0], [16.7, 3476.0], [16.8, 3476.0], [16.9, 3480.0], [17.0, 3480.0], [17.1, 3480.0], [17.2, 3480.0], [17.3, 3513.0], [17.4, 3513.0], [17.5, 3513.0], [17.6, 3530.0], [17.7, 3530.0], [17.8, 3530.0], [17.9, 3530.0], [18.0, 3536.0], [18.1, 3536.0], [18.2, 3536.0], [18.3, 3536.0], [18.4, 3566.0], [18.5, 3566.0], [18.6, 3566.0], [18.7, 3566.0], [18.8, 3567.0], [18.9, 3567.0], [19.0, 3567.0], [19.1, 3567.0], [19.2, 3624.0], [19.3, 3624.0], [19.4, 3624.0], [19.5, 3624.0], [19.6, 3629.0], [19.7, 3629.0], [19.8, 3629.0], [19.9, 3629.0], [20.0, 3745.0], [20.1, 3745.0], [20.2, 3745.0], [20.3, 3745.0], [20.4, 3763.0], [20.5, 3763.0], [20.6, 3763.0], [20.7, 3763.0], [20.8, 3793.0], [20.9, 3793.0], [21.0, 3793.0], [21.1, 3793.0], [21.2, 3815.0], [21.3, 3815.0], [21.4, 3815.0], [21.5, 3815.0], [21.6, 3901.0], [21.7, 3901.0], [21.8, 3901.0], [21.9, 3901.0], [22.0, 3909.0], [22.1, 3909.0], [22.2, 3909.0], [22.3, 3909.0], [22.4, 3933.0], [22.5, 3933.0], [22.6, 3933.0], [22.7, 3933.0], [22.8, 3985.0], [22.9, 3985.0], [23.0, 3985.0], [23.1, 3985.0], [23.2, 3991.0], [23.3, 3991.0], [23.4, 3991.0], [23.5, 3991.0], [23.6, 4025.0], [23.7, 4025.0], [23.8, 4025.0], [23.9, 4025.0], [24.0, 4139.0], [24.1, 4139.0], [24.2, 4139.0], [24.3, 4139.0], [24.4, 5125.0], [24.5, 5125.0], [24.6, 5125.0], [24.7, 5125.0], [24.8, 5131.0], [24.9, 5131.0], [25.0, 5131.0], [25.1, 5131.0], [25.2, 5148.0], [25.3, 5148.0], [25.4, 5148.0], [25.5, 5148.0], [25.6, 5181.0], [25.7, 5181.0], [25.8, 5181.0], [25.9, 5181.0], [26.0, 5238.0], [26.1, 5238.0], [26.2, 5238.0], [26.3, 5238.0], [26.4, 5362.0], [26.5, 5362.0], [26.6, 5362.0], [26.7, 5362.0], [26.8, 5363.0], [26.9, 5363.0], [27.0, 5363.0], [27.1, 5363.0], [27.2, 5378.0], [27.3, 5378.0], [27.4, 5378.0], [27.5, 5378.0], [27.6, 5452.0], [27.7, 5452.0], [27.8, 5452.0], [27.9, 5452.0], [28.0, 5463.0], [28.1, 5463.0], [28.2, 5463.0], [28.3, 5463.0], [28.4, 5480.0], [28.5, 5480.0], [28.6, 5480.0], [28.7, 5480.0], [28.8, 5481.0], [28.9, 5481.0], [29.0, 5481.0], [29.1, 5481.0], [29.2, 5498.0], [29.3, 5498.0], [29.4, 5498.0], [29.5, 5498.0], [29.6, 5507.0], [29.7, 5507.0], [29.8, 5507.0], [29.9, 5507.0], [30.0, 5518.0], [30.1, 5518.0], [30.2, 5518.0], [30.3, 5518.0], [30.4, 5521.0], [30.5, 5521.0], [30.6, 5521.0], [30.7, 5521.0], [30.8, 5523.0], [30.9, 5523.0], [31.0, 5523.0], [31.1, 5523.0], [31.2, 5527.0], [31.3, 5527.0], [31.4, 5527.0], [31.5, 5527.0], [31.6, 5536.0], [31.7, 5536.0], [31.8, 5536.0], [31.9, 5536.0], [32.0, 5536.0], [32.1, 5536.0], [32.2, 5536.0], [32.3, 5536.0], [32.4, 5537.0], [32.5, 5537.0], [32.6, 5537.0], [32.7, 5537.0], [32.8, 5538.0], [32.9, 5538.0], [33.0, 5538.0], [33.1, 5538.0], [33.2, 5541.0], [33.3, 5541.0], [33.4, 5541.0], [33.5, 5541.0], [33.6, 5593.0], [33.7, 5593.0], [33.8, 5593.0], [33.9, 5593.0], [34.0, 5654.0], [34.1, 5654.0], [34.2, 5654.0], [34.3, 5654.0], [34.4, 5808.0], [34.5, 5808.0], [34.6, 5808.0], [34.7, 5808.0], [34.8, 5812.0], [34.9, 5812.0], [35.0, 5812.0], [35.1, 5812.0], [35.2, 5816.0], [35.3, 5816.0], [35.4, 5816.0], [35.5, 5816.0], [35.6, 5828.0], [35.7, 5828.0], [35.8, 5828.0], [35.9, 5828.0], [36.0, 5833.0], [36.1, 5833.0], [36.2, 5833.0], [36.3, 5833.0], [36.4, 5834.0], [36.5, 5834.0], [36.6, 5834.0], [36.7, 5834.0], [36.8, 5839.0], [36.9, 5839.0], [37.0, 5839.0], [37.1, 5839.0], [37.2, 5873.0], [37.3, 5873.0], [37.4, 5873.0], [37.5, 5873.0], [37.6, 5875.0], [37.7, 5875.0], [37.8, 5875.0], [37.9, 5875.0], [38.0, 5914.0], [38.1, 5914.0], [38.2, 5914.0], [38.3, 5914.0], [38.4, 6088.0], [38.5, 6088.0], [38.6, 6088.0], [38.7, 6088.0], [38.8, 6132.0], [38.9, 6132.0], [39.0, 6132.0], [39.1, 6132.0], [39.2, 6376.0], [39.3, 6376.0], [39.4, 6376.0], [39.5, 6376.0], [39.6, 6428.0], [39.7, 6428.0], [39.8, 6428.0], [39.9, 6428.0], [40.0, 6751.0], [40.1, 6751.0], [40.2, 6751.0], [40.3, 6751.0], [40.4, 6760.0], [40.5, 6760.0], [40.6, 6760.0], [40.7, 6760.0], [40.8, 6794.0], [40.9, 6794.0], [41.0, 6794.0], [41.1, 6794.0], [41.2, 6802.0], [41.3, 6802.0], [41.4, 6802.0], [41.5, 6802.0], [41.6, 6809.0], [41.7, 6809.0], [41.8, 6809.0], [41.9, 6809.0], [42.0, 6817.0], [42.1, 6817.0], [42.2, 6817.0], [42.3, 6817.0], [42.4, 6840.0], [42.5, 6840.0], [42.6, 6840.0], [42.7, 6840.0], [42.8, 6846.0], [42.9, 6846.0], [43.0, 6846.0], [43.1, 6846.0], [43.2, 6865.0], [43.3, 6865.0], [43.4, 6865.0], [43.5, 6865.0], [43.6, 6867.0], [43.7, 6867.0], [43.8, 6867.0], [43.9, 6867.0], [44.0, 6867.0], [44.1, 6867.0], [44.2, 6867.0], [44.3, 6867.0], [44.4, 6881.0], [44.5, 6881.0], [44.6, 6881.0], [44.7, 6881.0], [44.8, 6915.0], [44.9, 6915.0], [45.0, 6915.0], [45.1, 6915.0], [45.2, 6929.0], [45.3, 6929.0], [45.4, 6929.0], [45.5, 6929.0], [45.6, 6929.0], [45.7, 6929.0], [45.8, 6929.0], [45.9, 6929.0], [46.0, 6939.0], [46.1, 6939.0], [46.2, 6939.0], [46.3, 6939.0], [46.4, 6940.0], [46.5, 6940.0], [46.6, 6940.0], [46.7, 6940.0], [46.8, 6941.0], [46.9, 6941.0], [47.0, 6941.0], [47.1, 6941.0], [47.2, 6942.0], [47.3, 6942.0], [47.4, 6942.0], [47.5, 6942.0], [47.6, 6949.0], [47.7, 6949.0], [47.8, 6949.0], [47.9, 6949.0], [48.0, 6953.0], [48.1, 6953.0], [48.2, 6953.0], [48.3, 6953.0], [48.4, 6958.0], [48.5, 6958.0], [48.6, 6958.0], [48.7, 6958.0], [48.8, 6971.0], [48.9, 6971.0], [49.0, 6971.0], [49.1, 6971.0], [49.2, 6981.0], [49.3, 6981.0], [49.4, 6981.0], [49.5, 6981.0], [49.6, 6983.0], [49.7, 6983.0], [49.8, 6983.0], [49.9, 6983.0], [50.0, 7004.0], [50.1, 7004.0], [50.2, 7004.0], [50.3, 7004.0], [50.4, 7005.0], [50.5, 7005.0], [50.6, 7005.0], [50.7, 7005.0], [50.8, 7006.0], [50.9, 7006.0], [51.0, 7006.0], [51.1, 7006.0], [51.2, 7011.0], [51.3, 7011.0], [51.4, 7011.0], [51.5, 7011.0], [51.6, 7013.0], [51.7, 7013.0], [51.8, 7013.0], [51.9, 7013.0], [52.0, 7014.0], [52.1, 7014.0], [52.2, 7014.0], [52.3, 7014.0], [52.4, 7031.0], [52.5, 7031.0], [52.6, 7031.0], [52.7, 7031.0], [52.8, 7035.0], [52.9, 7035.0], [53.0, 7035.0], [53.1, 7035.0], [53.2, 7038.0], [53.3, 7038.0], [53.4, 7038.0], [53.5, 7038.0], [53.6, 7046.0], [53.7, 7046.0], [53.8, 7046.0], [53.9, 7046.0], [54.0, 7058.0], [54.1, 7058.0], [54.2, 7058.0], [54.3, 7058.0], [54.4, 7066.0], [54.5, 7066.0], [54.6, 7066.0], [54.7, 7066.0], [54.8, 7073.0], [54.9, 7073.0], [55.0, 7073.0], [55.1, 7073.0], [55.2, 7073.0], [55.3, 7073.0], [55.4, 7073.0], [55.5, 7073.0], [55.6, 7076.0], [55.7, 7076.0], [55.8, 7076.0], [55.9, 7076.0], [56.0, 7081.0], [56.1, 7081.0], [56.2, 7081.0], [56.3, 7081.0], [56.4, 7093.0], [56.5, 7093.0], [56.6, 7093.0], [56.7, 7093.0], [56.8, 7118.0], [56.9, 7118.0], [57.0, 7118.0], [57.1, 7118.0], [57.2, 7135.0], [57.3, 7135.0], [57.4, 7135.0], [57.5, 7135.0], [57.6, 7136.0], [57.7, 7136.0], [57.8, 7136.0], [57.9, 7136.0], [58.0, 7136.0], [58.1, 7136.0], [58.2, 7136.0], [58.3, 7136.0], [58.4, 7139.0], [58.5, 7139.0], [58.6, 7139.0], [58.7, 7139.0], [58.8, 7150.0], [58.9, 7150.0], [59.0, 7150.0], [59.1, 7150.0], [59.2, 7155.0], [59.3, 7155.0], [59.4, 7155.0], [59.5, 7155.0], [59.6, 7163.0], [59.7, 7163.0], [59.8, 7163.0], [59.9, 7163.0], [60.0, 7164.0], [60.1, 7164.0], [60.2, 7164.0], [60.3, 7164.0], [60.4, 7168.0], [60.5, 7168.0], [60.6, 7168.0], [60.7, 7168.0], [60.8, 7177.0], [60.9, 7177.0], [61.0, 7177.0], [61.1, 7177.0], [61.2, 7195.0], [61.3, 7195.0], [61.4, 7195.0], [61.5, 7195.0], [61.6, 7196.0], [61.7, 7196.0], [61.8, 7196.0], [61.9, 7196.0], [62.0, 7199.0], [62.1, 7199.0], [62.2, 7199.0], [62.3, 7199.0], [62.4, 7200.0], [62.5, 7200.0], [62.6, 7200.0], [62.7, 7200.0], [62.8, 7200.0], [62.9, 7200.0], [63.0, 7200.0], [63.1, 7200.0], [63.2, 7210.0], [63.3, 7210.0], [63.4, 7210.0], [63.5, 7210.0], [63.6, 7218.0], [63.7, 7218.0], [63.8, 7218.0], [63.9, 7218.0], [64.0, 7218.0], [64.1, 7218.0], [64.2, 7218.0], [64.3, 7218.0], [64.4, 7219.0], [64.5, 7219.0], [64.6, 7219.0], [64.7, 7219.0], [64.8, 7219.0], [64.9, 7219.0], [65.0, 7219.0], [65.1, 7219.0], [65.2, 7221.0], [65.3, 7221.0], [65.4, 7221.0], [65.5, 7221.0], [65.6, 7221.0], [65.7, 7221.0], [65.8, 7221.0], [65.9, 7221.0], [66.0, 7222.0], [66.1, 7222.0], [66.2, 7222.0], [66.3, 7222.0], [66.4, 7232.0], [66.5, 7232.0], [66.6, 7232.0], [66.7, 7232.0], [66.8, 7253.0], [66.9, 7253.0], [67.0, 7253.0], [67.1, 7253.0], [67.2, 7257.0], [67.3, 7257.0], [67.4, 7257.0], [67.5, 7257.0], [67.6, 7261.0], [67.7, 7261.0], [67.8, 7261.0], [67.9, 7261.0], [68.0, 7271.0], [68.1, 7271.0], [68.2, 7271.0], [68.3, 7271.0], [68.4, 7272.0], [68.5, 7272.0], [68.6, 7272.0], [68.7, 7272.0], [68.8, 7284.0], [68.9, 7284.0], [69.0, 7284.0], [69.1, 7284.0], [69.2, 7287.0], [69.3, 7287.0], [69.4, 7287.0], [69.5, 7287.0], [69.6, 7290.0], [69.7, 7290.0], [69.8, 7290.0], [69.9, 7290.0], [70.0, 7292.0], [70.1, 7292.0], [70.2, 7292.0], [70.3, 7292.0], [70.4, 7294.0], [70.5, 7294.0], [70.6, 7294.0], [70.7, 7294.0], [70.8, 7298.0], [70.9, 7298.0], [71.0, 7298.0], [71.1, 7298.0], [71.2, 7310.0], [71.3, 7310.0], [71.4, 7310.0], [71.5, 7310.0], [71.6, 7316.0], [71.7, 7316.0], [71.8, 7316.0], [71.9, 7316.0], [72.0, 7320.0], [72.1, 7320.0], [72.2, 7320.0], [72.3, 7320.0], [72.4, 7325.0], [72.5, 7325.0], [72.6, 7325.0], [72.7, 7325.0], [72.8, 7347.0], [72.9, 7347.0], [73.0, 7347.0], [73.1, 7347.0], [73.2, 7350.0], [73.3, 7350.0], [73.4, 7350.0], [73.5, 7350.0], [73.6, 7354.0], [73.7, 7354.0], [73.8, 7354.0], [73.9, 7354.0], [74.0, 7356.0], [74.1, 7356.0], [74.2, 7356.0], [74.3, 7356.0], [74.4, 7366.0], [74.5, 7366.0], [74.6, 7366.0], [74.7, 7366.0], [74.8, 7375.0], [74.9, 7375.0], [75.0, 7375.0], [75.1, 7375.0], [75.2, 7376.0], [75.3, 7376.0], [75.4, 7376.0], [75.5, 7376.0], [75.6, 7377.0], [75.7, 7377.0], [75.8, 7377.0], [75.9, 7377.0], [76.0, 7379.0], [76.1, 7379.0], [76.2, 7379.0], [76.3, 7379.0], [76.4, 7379.0], [76.5, 7379.0], [76.6, 7379.0], [76.7, 7379.0], [76.8, 7380.0], [76.9, 7380.0], [77.0, 7380.0], [77.1, 7380.0], [77.2, 7381.0], [77.3, 7381.0], [77.4, 7381.0], [77.5, 7381.0], [77.6, 7382.0], [77.7, 7382.0], [77.8, 7382.0], [77.9, 7382.0], [78.0, 7385.0], [78.1, 7385.0], [78.2, 7385.0], [78.3, 7385.0], [78.4, 7388.0], [78.5, 7388.0], [78.6, 7388.0], [78.7, 7388.0], [78.8, 7389.0], [78.9, 7389.0], [79.0, 7389.0], [79.1, 7389.0], [79.2, 7393.0], [79.3, 7393.0], [79.4, 7393.0], [79.5, 7393.0], [79.6, 7393.0], [79.7, 7395.0], [79.8, 7395.0], [79.9, 7395.0], [80.0, 7395.0], [80.1, 7395.0], [80.2, 7395.0], [80.3, 7395.0], [80.4, 7397.0], [80.5, 7397.0], [80.6, 7397.0], [80.7, 7397.0], [80.8, 7397.0], [80.9, 7400.0], [81.0, 7400.0], [81.1, 7400.0], [81.2, 7400.0], [81.3, 7403.0], [81.4, 7403.0], [81.5, 7403.0], [81.6, 7403.0], [81.7, 7406.0], [81.8, 7406.0], [81.9, 7406.0], [82.0, 7406.0], [82.1, 7410.0], [82.2, 7410.0], [82.3, 7410.0], [82.4, 7410.0], [82.5, 7411.0], [82.6, 7411.0], [82.7, 7411.0], [82.8, 7411.0], [82.9, 7413.0], [83.0, 7413.0], [83.1, 7413.0], [83.2, 7413.0], [83.3, 7414.0], [83.4, 7414.0], [83.5, 7414.0], [83.6, 7414.0], [83.7, 7415.0], [83.8, 7415.0], [83.9, 7415.0], [84.0, 7415.0], [84.1, 7415.0], [84.2, 7415.0], [84.3, 7415.0], [84.4, 7415.0], [84.5, 7415.0], [84.6, 7415.0], [84.7, 7415.0], [84.8, 7415.0], [84.9, 7416.0], [85.0, 7416.0], [85.1, 7416.0], [85.2, 7416.0], [85.3, 7417.0], [85.4, 7417.0], [85.5, 7417.0], [85.6, 7417.0], [85.7, 7418.0], [85.8, 7418.0], [85.9, 7418.0], [86.0, 7418.0], [86.1, 7422.0], [86.2, 7422.0], [86.3, 7422.0], [86.4, 7422.0], [86.5, 7423.0], [86.6, 7423.0], [86.7, 7423.0], [86.8, 7423.0], [86.9, 7428.0], [87.0, 7428.0], [87.1, 7428.0], [87.2, 7428.0], [87.3, 7431.0], [87.4, 7431.0], [87.5, 7431.0], [87.6, 7431.0], [87.7, 7462.0], [87.8, 7462.0], [87.9, 7462.0], [88.0, 7462.0], [88.1, 7463.0], [88.2, 7463.0], [88.3, 7463.0], [88.4, 7463.0], [88.5, 7465.0], [88.6, 7465.0], [88.7, 7465.0], [88.8, 7465.0], [88.9, 7535.0], [89.0, 7535.0], [89.1, 7535.0], [89.2, 7535.0], [89.3, 7578.0], [89.4, 7578.0], [89.5, 7578.0], [89.6, 7578.0], [89.7, 7587.0], [89.8, 7587.0], [89.9, 7587.0], [90.0, 7587.0], [90.1, 7609.0], [90.2, 7609.0], [90.3, 7609.0], [90.4, 7609.0], [90.5, 7626.0], [90.6, 7626.0], [90.7, 7626.0], [90.8, 7626.0], [90.9, 7637.0], [91.0, 7637.0], [91.1, 7637.0], [91.2, 7637.0], [91.3, 7638.0], [91.4, 7638.0], [91.5, 7638.0], [91.6, 7638.0], [91.7, 7638.0], [91.8, 7638.0], [91.9, 7638.0], [92.0, 7638.0], [92.1, 7639.0], [92.2, 7639.0], [92.3, 7639.0], [92.4, 7639.0], [92.5, 7642.0], [92.6, 7642.0], [92.7, 7642.0], [92.8, 7642.0], [92.9, 7648.0], [93.0, 7648.0], [93.1, 7648.0], [93.2, 7648.0], [93.3, 7660.0], [93.4, 7660.0], [93.5, 7660.0], [93.6, 7660.0], [93.7, 7664.0], [93.8, 7664.0], [93.9, 7664.0], [94.0, 7664.0], [94.1, 7664.0], [94.2, 7664.0], [94.3, 7664.0], [94.4, 7664.0], [94.5, 7745.0], [94.6, 7745.0], [94.7, 7745.0], [94.8, 7745.0], [94.9, 7951.0], [95.0, 7951.0], [95.1, 7951.0], [95.2, 7951.0], [95.3, 8043.0], [95.4, 8043.0], [95.5, 8043.0], [95.6, 8043.0], [95.7, 8054.0], [95.8, 8054.0], [95.9, 8054.0], [96.0, 8054.0], [96.1, 8083.0], [96.2, 8083.0], [96.3, 8083.0], [96.4, 8083.0], [96.5, 8090.0], [96.6, 8090.0], [96.7, 8090.0], [96.8, 8090.0], [96.9, 8129.0], [97.0, 8129.0], [97.1, 8129.0], [97.2, 8129.0], [97.3, 8237.0], [97.4, 8237.0], [97.5, 8237.0], [97.6, 8237.0], [97.7, 8412.0], [97.8, 8412.0], [97.9, 8412.0], [98.0, 8412.0], [98.1, 8420.0], [98.2, 8420.0], [98.3, 8420.0], [98.4, 8420.0], [98.5, 8509.0], [98.6, 8509.0], [98.7, 8509.0], [98.8, 8509.0], [98.9, 8562.0], [99.0, 8562.0], [99.1, 8562.0], [99.2, 8562.0], [99.3, 8737.0], [99.4, 8737.0], [99.5, 8737.0], [99.6, 8737.0], [99.7, 8989.0], [99.8, 8989.0], [99.9, 8989.0], [100.0, 8989.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 800.0, "maxY": 24.0, "series": [{"data": [[68700.0, 2.0], [69500.0, 2.0], [69100.0, 1.0], [70300.0, 1.0], [73500.0, 2.0], [71500.0, 1.0], [71900.0, 1.0], [72300.0, 1.0], [72700.0, 1.0], [74700.0, 1.0], [75900.0, 1.0], [76300.0, 2.0], [77100.0, 1.0], [75100.0, 1.0], [79100.0, 2.0], [79500.0, 2.0], [79900.0, 1.0], [81500.0, 1.0], [84300.0, 3.0], [82700.0, 1.0], [83900.0, 1.0], [84700.0, 1.0], [85900.0, 2.0], [86300.0, 3.0], [87900.0, 1.0], [88300.0, 3.0], [88700.0, 1.0], [89500.0, 1.0], [90700.0, 4.0], [91100.0, 3.0], [90300.0, 2.0], [91900.0, 2.0], [91500.0, 2.0], [92300.0, 5.0], [40500.0, 1.0], [40700.0, 1.0], [43900.0, 1.0], [45100.0, 1.0], [53700.0, 1.0], [57900.0, 1.0], [61300.0, 1.0], [60300.0, 3.0], [60500.0, 1.0], [64900.0, 2.0], [64700.0, 1.0], [69000.0, 2.0], [69400.0, 1.0], [68600.0, 1.0], [73000.0, 1.0], [71000.0, 1.0], [72200.0, 1.0], [75400.0, 1.0], [76600.0, 1.0], [77000.0, 1.0], [73800.0, 1.0], [74200.0, 1.0], [80600.0, 1.0], [81000.0, 1.0], [82600.0, 2.0], [83000.0, 3.0], [84200.0, 1.0], [84600.0, 1.0], [85000.0, 4.0], [85400.0, 3.0], [86600.0, 1.0], [87400.0, 1.0], [88200.0, 1.0], [89000.0, 1.0], [89800.0, 3.0], [90600.0, 2.0], [90200.0, 2.0], [91800.0, 4.0], [91400.0, 1.0], [92200.0, 7.0], [68900.0, 1.0], [73700.0, 2.0], [69700.0, 1.0], [70500.0, 1.0], [70900.0, 1.0], [72500.0, 1.0], [74100.0, 2.0], [74500.0, 1.0], [75300.0, 1.0], [74900.0, 2.0], [76500.0, 1.0], [76900.0, 1.0], [77300.0, 3.0], [81700.0, 1.0], [82900.0, 1.0], [83700.0, 1.0], [84900.0, 2.0], [86500.0, 1.0], [86900.0, 3.0], [87300.0, 1.0], [88500.0, 1.0], [89700.0, 3.0], [88900.0, 1.0], [90900.0, 2.0], [90500.0, 2.0], [92100.0, 3.0], [9800.0, 1.0], [10900.0, 2.0], [29500.0, 1.0], [35400.0, 1.0], [40000.0, 1.0], [42400.0, 1.0], [57000.0, 1.0], [61200.0, 1.0], [60000.0, 11.0], [60400.0, 10.0], [64400.0, 1.0], [68800.0, 1.0], [70000.0, 2.0], [70400.0, 1.0], [71200.0, 1.0], [73600.0, 1.0], [72000.0, 1.0], [74000.0, 1.0], [74400.0, 2.0], [75200.0, 1.0], [76400.0, 4.0], [76000.0, 1.0], [80400.0, 1.0], [79200.0, 1.0], [79600.0, 1.0], [81200.0, 2.0], [83600.0, 1.0], [82400.0, 3.0], [84400.0, 2.0], [85200.0, 2.0], [85600.0, 2.0], [86000.0, 1.0], [86400.0, 1.0], [86800.0, 2.0], [87600.0, 2.0], [88800.0, 1.0], [90000.0, 2.0], [90800.0, 5.0], [90400.0, 3.0], [91200.0, 2.0], [91600.0, 2.0], [92000.0, 3.0]], "isOverall": false, "label": "School Infra Map SchoolWise", "isController": false}, {"data": [[800.0, 1.0], [900.0, 1.0], [1200.0, 2.0], [1400.0, 3.0], [2000.0, 1.0], [2300.0, 2.0], [2200.0, 1.0], [2400.0, 2.0], [2500.0, 3.0], [2600.0, 1.0], [2800.0, 5.0], [2900.0, 1.0], [3000.0, 4.0], [3100.0, 6.0], [3300.0, 1.0], [3200.0, 3.0], [3400.0, 6.0], [3500.0, 5.0], [3600.0, 2.0], [3700.0, 3.0], [3800.0, 1.0], [3900.0, 5.0], [4000.0, 1.0], [4100.0, 1.0], [5100.0, 4.0], [5200.0, 1.0], [5300.0, 3.0], [5400.0, 5.0], [5500.0, 11.0], [5600.0, 1.0], [5800.0, 9.0], [6100.0, 1.0], [5900.0, 1.0], [6000.0, 1.0], [6300.0, 1.0], [6400.0, 1.0], [6700.0, 3.0], [6800.0, 9.0], [6900.0, 13.0], [7000.0, 17.0], [7100.0, 14.0], [7200.0, 22.0], [7300.0, 24.0], [7400.0, 20.0], [7600.0, 11.0], [7500.0, 3.0], [7900.0, 1.0], [7700.0, 1.0], [8000.0, 4.0], [8100.0, 1.0], [8200.0, 1.0], [8500.0, 2.0], [8400.0, 2.0], [8700.0, 1.0], [8900.0, 1.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 92300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 468.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 7.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 468.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 25.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 70.10071942446041, "minX": 1.59430968E12, "maxY": 249.98814229249012, "series": [{"data": [[1.5943098E12, 70.10071942446041], [1.59430968E12, 249.98814229249012], [1.59430974E12, 194.25000000000003]], "isOverall": false, "label": "School Infra Map", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5943098E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 6008.340000000003, "minX": 1.0, "maxY": 92381.0, "series": [{"data": [[2.0, 92381.0], [4.0, 92004.5], [5.0, 92347.0], [6.0, 92005.0], [7.0, 92345.0], [9.0, 92172.0], [10.0, 92291.0], [11.0, 92001.0], [13.0, 92257.0], [15.0, 92259.0], [17.0, 92070.5], [18.0, 91868.0], [19.0, 92207.0], [20.0, 91518.0], [21.0, 90583.0], [22.0, 92143.0], [24.0, 91465.0], [25.0, 90808.0], [26.0, 91877.0], [27.0, 92130.0], [28.0, 92157.0], [29.0, 90533.0], [30.0, 91696.0], [31.0, 91292.0], [33.0, 90362.0], [32.0, 91585.0], [35.0, 91213.0], [34.0, 91960.0], [37.0, 90217.0], [36.0, 91894.0], [39.0, 90333.0], [38.0, 90904.0], [41.0, 90806.0], [40.0, 90899.0], [43.0, 90901.0], [42.0, 91187.0], [44.0, 90488.0], [47.0, 91138.0], [46.0, 91158.0], [49.0, 90456.0], [48.0, 90127.5], [51.0, 90773.0], [50.0, 89544.0], [53.0, 90764.0], [52.0, 90246.0], [55.0, 90781.0], [54.0, 90827.0], [57.0, 90660.0], [56.0, 90709.0], [59.0, 90098.0], [58.0, 90619.0], [61.0, 89856.0], [60.0, 88934.0], [63.0, 90095.0], [62.0, 89746.0], [67.0, 89016.0], [66.0, 89727.0], [65.0, 89839.0], [64.0, 89863.0], [71.0, 88303.0], [70.0, 88819.0], [69.0, 88519.0], [68.0, 88704.0], [75.0, 87958.0], [74.0, 88331.0], [73.0, 88341.0], [72.0, 88248.0], [79.0, 87427.0], [78.0, 87479.5], [76.0, 87617.0], [83.0, 86899.0], [82.0, 86899.0], [81.0, 86976.0], [80.0, 86943.0], [87.0, 86496.0], [86.0, 86534.0], [85.0, 86952.0], [84.0, 86634.0], [91.0, 86076.0], [90.0, 86306.0], [89.0, 86384.0], [88.0, 86304.0], [95.0, 85632.0], [94.0, 85406.0], [93.0, 85989.5], [99.0, 85481.0], [98.0, 85203.0], [97.0, 85292.0], [96.0, 85606.0], [103.0, 85055.0], [102.0, 84951.0], [101.0, 85053.0], [100.0, 85425.0], [107.0, 84749.0], [106.0, 84939.0], [105.0, 85035.0], [104.0, 85012.0], [111.0, 84366.0], [110.0, 84466.0], [108.0, 84694.0], [115.0, 83745.0], [114.0, 83969.0], [113.0, 84250.0], [112.0, 84309.0], [119.0, 82685.0], [118.0, 82924.5], [116.0, 83098.0], [123.0, 82460.0], [122.0, 82490.0], [121.0, 83002.0], [120.0, 82982.0], [127.0, 81532.0], [126.0, 81722.0], [125.0, 82437.0], [124.0, 82626.0], [135.0, 79583.0], [134.0, 83685.0], [133.0, 79905.0], [132.0, 84345.0], [131.0, 80619.0], [130.0, 81016.0], [129.0, 81241.0], [128.0, 81205.0], [143.0, 76546.0], [142.0, 77161.0], [141.0, 77307.0], [140.0, 77383.0], [139.0, 79158.0], [138.0, 79227.0], [137.0, 79515.0], [136.0, 79607.0], [151.0, 75351.0], [150.0, 76028.0], [149.0, 76312.0], [148.0, 80455.0], [147.0, 76471.0], [146.0, 76666.0], [145.0, 76407.0], [144.0, 76441.0], [159.0, 73521.0], [158.0, 73562.0], [157.0, 73794.0], [156.0, 73822.0], [155.0, 74212.0], [154.0, 74905.0], [153.0, 79156.0], [152.0, 75104.0], [167.0, 72068.0], [166.0, 72208.0], [165.0, 72334.0], [164.0, 76307.0], [163.0, 76481.0], [162.0, 76988.0], [161.0, 77009.0], [160.0, 77353.0], [175.0, 71078.0], [174.0, 74916.0], [173.0, 74433.0], [172.0, 75438.0], [171.0, 71554.0], [170.0, 71941.0], [169.0, 75947.0], [168.0, 75267.0], [183.0, 74058.0], [182.0, 70448.0], [181.0, 74133.0], [180.0, 73701.0], [179.0, 74436.0], [178.0, 70319.0], [177.0, 74542.0], [176.0, 74757.0], [191.0, 70913.0], [190.0, 71286.0], [189.0, 72567.0], [188.0, 73061.0], [187.0, 73621.0], [186.0, 72713.0], [185.0, 69538.0], [184.0, 74116.0], [199.0, 68711.0], [198.0, 69132.0], [197.0, 68970.0], [196.0, 69733.0], [195.0, 69020.0], [194.0, 70035.0], [193.0, 70063.0], [192.0, 70583.0], [207.0, 64734.0], [206.0, 64901.0], [205.0, 68753.0], [204.0, 68847.0], [203.0, 69596.0], [202.0, 69062.0], [201.0, 69418.0], [200.0, 68698.0], [214.0, 60017.0], [212.0, 60016.0], [211.0, 60025.0], [210.0, 60045.0], [209.0, 64913.0], [208.0, 64404.0], [217.0, 60550.0], [216.0, 60019.666666666664], [229.0, 60353.0], [230.0, 60406.0], [239.0, 53710.0], [238.0, 57094.0], [237.0, 57959.0], [236.0, 61214.0], [235.0, 61339.0], [234.0, 60031.0], [233.0, 60302.0], [232.0, 60235.25], [247.0, 29560.0], [246.0, 35476.0], [245.0, 40079.0], [244.0, 40587.0], [243.0, 40714.0], [242.0, 42457.0], [241.0, 43966.0], [240.0, 45193.0], [250.0, 9891.0], [249.0, 10967.0], [248.0, 10937.0], [1.0, 91994.0]], "isOverall": false, "label": "School Infra Map SchoolWise", "isController": false}, {"data": [[125.87999999999992, 77818.05599999997]], "isOverall": false, "label": "School Infra Map SchoolWise-Aggregated", "isController": false}, {"data": [[250.0, 6008.340000000003]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[250.0, 6008.340000000003]], "isOverall": false, "label": "Login-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 250.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1085.8, "minX": 1.59430968E12, "maxY": 2.7835824933333334E7, "series": [{"data": [[1.5943098E12, 2.7835824933333334E7], [1.59430968E12, 605377.3666666667], [1.59430974E12, 1.6621543116666667E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.5943098E12, 2237.9], [1.59430968E12, 1085.8], [1.59430974E12, 1738.8]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5943098E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6008.340000000003, "minX": 1.59430968E12, "maxY": 87780.78417266186, "series": [{"data": [[1.5943098E12, 87780.78417266186], [1.59430968E12, 10598.333333333334], [1.59430974E12, 66862.87037037036]], "isOverall": false, "label": "School Infra Map SchoolWise", "isController": false}, {"data": [[1.59430968E12, 6008.340000000003]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5943098E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4374.333333333333, "minX": 1.59430968E12, "maxY": 41100.0071942446, "series": [{"data": [[1.5943098E12, 41100.0071942446], [1.59430968E12, 4374.333333333333], [1.59430974E12, 24726.842592592584]], "isOverall": false, "label": "School Infra Map SchoolWise", "isController": false}, {"data": [[1.59430968E12, 6007.231999999998]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5943098E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 13.666666666666666, "minX": 1.59430968E12, "maxY": 2168.88, "series": [{"data": [[1.5943098E12, 175.3812949640288], [1.59430968E12, 13.666666666666666], [1.59430974E12, 78.88888888888887]], "isOverall": false, "label": "School Infra Map SchoolWise", "isController": false}, {"data": [[1.59430968E12, 2168.88]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5943098E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 867.0, "minX": 1.59430968E12, "maxY": 92381.0, "series": [{"data": [[1.5943098E12, 92381.0], [1.59430968E12, 10967.0], [1.59430974E12, 80455.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.5943098E12, 79158.0], [1.59430968E12, 867.0], [1.59430974E12, 29560.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.5943098E12, 92143.0], [1.59430968E12, 7637.6], [1.59430974E12, 76859.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.5943098E12, 92367.4], [1.59430968E12, 10372.160000000009], [1.59430974E12, 80455.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.5943098E12, 92264.0], [1.59430968E12, 8085.099999999999], [1.59430974E12, 77343.8]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5943098E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2558.0, "minX": 1.0, "maxY": 91997.5, "series": [{"data": [[2.0, 50964.0], [8.0, 82992.0], [36.0, 91997.5], [10.0, 74087.0], [43.0, 3363.0], [178.0, 7166.0], [11.0, 47742.5], [3.0, 73707.5], [13.0, 85203.0], [15.0, 2558.0], [1.0, 43966.0], [4.0, 75227.5], [19.0, 90773.0], [5.0, 80619.0], [6.0, 87000.5], [7.0, 76441.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[25.0, 60395.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 178.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2558.0, "minX": 1.0, "maxY": 60395.0, "series": [{"data": [[2.0, 5888.0], [8.0, 27297.5], [36.0, 53359.5], [10.0, 16384.0], [43.0, 3363.0], [178.0, 7166.0], [11.0, 22037.0], [3.0, 16900.5], [13.0, 32923.0], [15.0, 2558.0], [1.0, 4125.0], [4.0, 18593.5], [19.0, 51069.0], [5.0, 20990.0], [6.0, 38517.5], [7.0, 19906.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[25.0, 60395.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 178.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.59430968E12, "maxY": 8.333333333333334, "series": [{"data": [[1.59430968E12, 8.333333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59430968E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.4166666666666667, "minX": 1.59430968E12, "maxY": 4.216666666666667, "series": [{"data": [[1.5943098E12, 2.316666666666667], [1.59430968E12, 4.216666666666667], [1.59430974E12, 1.3833333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.59430974E12, 0.4166666666666667]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5943098E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.59430968E12, "maxY": 4.166666666666667, "series": [{"data": [[1.5943098E12, 2.316666666666667], [1.59430968E12, 0.05], [1.59430974E12, 1.3833333333333333]], "isOverall": false, "label": "School Infra Map SchoolWise-success", "isController": false}, {"data": [[1.59430974E12, 0.4166666666666667]], "isOverall": false, "label": "School Infra Map SchoolWise-failure", "isController": false}, {"data": [[1.59430968E12, 4.166666666666667]], "isOverall": false, "label": "Login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5943098E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.4166666666666667, "minX": 1.59430968E12, "maxY": 4.216666666666667, "series": [{"data": [[1.5943098E12, 2.316666666666667], [1.59430968E12, 4.216666666666667], [1.59430974E12, 1.3833333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.59430974E12, 0.4166666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.5943098E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

