/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3843.0, "minX": 0.0, "maxY": 102636.0, "series": [{"data": [[0.0, 6409.0], [0.1, 6409.0], [0.2, 6409.0], [0.3, 6409.0], [0.4, 6409.0], [0.5, 60003.0], [0.6, 60003.0], [0.7, 60003.0], [0.8, 60003.0], [0.9, 60003.0], [1.0, 60003.0], [1.1, 60003.0], [1.2, 60003.0], [1.3, 60003.0], [1.4, 60003.0], [1.5, 60004.0], [1.6, 60004.0], [1.7, 60004.0], [1.8, 60004.0], [1.9, 60004.0], [2.0, 60004.0], [2.1, 60004.0], [2.2, 60004.0], [2.3, 60004.0], [2.4, 60004.0], [2.5, 60005.0], [2.6, 60005.0], [2.7, 60005.0], [2.8, 60005.0], [2.9, 60005.0], [3.0, 60005.0], [3.1, 60005.0], [3.2, 60005.0], [3.3, 60005.0], [3.4, 60005.0], [3.5, 60005.0], [3.6, 60005.0], [3.7, 60005.0], [3.8, 60005.0], [3.9, 60005.0], [4.0, 60005.0], [4.1, 60005.0], [4.2, 60005.0], [4.3, 60005.0], [4.4, 60005.0], [4.5, 60006.0], [4.6, 60006.0], [4.7, 60006.0], [4.8, 60006.0], [4.9, 60006.0], [5.0, 60006.0], [5.1, 60006.0], [5.2, 60006.0], [5.3, 60006.0], [5.4, 60006.0], [5.5, 60006.0], [5.6, 60006.0], [5.7, 60006.0], [5.8, 60006.0], [5.9, 60006.0], [6.0, 60006.0], [6.1, 60006.0], [6.2, 60006.0], [6.3, 60006.0], [6.4, 60006.0], [6.5, 60006.0], [6.6, 60006.0], [6.7, 60006.0], [6.8, 60006.0], [6.9, 60006.0], [7.0, 60006.0], [7.1, 60006.0], [7.2, 60006.0], [7.3, 60006.0], [7.4, 60006.0], [7.5, 60006.0], [7.6, 60006.0], [7.7, 60006.0], [7.8, 60006.0], [7.9, 60006.0], [8.0, 60006.0], [8.1, 60006.0], [8.2, 60006.0], [8.3, 60006.0], [8.4, 60006.0], [8.5, 60007.0], [8.6, 60007.0], [8.7, 60007.0], [8.8, 60007.0], [8.9, 60007.0], [9.0, 60007.0], [9.1, 60007.0], [9.2, 60007.0], [9.3, 60007.0], [9.4, 60007.0], [9.5, 60007.0], [9.6, 60007.0], [9.7, 60007.0], [9.8, 60007.0], [9.9, 60007.0], [10.0, 60007.0], [10.1, 60007.0], [10.2, 60007.0], [10.3, 60007.0], [10.4, 60007.0], [10.5, 60007.0], [10.6, 60007.0], [10.7, 60007.0], [10.8, 60007.0], [10.9, 60007.0], [11.0, 60007.0], [11.1, 60007.0], [11.2, 60007.0], [11.3, 60007.0], [11.4, 60007.0], [11.5, 60007.0], [11.6, 60007.0], [11.7, 60007.0], [11.8, 60007.0], [11.9, 60007.0], [12.0, 60007.0], [12.1, 60007.0], [12.2, 60007.0], [12.3, 60007.0], [12.4, 60007.0], [12.5, 60007.0], [12.6, 60007.0], [12.7, 60007.0], [12.8, 60007.0], [12.9, 60007.0], [13.0, 60007.0], [13.1, 60007.0], [13.2, 60007.0], [13.3, 60007.0], [13.4, 60007.0], [13.5, 60007.0], [13.6, 60007.0], [13.7, 60007.0], [13.8, 60007.0], [13.9, 60007.0], [14.0, 60008.0], [14.1, 60008.0], [14.2, 60008.0], [14.3, 60008.0], [14.4, 60008.0], [14.5, 60008.0], [14.6, 60008.0], [14.7, 60008.0], [14.8, 60008.0], [14.9, 60008.0], [15.0, 60008.0], [15.1, 60008.0], [15.2, 60008.0], [15.3, 60008.0], [15.4, 60008.0], [15.5, 60008.0], [15.6, 60008.0], [15.7, 60008.0], [15.8, 60008.0], [15.9, 60008.0], [16.0, 60009.0], [16.1, 60009.0], [16.2, 60009.0], [16.3, 60009.0], [16.4, 60009.0], [16.5, 60009.0], [16.6, 60009.0], [16.7, 60009.0], [16.8, 60009.0], [16.9, 60009.0], [17.0, 60009.0], [17.1, 60009.0], [17.2, 60009.0], [17.3, 60009.0], [17.4, 60009.0], [17.5, 60009.0], [17.6, 60009.0], [17.7, 60009.0], [17.8, 60009.0], [17.9, 60009.0], [18.0, 60010.0], [18.1, 60010.0], [18.2, 60010.0], [18.3, 60010.0], [18.4, 60010.0], [18.5, 60010.0], [18.6, 60010.0], [18.7, 60010.0], [18.8, 60010.0], [18.9, 60010.0], [19.0, 60010.0], [19.1, 60010.0], [19.2, 60010.0], [19.3, 60010.0], [19.4, 60010.0], [19.5, 60011.0], [19.6, 60011.0], [19.7, 60011.0], [19.8, 60011.0], [19.9, 60011.0], [20.0, 60012.0], [20.1, 60012.0], [20.2, 60012.0], [20.3, 60012.0], [20.4, 60012.0], [20.5, 60024.0], [20.6, 60024.0], [20.7, 60024.0], [20.8, 60024.0], [20.9, 60024.0], [21.0, 60032.0], [21.1, 60032.0], [21.2, 60032.0], [21.3, 60032.0], [21.4, 60032.0], [21.5, 60037.0], [21.6, 60037.0], [21.7, 60037.0], [21.8, 60037.0], [21.9, 60037.0], [22.0, 60051.0], [22.1, 60051.0], [22.2, 60051.0], [22.3, 60051.0], [22.4, 60051.0], [22.5, 60064.0], [22.6, 60064.0], [22.7, 60064.0], [22.8, 60064.0], [22.9, 60064.0], [23.0, 60128.0], [23.1, 60128.0], [23.2, 60128.0], [23.3, 60128.0], [23.4, 60128.0], [23.5, 60131.0], [23.6, 60131.0], [23.7, 60131.0], [23.8, 60131.0], [23.9, 60131.0], [24.0, 60140.0], [24.1, 60140.0], [24.2, 60140.0], [24.3, 60140.0], [24.4, 60140.0], [24.5, 60212.0], [24.6, 60212.0], [24.7, 60212.0], [24.8, 60212.0], [24.9, 60212.0], [25.0, 60276.0], [25.1, 60276.0], [25.2, 60276.0], [25.3, 60276.0], [25.4, 60276.0], [25.5, 60326.0], [25.6, 60326.0], [25.7, 60326.0], [25.8, 60326.0], [25.9, 60326.0], [26.0, 61332.0], [26.1, 61332.0], [26.2, 61332.0], [26.3, 61332.0], [26.4, 61332.0], [26.5, 86586.0], [26.6, 86586.0], [26.7, 86586.0], [26.8, 86586.0], [26.9, 86586.0], [27.0, 87096.0], [27.1, 87096.0], [27.2, 87096.0], [27.3, 87096.0], [27.4, 87096.0], [27.5, 87907.0], [27.6, 87907.0], [27.7, 87907.0], [27.8, 87907.0], [27.9, 87907.0], [28.0, 88122.0], [28.1, 88122.0], [28.2, 88122.0], [28.3, 88122.0], [28.4, 88122.0], [28.5, 88430.0], [28.6, 88430.0], [28.7, 88430.0], [28.8, 88430.0], [28.9, 88430.0], [29.0, 88678.0], [29.1, 88678.0], [29.2, 88678.0], [29.3, 88678.0], [29.4, 88678.0], [29.5, 88924.0], [29.6, 88924.0], [29.7, 88924.0], [29.8, 88924.0], [29.9, 88924.0], [30.0, 89732.0], [30.1, 89732.0], [30.2, 89732.0], [30.3, 89732.0], [30.4, 89732.0], [30.5, 90087.0], [30.6, 90087.0], [30.7, 90087.0], [30.8, 90087.0], [30.9, 90087.0], [31.0, 90227.0], [31.1, 90227.0], [31.2, 90227.0], [31.3, 90227.0], [31.4, 90227.0], [31.5, 90730.0], [31.6, 90730.0], [31.7, 90730.0], [31.8, 90730.0], [31.9, 90730.0], [32.0, 90835.0], [32.1, 90835.0], [32.2, 90835.0], [32.3, 90835.0], [32.4, 90835.0], [32.5, 91107.0], [32.6, 91107.0], [32.7, 91107.0], [32.8, 91107.0], [32.9, 91107.0], [33.0, 91510.0], [33.1, 91510.0], [33.2, 91510.0], [33.3, 91510.0], [33.4, 91510.0], [33.5, 91820.0], [33.6, 91820.0], [33.7, 91820.0], [33.8, 91820.0], [33.9, 91820.0], [34.0, 92253.0], [34.1, 92253.0], [34.2, 92253.0], [34.3, 92253.0], [34.4, 92253.0], [34.5, 92491.0], [34.6, 92491.0], [34.7, 92491.0], [34.8, 92491.0], [34.9, 92491.0], [35.0, 92561.0], [35.1, 92561.0], [35.2, 92561.0], [35.3, 92561.0], [35.4, 92561.0], [35.5, 92729.0], [35.6, 92729.0], [35.7, 92729.0], [35.8, 92729.0], [35.9, 92729.0], [36.0, 92985.0], [36.1, 92985.0], [36.2, 92985.0], [36.3, 92985.0], [36.4, 92985.0], [36.5, 93082.0], [36.6, 93082.0], [36.7, 93082.0], [36.8, 93082.0], [36.9, 93082.0], [37.0, 93115.0], [37.1, 93115.0], [37.2, 93115.0], [37.3, 93115.0], [37.4, 93115.0], [37.5, 94288.0], [37.6, 94288.0], [37.7, 94288.0], [37.8, 94288.0], [37.9, 94288.0], [38.0, 94638.0], [38.1, 94638.0], [38.2, 94638.0], [38.3, 94638.0], [38.4, 94638.0], [38.5, 94707.0], [38.6, 94707.0], [38.7, 94707.0], [38.8, 94707.0], [38.9, 94707.0], [39.0, 94791.0], [39.1, 94791.0], [39.2, 94791.0], [39.3, 94791.0], [39.4, 94791.0], [39.5, 95088.0], [39.6, 95088.0], [39.7, 95088.0], [39.8, 95088.0], [39.9, 95088.0], [40.0, 95207.0], [40.1, 95207.0], [40.2, 95207.0], [40.3, 95207.0], [40.4, 95207.0], [40.5, 95255.0], [40.6, 95255.0], [40.7, 95255.0], [40.8, 95255.0], [40.9, 95255.0], [41.0, 95272.0], [41.1, 95272.0], [41.2, 95272.0], [41.3, 95272.0], [41.4, 95272.0], [41.5, 95415.0], [41.6, 95415.0], [41.7, 95415.0], [41.8, 95415.0], [41.9, 95415.0], [42.0, 95515.0], [42.1, 95515.0], [42.2, 95515.0], [42.3, 95515.0], [42.4, 95515.0], [42.5, 95526.0], [42.6, 95526.0], [42.7, 95526.0], [42.8, 95526.0], [42.9, 95526.0], [43.0, 95536.0], [43.1, 95536.0], [43.2, 95536.0], [43.3, 95536.0], [43.4, 95536.0], [43.5, 95591.0], [43.6, 95591.0], [43.7, 95591.0], [43.8, 95591.0], [43.9, 95591.0], [44.0, 95882.0], [44.1, 95882.0], [44.2, 95882.0], [44.3, 95882.0], [44.4, 95882.0], [44.5, 95915.0], [44.6, 95915.0], [44.7, 95915.0], [44.8, 95915.0], [44.9, 95915.0], [45.0, 95917.0], [45.1, 95917.0], [45.2, 95917.0], [45.3, 95917.0], [45.4, 95917.0], [45.5, 96305.0], [45.6, 96305.0], [45.7, 96305.0], [45.8, 96305.0], [45.9, 96305.0], [46.0, 96505.0], [46.1, 96505.0], [46.2, 96505.0], [46.3, 96505.0], [46.4, 96505.0], [46.5, 96608.0], [46.6, 96608.0], [46.7, 96608.0], [46.8, 96608.0], [46.9, 96608.0], [47.0, 96679.0], [47.1, 96679.0], [47.2, 96679.0], [47.3, 96679.0], [47.4, 96679.0], [47.5, 96905.0], [47.6, 96905.0], [47.7, 96905.0], [47.8, 96905.0], [47.9, 96905.0], [48.0, 96916.0], [48.1, 96916.0], [48.2, 96916.0], [48.3, 96916.0], [48.4, 96916.0], [48.5, 97022.0], [48.6, 97022.0], [48.7, 97022.0], [48.8, 97022.0], [48.9, 97022.0], [49.0, 97043.0], [49.1, 97043.0], [49.2, 97043.0], [49.3, 97043.0], [49.4, 97043.0], [49.5, 97104.0], [49.6, 97104.0], [49.7, 97104.0], [49.8, 97104.0], [49.9, 97104.0], [50.0, 97138.0], [50.1, 97138.0], [50.2, 97138.0], [50.3, 97138.0], [50.4, 97138.0], [50.5, 97307.0], [50.6, 97307.0], [50.7, 97307.0], [50.8, 97307.0], [50.9, 97307.0], [51.0, 97333.0], [51.1, 97333.0], [51.2, 97333.0], [51.3, 97333.0], [51.4, 97333.0], [51.5, 97772.0], [51.6, 97772.0], [51.7, 97772.0], [51.8, 97772.0], [51.9, 97772.0], [52.0, 97828.0], [52.1, 97828.0], [52.2, 97828.0], [52.3, 97828.0], [52.4, 97828.0], [52.5, 97951.0], [52.6, 97951.0], [52.7, 97951.0], [52.8, 97951.0], [52.9, 97951.0], [53.0, 98171.0], [53.1, 98171.0], [53.2, 98171.0], [53.3, 98171.0], [53.4, 98171.0], [53.5, 98252.0], [53.6, 98252.0], [53.7, 98252.0], [53.8, 98252.0], [53.9, 98252.0], [54.0, 98423.0], [54.1, 98423.0], [54.2, 98423.0], [54.3, 98423.0], [54.4, 98423.0], [54.5, 98536.0], [54.6, 98536.0], [54.7, 98536.0], [54.8, 98536.0], [54.9, 98536.0], [55.0, 98697.0], [55.1, 98697.0], [55.2, 98697.0], [55.3, 98697.0], [55.4, 98697.0], [55.5, 98796.0], [55.6, 98796.0], [55.7, 98796.0], [55.8, 98796.0], [55.9, 98796.0], [56.0, 99082.0], [56.1, 99082.0], [56.2, 99082.0], [56.3, 99082.0], [56.4, 99082.0], [56.5, 99205.0], [56.6, 99205.0], [56.7, 99205.0], [56.8, 99205.0], [56.9, 99205.0], [57.0, 99259.0], [57.1, 99259.0], [57.2, 99259.0], [57.3, 99259.0], [57.4, 99259.0], [57.5, 99277.0], [57.6, 99277.0], [57.7, 99277.0], [57.8, 99277.0], [57.9, 99277.0], [58.0, 99370.0], [58.1, 99370.0], [58.2, 99370.0], [58.3, 99370.0], [58.4, 99370.0], [58.5, 99615.0], [58.6, 99615.0], [58.7, 99615.0], [58.8, 99615.0], [58.9, 99615.0], [59.0, 99642.0], [59.1, 99642.0], [59.2, 99642.0], [59.3, 99642.0], [59.4, 99642.0], [59.5, 99696.0], [59.6, 99696.0], [59.7, 99696.0], [59.8, 99696.0], [59.9, 99696.0], [60.0, 99699.0], [60.1, 99699.0], [60.2, 99699.0], [60.3, 99699.0], [60.4, 99699.0], [60.5, 99703.0], [60.6, 99703.0], [60.7, 99703.0], [60.8, 99703.0], [60.9, 99703.0], [61.0, 99807.0], [61.1, 99807.0], [61.2, 99807.0], [61.3, 99807.0], [61.4, 99807.0], [61.5, 99901.0], [61.6, 99901.0], [61.7, 99901.0], [61.8, 99901.0], [61.9, 99901.0], [62.0, 99920.0], [62.1, 99920.0], [62.2, 99920.0], [62.3, 99920.0], [62.4, 99920.0], [62.5, 99937.0], [62.6, 99937.0], [62.7, 99937.0], [62.8, 99937.0], [62.9, 99937.0], [63.0, 100064.0], [63.1, 100064.0], [63.2, 100064.0], [63.3, 100064.0], [63.4, 100064.0], [63.5, 100068.0], [63.6, 100068.0], [63.7, 100068.0], [63.8, 100068.0], [63.9, 100068.0], [64.0, 100069.0], [64.1, 100069.0], [64.2, 100069.0], [64.3, 100069.0], [64.4, 100069.0], [64.5, 100090.0], [64.6, 100090.0], [64.7, 100090.0], [64.8, 100090.0], [64.9, 100090.0], [65.0, 100163.0], [65.1, 100163.0], [65.2, 100163.0], [65.3, 100163.0], [65.4, 100163.0], [65.5, 100172.0], [65.6, 100172.0], [65.7, 100172.0], [65.8, 100172.0], [65.9, 100172.0], [66.0, 100211.0], [66.1, 100211.0], [66.2, 100211.0], [66.3, 100211.0], [66.4, 100211.0], [66.5, 100223.0], [66.6, 100223.0], [66.7, 100223.0], [66.8, 100223.0], [66.9, 100223.0], [67.0, 100263.0], [67.1, 100263.0], [67.2, 100263.0], [67.3, 100263.0], [67.4, 100263.0], [67.5, 100290.0], [67.6, 100290.0], [67.7, 100290.0], [67.8, 100290.0], [67.9, 100290.0], [68.0, 100294.0], [68.1, 100294.0], [68.2, 100294.0], [68.3, 100294.0], [68.4, 100294.0], [68.5, 100357.0], [68.6, 100357.0], [68.7, 100357.0], [68.8, 100357.0], [68.9, 100357.0], [69.0, 100373.0], [69.1, 100373.0], [69.2, 100373.0], [69.3, 100373.0], [69.4, 100373.0], [69.5, 100375.0], [69.6, 100375.0], [69.7, 100375.0], [69.8, 100375.0], [69.9, 100375.0], [70.0, 100415.0], [70.1, 100415.0], [70.2, 100415.0], [70.3, 100415.0], [70.4, 100415.0], [70.5, 100423.0], [70.6, 100423.0], [70.7, 100423.0], [70.8, 100423.0], [70.9, 100423.0], [71.0, 100443.0], [71.1, 100443.0], [71.2, 100443.0], [71.3, 100443.0], [71.4, 100443.0], [71.5, 100466.0], [71.6, 100466.0], [71.7, 100466.0], [71.8, 100466.0], [71.9, 100466.0], [72.0, 100481.0], [72.1, 100481.0], [72.2, 100481.0], [72.3, 100481.0], [72.4, 100481.0], [72.5, 100491.0], [72.6, 100491.0], [72.7, 100491.0], [72.8, 100491.0], [72.9, 100491.0], [73.0, 100513.0], [73.1, 100513.0], [73.2, 100513.0], [73.3, 100513.0], [73.4, 100513.0], [73.5, 100516.0], [73.6, 100516.0], [73.7, 100516.0], [73.8, 100516.0], [73.9, 100516.0], [74.0, 100527.0], [74.1, 100527.0], [74.2, 100527.0], [74.3, 100527.0], [74.4, 100527.0], [74.5, 100529.0], [74.6, 100529.0], [74.7, 100529.0], [74.8, 100529.0], [74.9, 100529.0], [75.0, 100557.0], [75.1, 100557.0], [75.2, 100557.0], [75.3, 100557.0], [75.4, 100557.0], [75.5, 100560.0], [75.6, 100560.0], [75.7, 100560.0], [75.8, 100560.0], [75.9, 100560.0], [76.0, 100577.0], [76.1, 100577.0], [76.2, 100577.0], [76.3, 100577.0], [76.4, 100577.0], [76.5, 100581.0], [76.6, 100581.0], [76.7, 100581.0], [76.8, 100581.0], [76.9, 100581.0], [77.0, 100584.0], [77.1, 100584.0], [77.2, 100584.0], [77.3, 100584.0], [77.4, 100584.0], [77.5, 100595.0], [77.6, 100595.0], [77.7, 100595.0], [77.8, 100595.0], [77.9, 100595.0], [78.0, 100604.0], [78.1, 100604.0], [78.2, 100604.0], [78.3, 100604.0], [78.4, 100604.0], [78.5, 100623.0], [78.6, 100623.0], [78.7, 100623.0], [78.8, 100623.0], [78.9, 100623.0], [79.0, 100661.0], [79.1, 100661.0], [79.2, 100661.0], [79.3, 100661.0], [79.4, 100661.0], [79.5, 100693.0], [79.6, 100693.0], [79.7, 100693.0], [79.8, 100693.0], [79.9, 100693.0], [80.0, 100703.0], [80.1, 100703.0], [80.2, 100703.0], [80.3, 100703.0], [80.4, 100703.0], [80.5, 100716.0], [80.6, 100716.0], [80.7, 100716.0], [80.8, 100716.0], [80.9, 100716.0], [81.0, 100719.0], [81.1, 100719.0], [81.2, 100719.0], [81.3, 100719.0], [81.4, 100719.0], [81.5, 100731.0], [81.6, 100731.0], [81.7, 100731.0], [81.8, 100731.0], [81.9, 100731.0], [82.0, 100756.0], [82.1, 100756.0], [82.2, 100756.0], [82.3, 100756.0], [82.4, 100756.0], [82.5, 100775.0], [82.6, 100775.0], [82.7, 100775.0], [82.8, 100775.0], [82.9, 100775.0], [83.0, 100781.0], [83.1, 100781.0], [83.2, 100781.0], [83.3, 100781.0], [83.4, 100781.0], [83.5, 100785.0], [83.6, 100785.0], [83.7, 100785.0], [83.8, 100785.0], [83.9, 100785.0], [84.0, 100803.0], [84.1, 100803.0], [84.2, 100803.0], [84.3, 100803.0], [84.4, 100803.0], [84.5, 100810.0], [84.6, 100810.0], [84.7, 100810.0], [84.8, 100810.0], [84.9, 100810.0], [85.0, 100815.0], [85.1, 100815.0], [85.2, 100815.0], [85.3, 100815.0], [85.4, 100815.0], [85.5, 100838.0], [85.6, 100838.0], [85.7, 100838.0], [85.8, 100838.0], [85.9, 100838.0], [86.0, 100844.0], [86.1, 100844.0], [86.2, 100844.0], [86.3, 100844.0], [86.4, 100844.0], [86.5, 100883.0], [86.6, 100883.0], [86.7, 100883.0], [86.8, 100883.0], [86.9, 100883.0], [87.0, 100893.0], [87.1, 100893.0], [87.2, 100893.0], [87.3, 100893.0], [87.4, 100893.0], [87.5, 100915.0], [87.6, 100915.0], [87.7, 100915.0], [87.8, 100915.0], [87.9, 100915.0], [88.0, 100917.0], [88.1, 100917.0], [88.2, 100917.0], [88.3, 100917.0], [88.4, 100917.0], [88.5, 100941.0], [88.6, 100941.0], [88.7, 100941.0], [88.8, 100941.0], [88.9, 100941.0], [89.0, 100970.0], [89.1, 100970.0], [89.2, 100970.0], [89.3, 100970.0], [89.4, 100970.0], [89.5, 100970.0], [89.6, 100970.0], [89.7, 100970.0], [89.8, 100970.0], [89.9, 100970.0], [90.0, 100971.0], [90.1, 100971.0], [90.2, 100971.0], [90.3, 100971.0], [90.4, 100971.0], [90.5, 101012.0], [90.6, 101012.0], [90.7, 101012.0], [90.8, 101012.0], [90.9, 101012.0], [91.0, 101044.0], [91.1, 101044.0], [91.2, 101044.0], [91.3, 101044.0], [91.4, 101044.0], [91.5, 101056.0], [91.6, 101056.0], [91.7, 101056.0], [91.8, 101056.0], [91.9, 101056.0], [92.0, 101071.0], [92.1, 101071.0], [92.2, 101071.0], [92.3, 101071.0], [92.4, 101071.0], [92.5, 101086.0], [92.6, 101086.0], [92.7, 101086.0], [92.8, 101086.0], [92.9, 101086.0], [93.0, 101089.0], [93.1, 101089.0], [93.2, 101089.0], [93.3, 101089.0], [93.4, 101089.0], [93.5, 101327.0], [93.6, 101327.0], [93.7, 101327.0], [93.8, 101327.0], [93.9, 101327.0], [94.0, 101396.0], [94.1, 101396.0], [94.2, 101396.0], [94.3, 101396.0], [94.4, 101396.0], [94.5, 101470.0], [94.6, 101470.0], [94.7, 101470.0], [94.8, 101470.0], [94.9, 101470.0], [95.0, 101531.0], [95.1, 101531.0], [95.2, 101531.0], [95.3, 101531.0], [95.4, 101531.0], [95.5, 101544.0], [95.6, 101544.0], [95.7, 101544.0], [95.8, 101544.0], [95.9, 101544.0], [96.0, 101564.0], [96.1, 101564.0], [96.2, 101564.0], [96.3, 101564.0], [96.4, 101564.0], [96.5, 101592.0], [96.6, 101592.0], [96.7, 101592.0], [96.8, 101592.0], [96.9, 101592.0], [97.0, 101689.0], [97.1, 101689.0], [97.2, 101689.0], [97.3, 101689.0], [97.4, 101689.0], [97.5, 101860.0], [97.6, 101860.0], [97.7, 101860.0], [97.8, 101860.0], [97.9, 101860.0], [98.0, 101907.0], [98.1, 101907.0], [98.2, 101907.0], [98.3, 101907.0], [98.4, 101907.0], [98.5, 101963.0], [98.6, 101963.0], [98.7, 101963.0], [98.8, 101963.0], [98.9, 101963.0], [99.0, 102291.0], [99.1, 102291.0], [99.2, 102291.0], [99.3, 102291.0], [99.4, 102291.0], [99.5, 102636.0], [99.6, 102636.0], [99.7, 102636.0], [99.8, 102636.0], [99.9, 102636.0]], "isOverall": false, "label": "Crc SchoolWise", "isController": false}, {"data": [[0.0, 3843.0], [0.1, 3843.0], [0.2, 3843.0], [0.3, 3843.0], [0.4, 3843.0], [0.5, 3859.0], [0.6, 3859.0], [0.7, 3859.0], [0.8, 3859.0], [0.9, 3859.0], [1.0, 3915.0], [1.1, 3915.0], [1.2, 3915.0], [1.3, 3915.0], [1.4, 3915.0], [1.5, 4054.0], [1.6, 4054.0], [1.7, 4054.0], [1.8, 4054.0], [1.9, 4054.0], [2.0, 4092.0], [2.1, 4092.0], [2.2, 4092.0], [2.3, 4092.0], [2.4, 4092.0], [2.5, 4110.0], [2.6, 4110.0], [2.7, 4110.0], [2.8, 4110.0], [2.9, 4110.0], [3.0, 4149.0], [3.1, 4149.0], [3.2, 4149.0], [3.3, 4149.0], [3.4, 4149.0], [3.5, 4151.0], [3.6, 4151.0], [3.7, 4151.0], [3.8, 4151.0], [3.9, 4151.0], [4.0, 4196.0], [4.1, 4196.0], [4.2, 4196.0], [4.3, 4196.0], [4.4, 4196.0], [4.5, 4217.0], [4.6, 4217.0], [4.7, 4217.0], [4.8, 4217.0], [4.9, 4217.0], [5.0, 4225.0], [5.1, 4225.0], [5.2, 4225.0], [5.3, 4225.0], [5.4, 4225.0], [5.5, 4294.0], [5.6, 4294.0], [5.7, 4294.0], [5.8, 4294.0], [5.9, 4294.0], [6.0, 4297.0], [6.1, 4297.0], [6.2, 4297.0], [6.3, 4297.0], [6.4, 4297.0], [6.5, 4377.0], [6.6, 4377.0], [6.7, 4377.0], [6.8, 4377.0], [6.9, 4377.0], [7.0, 4387.0], [7.1, 4387.0], [7.2, 4387.0], [7.3, 4387.0], [7.4, 4387.0], [7.5, 4420.0], [7.6, 4420.0], [7.7, 4420.0], [7.8, 4420.0], [7.9, 4420.0], [8.0, 4436.0], [8.1, 4436.0], [8.2, 4436.0], [8.3, 4436.0], [8.4, 4436.0], [8.5, 4489.0], [8.6, 4489.0], [8.7, 4489.0], [8.8, 4489.0], [8.9, 4489.0], [9.0, 4491.0], [9.1, 4491.0], [9.2, 4491.0], [9.3, 4491.0], [9.4, 4491.0], [9.5, 4493.0], [9.6, 4493.0], [9.7, 4493.0], [9.8, 4493.0], [9.9, 4493.0], [10.0, 4532.0], [10.1, 4532.0], [10.2, 4532.0], [10.3, 4532.0], [10.4, 4532.0], [10.5, 4563.0], [10.6, 4563.0], [10.7, 4563.0], [10.8, 4563.0], [10.9, 4563.0], [11.0, 4570.0], [11.1, 4570.0], [11.2, 4570.0], [11.3, 4570.0], [11.4, 4570.0], [11.5, 4603.0], [11.6, 4603.0], [11.7, 4603.0], [11.8, 4603.0], [11.9, 4603.0], [12.0, 4611.0], [12.1, 4611.0], [12.2, 4611.0], [12.3, 4611.0], [12.4, 4611.0], [12.5, 4624.0], [12.6, 4624.0], [12.7, 4624.0], [12.8, 4624.0], [12.9, 4624.0], [13.0, 4644.0], [13.1, 4644.0], [13.2, 4644.0], [13.3, 4644.0], [13.4, 4644.0], [13.5, 4649.0], [13.6, 4649.0], [13.7, 4649.0], [13.8, 4649.0], [13.9, 4649.0], [14.0, 4654.0], [14.1, 4654.0], [14.2, 4654.0], [14.3, 4654.0], [14.4, 4654.0], [14.5, 4658.0], [14.6, 4658.0], [14.7, 4658.0], [14.8, 4658.0], [14.9, 4658.0], [15.0, 4677.0], [15.1, 4677.0], [15.2, 4677.0], [15.3, 4677.0], [15.4, 4677.0], [15.5, 4705.0], [15.6, 4705.0], [15.7, 4705.0], [15.8, 4705.0], [15.9, 4705.0], [16.0, 4731.0], [16.1, 4731.0], [16.2, 4731.0], [16.3, 4731.0], [16.4, 4731.0], [16.5, 4748.0], [16.6, 4748.0], [16.7, 4748.0], [16.8, 4748.0], [16.9, 4748.0], [17.0, 4820.0], [17.1, 4820.0], [17.2, 4820.0], [17.3, 4820.0], [17.4, 4820.0], [17.5, 4870.0], [17.6, 4870.0], [17.7, 4870.0], [17.8, 4870.0], [17.9, 4870.0], [18.0, 4879.0], [18.1, 4879.0], [18.2, 4879.0], [18.3, 4879.0], [18.4, 4879.0], [18.5, 4880.0], [18.6, 4880.0], [18.7, 4880.0], [18.8, 4880.0], [18.9, 4880.0], [19.0, 4885.0], [19.1, 4885.0], [19.2, 4885.0], [19.3, 4885.0], [19.4, 4885.0], [19.5, 4891.0], [19.6, 4891.0], [19.7, 4891.0], [19.8, 4891.0], [19.9, 4891.0], [20.0, 4937.0], [20.1, 4937.0], [20.2, 4937.0], [20.3, 4937.0], [20.4, 4937.0], [20.5, 4970.0], [20.6, 4970.0], [20.7, 4970.0], [20.8, 4970.0], [20.9, 4970.0], [21.0, 4983.0], [21.1, 4983.0], [21.2, 4983.0], [21.3, 4983.0], [21.4, 4983.0], [21.5, 5041.0], [21.6, 5041.0], [21.7, 5041.0], [21.8, 5041.0], [21.9, 5041.0], [22.0, 5178.0], [22.1, 5178.0], [22.2, 5178.0], [22.3, 5178.0], [22.4, 5178.0], [22.5, 5186.0], [22.6, 5186.0], [22.7, 5186.0], [22.8, 5186.0], [22.9, 5186.0], [23.0, 5194.0], [23.1, 5194.0], [23.2, 5194.0], [23.3, 5194.0], [23.4, 5194.0], [23.5, 5219.0], [23.6, 5219.0], [23.7, 5219.0], [23.8, 5219.0], [23.9, 5219.0], [24.0, 5229.0], [24.1, 5229.0], [24.2, 5229.0], [24.3, 5229.0], [24.4, 5229.0], [24.5, 5237.0], [24.6, 5237.0], [24.7, 5237.0], [24.8, 5237.0], [24.9, 5237.0], [25.0, 5263.0], [25.1, 5263.0], [25.2, 5263.0], [25.3, 5263.0], [25.4, 5263.0], [25.5, 5295.0], [25.6, 5295.0], [25.7, 5295.0], [25.8, 5295.0], [25.9, 5295.0], [26.0, 5309.0], [26.1, 5309.0], [26.2, 5309.0], [26.3, 5309.0], [26.4, 5309.0], [26.5, 5323.0], [26.6, 5323.0], [26.7, 5323.0], [26.8, 5323.0], [26.9, 5323.0], [27.0, 5343.0], [27.1, 5343.0], [27.2, 5343.0], [27.3, 5343.0], [27.4, 5343.0], [27.5, 5348.0], [27.6, 5348.0], [27.7, 5348.0], [27.8, 5348.0], [27.9, 5348.0], [28.0, 5375.0], [28.1, 5375.0], [28.2, 5375.0], [28.3, 5375.0], [28.4, 5375.0], [28.5, 5378.0], [28.6, 5378.0], [28.7, 5378.0], [28.8, 5378.0], [28.9, 5378.0], [29.0, 5403.0], [29.1, 5403.0], [29.2, 5403.0], [29.3, 5403.0], [29.4, 5403.0], [29.5, 5408.0], [29.6, 5408.0], [29.7, 5408.0], [29.8, 5408.0], [29.9, 5408.0], [30.0, 5414.0], [30.1, 5414.0], [30.2, 5414.0], [30.3, 5414.0], [30.4, 5414.0], [30.5, 5434.0], [30.6, 5434.0], [30.7, 5434.0], [30.8, 5434.0], [30.9, 5434.0], [31.0, 5481.0], [31.1, 5481.0], [31.2, 5481.0], [31.3, 5481.0], [31.4, 5481.0], [31.5, 5506.0], [31.6, 5506.0], [31.7, 5506.0], [31.8, 5506.0], [31.9, 5506.0], [32.0, 5537.0], [32.1, 5537.0], [32.2, 5537.0], [32.3, 5537.0], [32.4, 5537.0], [32.5, 5542.0], [32.6, 5542.0], [32.7, 5542.0], [32.8, 5542.0], [32.9, 5542.0], [33.0, 5576.0], [33.1, 5576.0], [33.2, 5576.0], [33.3, 5576.0], [33.4, 5576.0], [33.5, 5591.0], [33.6, 5591.0], [33.7, 5591.0], [33.8, 5591.0], [33.9, 5591.0], [34.0, 5611.0], [34.1, 5611.0], [34.2, 5611.0], [34.3, 5611.0], [34.4, 5611.0], [34.5, 5620.0], [34.6, 5620.0], [34.7, 5620.0], [34.8, 5620.0], [34.9, 5620.0], [35.0, 5657.0], [35.1, 5657.0], [35.2, 5657.0], [35.3, 5657.0], [35.4, 5657.0], [35.5, 5660.0], [35.6, 5660.0], [35.7, 5660.0], [35.8, 5660.0], [35.9, 5660.0], [36.0, 5670.0], [36.1, 5670.0], [36.2, 5670.0], [36.3, 5670.0], [36.4, 5670.0], [36.5, 5692.0], [36.6, 5692.0], [36.7, 5692.0], [36.8, 5692.0], [36.9, 5692.0], [37.0, 5703.0], [37.1, 5703.0], [37.2, 5703.0], [37.3, 5703.0], [37.4, 5703.0], [37.5, 5722.0], [37.6, 5722.0], [37.7, 5722.0], [37.8, 5722.0], [37.9, 5722.0], [38.0, 5731.0], [38.1, 5731.0], [38.2, 5731.0], [38.3, 5731.0], [38.4, 5731.0], [38.5, 5753.0], [38.6, 5753.0], [38.7, 5753.0], [38.8, 5753.0], [38.9, 5753.0], [39.0, 5756.0], [39.1, 5756.0], [39.2, 5756.0], [39.3, 5756.0], [39.4, 5756.0], [39.5, 5783.0], [39.6, 5783.0], [39.7, 5783.0], [39.8, 5783.0], [39.9, 5783.0], [40.0, 5804.0], [40.1, 5804.0], [40.2, 5804.0], [40.3, 5804.0], [40.4, 5804.0], [40.5, 5806.0], [40.6, 5806.0], [40.7, 5806.0], [40.8, 5806.0], [40.9, 5806.0], [41.0, 5813.0], [41.1, 5813.0], [41.2, 5813.0], [41.3, 5813.0], [41.4, 5813.0], [41.5, 5817.0], [41.6, 5817.0], [41.7, 5817.0], [41.8, 5817.0], [41.9, 5817.0], [42.0, 5836.0], [42.1, 5836.0], [42.2, 5836.0], [42.3, 5836.0], [42.4, 5836.0], [42.5, 5837.0], [42.6, 5837.0], [42.7, 5837.0], [42.8, 5837.0], [42.9, 5837.0], [43.0, 5966.0], [43.1, 5966.0], [43.2, 5966.0], [43.3, 5966.0], [43.4, 5966.0], [43.5, 5986.0], [43.6, 5986.0], [43.7, 5986.0], [43.8, 5986.0], [43.9, 5986.0], [44.0, 6011.0], [44.1, 6011.0], [44.2, 6011.0], [44.3, 6011.0], [44.4, 6011.0], [44.5, 6041.0], [44.6, 6041.0], [44.7, 6041.0], [44.8, 6041.0], [44.9, 6041.0], [45.0, 6059.0], [45.1, 6059.0], [45.2, 6059.0], [45.3, 6059.0], [45.4, 6059.0], [45.5, 6087.0], [45.6, 6087.0], [45.7, 6087.0], [45.8, 6087.0], [45.9, 6087.0], [46.0, 6091.0], [46.1, 6091.0], [46.2, 6091.0], [46.3, 6091.0], [46.4, 6091.0], [46.5, 6092.0], [46.6, 6092.0], [46.7, 6092.0], [46.8, 6092.0], [46.9, 6092.0], [47.0, 6140.0], [47.1, 6140.0], [47.2, 6140.0], [47.3, 6140.0], [47.4, 6140.0], [47.5, 6156.0], [47.6, 6156.0], [47.7, 6156.0], [47.8, 6156.0], [47.9, 6156.0], [48.0, 6160.0], [48.1, 6160.0], [48.2, 6160.0], [48.3, 6160.0], [48.4, 6160.0], [48.5, 6163.0], [48.6, 6163.0], [48.7, 6163.0], [48.8, 6163.0], [48.9, 6163.0], [49.0, 6224.0], [49.1, 6224.0], [49.2, 6224.0], [49.3, 6224.0], [49.4, 6224.0], [49.5, 6246.0], [49.6, 6246.0], [49.7, 6246.0], [49.8, 6246.0], [49.9, 6246.0], [50.0, 6249.0], [50.1, 6249.0], [50.2, 6249.0], [50.3, 6249.0], [50.4, 6249.0], [50.5, 6250.0], [50.6, 6250.0], [50.7, 6250.0], [50.8, 6250.0], [50.9, 6250.0], [51.0, 6261.0], [51.1, 6261.0], [51.2, 6261.0], [51.3, 6261.0], [51.4, 6261.0], [51.5, 6307.0], [51.6, 6307.0], [51.7, 6307.0], [51.8, 6307.0], [51.9, 6307.0], [52.0, 6315.0], [52.1, 6315.0], [52.2, 6315.0], [52.3, 6315.0], [52.4, 6315.0], [52.5, 6321.0], [52.6, 6321.0], [52.7, 6321.0], [52.8, 6321.0], [52.9, 6321.0], [53.0, 6339.0], [53.1, 6339.0], [53.2, 6339.0], [53.3, 6339.0], [53.4, 6339.0], [53.5, 6344.0], [53.6, 6344.0], [53.7, 6344.0], [53.8, 6344.0], [53.9, 6344.0], [54.0, 6373.0], [54.1, 6373.0], [54.2, 6373.0], [54.3, 6373.0], [54.4, 6373.0], [54.5, 6422.0], [54.6, 6422.0], [54.7, 6422.0], [54.8, 6422.0], [54.9, 6422.0], [55.0, 6472.0], [55.1, 6472.0], [55.2, 6472.0], [55.3, 6472.0], [55.4, 6472.0], [55.5, 6489.0], [55.6, 6489.0], [55.7, 6489.0], [55.8, 6489.0], [55.9, 6489.0], [56.0, 6499.0], [56.1, 6499.0], [56.2, 6499.0], [56.3, 6499.0], [56.4, 6499.0], [56.5, 6519.0], [56.6, 6519.0], [56.7, 6519.0], [56.8, 6519.0], [56.9, 6519.0], [57.0, 6532.0], [57.1, 6532.0], [57.2, 6532.0], [57.3, 6532.0], [57.4, 6532.0], [57.5, 6559.0], [57.6, 6559.0], [57.7, 6559.0], [57.8, 6559.0], [57.9, 6559.0], [58.0, 6577.0], [58.1, 6577.0], [58.2, 6577.0], [58.3, 6577.0], [58.4, 6577.0], [58.5, 6577.0], [58.6, 6577.0], [58.7, 6577.0], [58.8, 6577.0], [58.9, 6577.0], [59.0, 6585.0], [59.1, 6585.0], [59.2, 6585.0], [59.3, 6585.0], [59.4, 6585.0], [59.5, 6593.0], [59.6, 6593.0], [59.7, 6593.0], [59.8, 6593.0], [59.9, 6593.0], [60.0, 6617.0], [60.1, 6617.0], [60.2, 6617.0], [60.3, 6617.0], [60.4, 6617.0], [60.5, 6656.0], [60.6, 6656.0], [60.7, 6656.0], [60.8, 6656.0], [60.9, 6656.0], [61.0, 6659.0], [61.1, 6659.0], [61.2, 6659.0], [61.3, 6659.0], [61.4, 6659.0], [61.5, 6678.0], [61.6, 6678.0], [61.7, 6678.0], [61.8, 6678.0], [61.9, 6678.0], [62.0, 6699.0], [62.1, 6699.0], [62.2, 6699.0], [62.3, 6699.0], [62.4, 6699.0], [62.5, 6723.0], [62.6, 6723.0], [62.7, 6723.0], [62.8, 6723.0], [62.9, 6723.0], [63.0, 6758.0], [63.1, 6758.0], [63.2, 6758.0], [63.3, 6758.0], [63.4, 6758.0], [63.5, 6765.0], [63.6, 6765.0], [63.7, 6765.0], [63.8, 6765.0], [63.9, 6765.0], [64.0, 6852.0], [64.1, 6852.0], [64.2, 6852.0], [64.3, 6852.0], [64.4, 6852.0], [64.5, 6878.0], [64.6, 6878.0], [64.7, 6878.0], [64.8, 6878.0], [64.9, 6878.0], [65.0, 6886.0], [65.1, 6886.0], [65.2, 6886.0], [65.3, 6886.0], [65.4, 6886.0], [65.5, 6888.0], [65.6, 6888.0], [65.7, 6888.0], [65.8, 6888.0], [65.9, 6888.0], [66.0, 6896.0], [66.1, 6896.0], [66.2, 6896.0], [66.3, 6896.0], [66.4, 6896.0], [66.5, 6903.0], [66.6, 6903.0], [66.7, 6903.0], [66.8, 6903.0], [66.9, 6903.0], [67.0, 6913.0], [67.1, 6913.0], [67.2, 6913.0], [67.3, 6913.0], [67.4, 6913.0], [67.5, 6914.0], [67.6, 6914.0], [67.7, 6914.0], [67.8, 6914.0], [67.9, 6914.0], [68.0, 6974.0], [68.1, 6974.0], [68.2, 6974.0], [68.3, 6974.0], [68.4, 6974.0], [68.5, 7007.0], [68.6, 7007.0], [68.7, 7007.0], [68.8, 7007.0], [68.9, 7007.0], [69.0, 7008.0], [69.1, 7008.0], [69.2, 7008.0], [69.3, 7008.0], [69.4, 7008.0], [69.5, 7014.0], [69.6, 7014.0], [69.7, 7014.0], [69.8, 7014.0], [69.9, 7014.0], [70.0, 7042.0], [70.1, 7042.0], [70.2, 7042.0], [70.3, 7042.0], [70.4, 7042.0], [70.5, 7042.0], [70.6, 7042.0], [70.7, 7042.0], [70.8, 7042.0], [70.9, 7042.0], [71.0, 7064.0], [71.1, 7064.0], [71.2, 7064.0], [71.3, 7064.0], [71.4, 7064.0], [71.5, 7082.0], [71.6, 7082.0], [71.7, 7082.0], [71.8, 7082.0], [71.9, 7082.0], [72.0, 7099.0], [72.1, 7099.0], [72.2, 7099.0], [72.3, 7099.0], [72.4, 7099.0], [72.5, 7120.0], [72.6, 7120.0], [72.7, 7120.0], [72.8, 7120.0], [72.9, 7120.0], [73.0, 7153.0], [73.1, 7153.0], [73.2, 7153.0], [73.3, 7153.0], [73.4, 7153.0], [73.5, 7184.0], [73.6, 7184.0], [73.7, 7184.0], [73.8, 7184.0], [73.9, 7184.0], [74.0, 7202.0], [74.1, 7202.0], [74.2, 7202.0], [74.3, 7202.0], [74.4, 7202.0], [74.5, 7226.0], [74.6, 7226.0], [74.7, 7226.0], [74.8, 7226.0], [74.9, 7226.0], [75.0, 7240.0], [75.1, 7240.0], [75.2, 7240.0], [75.3, 7240.0], [75.4, 7240.0], [75.5, 7255.0], [75.6, 7255.0], [75.7, 7255.0], [75.8, 7255.0], [75.9, 7255.0], [76.0, 7319.0], [76.1, 7319.0], [76.2, 7319.0], [76.3, 7319.0], [76.4, 7319.0], [76.5, 7321.0], [76.6, 7321.0], [76.7, 7321.0], [76.8, 7321.0], [76.9, 7321.0], [77.0, 7349.0], [77.1, 7349.0], [77.2, 7349.0], [77.3, 7349.0], [77.4, 7349.0], [77.5, 7364.0], [77.6, 7364.0], [77.7, 7364.0], [77.8, 7364.0], [77.9, 7364.0], [78.0, 7395.0], [78.1, 7395.0], [78.2, 7395.0], [78.3, 7395.0], [78.4, 7395.0], [78.5, 7409.0], [78.6, 7409.0], [78.7, 7409.0], [78.8, 7409.0], [78.9, 7409.0], [79.0, 7415.0], [79.1, 7415.0], [79.2, 7415.0], [79.3, 7415.0], [79.4, 7415.0], [79.5, 7434.0], [79.6, 7434.0], [79.7, 7434.0], [79.8, 7434.0], [79.9, 7434.0], [80.0, 7435.0], [80.1, 7435.0], [80.2, 7435.0], [80.3, 7435.0], [80.4, 7435.0], [80.5, 7502.0], [80.6, 7502.0], [80.7, 7502.0], [80.8, 7502.0], [80.9, 7502.0], [81.0, 7512.0], [81.1, 7512.0], [81.2, 7512.0], [81.3, 7512.0], [81.4, 7512.0], [81.5, 7542.0], [81.6, 7542.0], [81.7, 7542.0], [81.8, 7542.0], [81.9, 7542.0], [82.0, 7543.0], [82.1, 7543.0], [82.2, 7543.0], [82.3, 7543.0], [82.4, 7543.0], [82.5, 7570.0], [82.6, 7570.0], [82.7, 7570.0], [82.8, 7570.0], [82.9, 7570.0], [83.0, 7604.0], [83.1, 7604.0], [83.2, 7604.0], [83.3, 7604.0], [83.4, 7604.0], [83.5, 7630.0], [83.6, 7630.0], [83.7, 7630.0], [83.8, 7630.0], [83.9, 7630.0], [84.0, 7678.0], [84.1, 7678.0], [84.2, 7678.0], [84.3, 7678.0], [84.4, 7678.0], [84.5, 7681.0], [84.6, 7681.0], [84.7, 7681.0], [84.8, 7681.0], [84.9, 7681.0], [85.0, 7702.0], [85.1, 7702.0], [85.2, 7702.0], [85.3, 7702.0], [85.4, 7702.0], [85.5, 7716.0], [85.6, 7716.0], [85.7, 7716.0], [85.8, 7716.0], [85.9, 7716.0], [86.0, 7758.0], [86.1, 7758.0], [86.2, 7758.0], [86.3, 7758.0], [86.4, 7758.0], [86.5, 7807.0], [86.6, 7807.0], [86.7, 7807.0], [86.8, 7807.0], [86.9, 7807.0], [87.0, 7854.0], [87.1, 7854.0], [87.2, 7854.0], [87.3, 7854.0], [87.4, 7854.0], [87.5, 7895.0], [87.6, 7895.0], [87.7, 7895.0], [87.8, 7895.0], [87.9, 7895.0], [88.0, 7986.0], [88.1, 7986.0], [88.2, 7986.0], [88.3, 7986.0], [88.4, 7986.0], [88.5, 7998.0], [88.6, 7998.0], [88.7, 7998.0], [88.8, 7998.0], [88.9, 7998.0], [89.0, 8000.0], [89.1, 8000.0], [89.2, 8000.0], [89.3, 8000.0], [89.4, 8000.0], [89.5, 8023.0], [89.6, 8023.0], [89.7, 8023.0], [89.8, 8023.0], [89.9, 8023.0], [90.0, 8044.0], [90.1, 8044.0], [90.2, 8044.0], [90.3, 8044.0], [90.4, 8044.0], [90.5, 8060.0], [90.6, 8060.0], [90.7, 8060.0], [90.8, 8060.0], [90.9, 8060.0], [91.0, 8126.0], [91.1, 8126.0], [91.2, 8126.0], [91.3, 8126.0], [91.4, 8126.0], [91.5, 8162.0], [91.6, 8162.0], [91.7, 8162.0], [91.8, 8162.0], [91.9, 8162.0], [92.0, 8165.0], [92.1, 8165.0], [92.2, 8165.0], [92.3, 8165.0], [92.4, 8165.0], [92.5, 8208.0], [92.6, 8208.0], [92.7, 8208.0], [92.8, 8208.0], [92.9, 8208.0], [93.0, 8241.0], [93.1, 8241.0], [93.2, 8241.0], [93.3, 8241.0], [93.4, 8241.0], [93.5, 8407.0], [93.6, 8407.0], [93.7, 8407.0], [93.8, 8407.0], [93.9, 8407.0], [94.0, 8414.0], [94.1, 8414.0], [94.2, 8414.0], [94.3, 8414.0], [94.4, 8414.0], [94.5, 8434.0], [94.6, 8434.0], [94.7, 8434.0], [94.8, 8434.0], [94.9, 8434.0], [95.0, 8443.0], [95.1, 8443.0], [95.2, 8443.0], [95.3, 8443.0], [95.4, 8443.0], [95.5, 8523.0], [95.6, 8523.0], [95.7, 8523.0], [95.8, 8523.0], [95.9, 8523.0], [96.0, 8563.0], [96.1, 8563.0], [96.2, 8563.0], [96.3, 8563.0], [96.4, 8563.0], [96.5, 8593.0], [96.6, 8593.0], [96.7, 8593.0], [96.8, 8593.0], [96.9, 8593.0], [97.0, 8621.0], [97.1, 8621.0], [97.2, 8621.0], [97.3, 8621.0], [97.4, 8621.0], [97.5, 8697.0], [97.6, 8697.0], [97.7, 8697.0], [97.8, 8697.0], [97.9, 8697.0], [98.0, 8876.0], [98.1, 8876.0], [98.2, 8876.0], [98.3, 8876.0], [98.4, 8876.0], [98.5, 8882.0], [98.6, 8882.0], [98.7, 8882.0], [98.8, 8882.0], [98.9, 8882.0], [99.0, 8901.0], [99.1, 8901.0], [99.2, 8901.0], [99.3, 8901.0], [99.4, 8901.0], [99.5, 8918.0], [99.6, 8918.0], [99.7, 8918.0], [99.8, 8918.0], [99.9, 8918.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 3800.0, "maxY": 45.0, "series": [{"data": [[86500.0, 1.0], [88100.0, 1.0], [87900.0, 1.0], [88900.0, 1.0], [89700.0, 1.0], [90700.0, 1.0], [91100.0, 1.0], [91500.0, 1.0], [92500.0, 1.0], [92700.0, 1.0], [93100.0, 1.0], [92900.0, 1.0], [97300.0, 2.0], [94700.0, 2.0], [95500.0, 4.0], [95900.0, 2.0], [96500.0, 1.0], [96900.0, 2.0], [97100.0, 2.0], [96300.0, 1.0], [98100.0, 1.0], [97700.0, 1.0], [97900.0, 1.0], [98700.0, 1.0], [98500.0, 1.0], [99300.0, 1.0], [101500.0, 4.0], [101900.0, 2.0], [99900.0, 3.0], [100500.0, 10.0], [100100.0, 2.0], [100700.0, 8.0], [100900.0, 6.0], [101300.0, 2.0], [100300.0, 3.0], [99700.0, 1.0], [6400.0, 1.0], [60000.0, 45.0], [61300.0, 1.0], [60100.0, 3.0], [60200.0, 2.0], [60300.0, 1.0], [87000.0, 1.0], [88400.0, 1.0], [88600.0, 1.0], [90000.0, 1.0], [90800.0, 1.0], [90200.0, 1.0], [92200.0, 1.0], [94200.0, 1.0], [92400.0, 1.0], [91800.0, 1.0], [93000.0, 1.0], [95000.0, 1.0], [94600.0, 1.0], [95200.0, 3.0], [95800.0, 1.0], [95400.0, 1.0], [96600.0, 2.0], [97000.0, 2.0], [97800.0, 1.0], [98200.0, 1.0], [98400.0, 1.0], [99000.0, 1.0], [98600.0, 1.0], [99200.0, 3.0], [102200.0, 1.0], [101600.0, 1.0], [101800.0, 1.0], [101400.0, 1.0], [99600.0, 4.0], [99800.0, 1.0], [100000.0, 4.0], [100200.0, 5.0], [100400.0, 6.0], [100800.0, 7.0], [101000.0, 6.0], [100600.0, 4.0], [102600.0, 1.0]], "isOverall": false, "label": "Crc SchoolWise", "isController": false}, {"data": [[3800.0, 2.0], [3900.0, 1.0], [4000.0, 2.0], [4200.0, 4.0], [4100.0, 4.0], [4300.0, 2.0], [4500.0, 3.0], [4600.0, 8.0], [4400.0, 5.0], [4700.0, 3.0], [4800.0, 6.0], [4900.0, 3.0], [5100.0, 3.0], [5000.0, 1.0], [5200.0, 5.0], [5300.0, 6.0], [5400.0, 5.0], [5500.0, 5.0], [5600.0, 6.0], [5700.0, 6.0], [5800.0, 6.0], [5900.0, 2.0], [6000.0, 6.0], [6100.0, 4.0], [6200.0, 5.0], [6300.0, 6.0], [6500.0, 7.0], [6400.0, 4.0], [6600.0, 5.0], [6700.0, 3.0], [6900.0, 4.0], [6800.0, 5.0], [7000.0, 8.0], [7100.0, 3.0], [7200.0, 4.0], [7400.0, 4.0], [7300.0, 5.0], [7500.0, 5.0], [7600.0, 4.0], [7800.0, 3.0], [7700.0, 3.0], [7900.0, 2.0], [8000.0, 4.0], [8100.0, 3.0], [8200.0, 2.0], [8400.0, 4.0], [8600.0, 2.0], [8500.0, 3.0], [8800.0, 2.0], [8900.0, 2.0]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 102600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 51.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 349.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 349.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 51.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 71.0709219858156, "minX": 1.59430584E12, "maxY": 200.0, "series": [{"data": [[1.59430596E12, 71.0709219858156], [1.5943059E12, 170.93103448275866], [1.59430584E12, 200.0]], "isOverall": false, "label": "Crc Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59430596E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 6248.909999999999, "minX": 1.0, "maxY": 102636.0, "series": [{"data": [[2.0, 101860.0], [3.0, 100844.0], [4.0, 100781.0], [5.0, 100693.0], [6.0, 101689.0], [7.0, 100577.0], [8.0, 101056.0], [9.0, 100815.0], [11.0, 100982.0], [14.0, 100916.66666666667], [15.0, 101044.0], [17.0, 100628.0], [18.0, 100785.0], [19.0, 100560.0], [20.0, 100941.0], [21.0, 101470.0], [22.0, 101531.0], [24.0, 101316.5], [25.0, 101086.0], [26.0, 100971.0], [27.0, 101963.0], [28.0, 101396.0], [29.0, 102291.0], [30.0, 100803.0], [31.0, 101012.0], [33.0, 100703.0], [32.0, 100756.0], [35.0, 100481.0], [34.0, 101592.0], [37.0, 101327.0], [36.0, 100513.0], [39.0, 100357.0], [38.0, 100415.0], [41.0, 100917.0], [40.0, 100915.0], [43.0, 101907.0], [42.0, 100604.0], [45.0, 100223.0], [44.0, 100584.0], [47.0, 100719.0], [46.0, 100623.0], [49.0, 101564.0], [48.0, 100373.0], [51.0, 100423.0], [50.0, 100211.0], [53.0, 100163.0], [52.0, 102636.0], [55.0, 100716.0], [54.0, 99920.0], [57.0, 100581.0], [56.0, 100731.0], [59.0, 100294.0], [58.0, 99937.0], [61.0, 100263.0], [60.0, 99703.0], [63.0, 99642.0], [62.0, 99807.0], [67.0, 100652.0], [66.0, 100375.0], [65.0, 100883.0], [71.0, 100838.0], [70.0, 100443.0], [69.0, 100172.0], [68.0, 100527.0], [75.0, 99696.0], [74.0, 100466.0], [73.0, 100064.0], [72.0, 100090.0], [79.0, 99277.0], [78.0, 100516.0], [77.0, 100491.0], [76.0, 99699.0], [83.0, 98796.0], [82.0, 100069.0], [81.0, 100290.0], [80.0, 99901.0], [87.0, 99615.0], [86.0, 99259.0], [85.0, 98423.0], [84.0, 100068.0], [91.0, 97772.0], [90.0, 99205.0], [89.0, 99370.0], [88.0, 97951.0], [95.0, 97828.0], [94.0, 98536.0], [93.0, 98697.0], [92.0, 99082.0], [99.0, 97104.0], [98.0, 97043.0], [97.0, 98171.0], [96.0, 98252.0], [103.0, 96608.0], [102.0, 97138.0], [101.0, 97022.0], [100.0, 97307.0], [107.0, 97333.0], [106.0, 96916.0], [105.0, 96705.0], [111.0, 95515.0], [110.0, 95917.0], [109.0, 96679.0], [108.0, 96305.0], [115.0, 95272.0], [114.0, 95915.0], [113.0, 95415.0], [112.0, 95591.0], [119.0, 95088.0], [118.0, 95526.0], [117.0, 95882.0], [116.0, 95536.0], [123.0, 94638.0], [122.0, 95255.0], [121.0, 94791.0], [120.0, 95207.0], [127.0, 92985.0], [126.0, 93082.0], [125.0, 94288.0], [124.0, 94707.0], [135.0, 90835.0], [134.0, 91510.0], [133.0, 92253.0], [132.0, 91820.0], [131.0, 92561.0], [130.0, 92729.0], [129.0, 92491.0], [128.0, 93115.0], [143.0, 88430.0], [142.0, 88924.0], [141.0, 88678.0], [140.0, 89732.0], [139.0, 90227.0], [138.0, 90087.0], [137.0, 90730.0], [136.0, 91107.0], [147.0, 86586.0], [146.0, 87096.0], [145.0, 88122.0], [144.0, 87907.0], [159.0, 60004.0], [158.0, 60004.0], [157.0, 60004.5], [153.0, 60006.0], [152.0, 60007.6], [167.0, 60301.0], [163.0, 60008.0], [162.0, 60010.0], [161.0, 60006.0], [160.0, 60008.0], [175.0, 60010.0], [174.0, 60005.0], [173.0, 60007.0], [172.0, 60022.0], [170.0, 60037.0], [169.0, 60128.0], [168.0, 60161.0], [183.0, 60007.0], [182.0, 60006.0], [181.0, 60007.0], [180.0, 60009.0], [179.0, 60005.0], [178.0, 60006.0], [177.0, 61332.0], [176.0, 60007.0], [191.0, 60024.0], [190.0, 60007.0], [189.0, 60009.0], [188.0, 60009.0], [187.0, 60007.0], [186.0, 60009.0], [185.0, 60006.0], [184.0, 60007.0], [199.0, 60008.0], [198.0, 60006.0], [197.0, 60051.0], [196.0, 60064.0], [195.0, 60007.0], [194.0, 60007.0], [193.0, 60005.0], [192.0, 60010.0], [200.0, 6409.0], [1.0, 100557.0]], "isOverall": false, "label": "Crc SchoolWise", "isController": false}, {"data": [[100.67500000000001, 87734.55500000001]], "isOverall": false, "label": "Crc SchoolWise-Aggregated", "isController": false}, {"data": [[200.0, 6248.909999999999]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[200.0, 6248.909999999999]], "isOverall": false, "label": "Login-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 200.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 846.0166666666667, "minX": 1.59430584E12, "maxY": 3.36285E7, "series": [{"data": [[1.59430596E12, 3.36285E7], [1.5943059E12, 1669808.55], [1.59430584E12, 242183.33333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.59430596E12, 2258.35], [1.5943059E12, 928.9666666666667], [1.59430584E12, 846.0166666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59430596E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6248.909999999999, "minX": 1.59430584E12, "maxY": 98513.50354609927, "series": [{"data": [[1.59430596E12, 98513.50354609927], [1.5943059E12, 62932.72413793103], [1.59430584E12, 6409.0]], "isOverall": false, "label": "Crc SchoolWise", "isController": false}, {"data": [[1.59430584E12, 6248.909999999999]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59430596E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4261.0, "minX": 1.59430584E12, "maxY": 53769.22413793102, "series": [{"data": [[1.59430596E12, 33485.39007092198], [1.5943059E12, 53769.22413793102], [1.59430584E12, 4261.0]], "isOverall": false, "label": "Crc SchoolWise", "isController": false}, {"data": [[1.59430584E12, 6248.815000000001]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59430596E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3.793103448275862, "minX": 1.59430584E12, "maxY": 3727.4350000000004, "series": [{"data": [[1.59430596E12, 3.8439716312056733], [1.5943059E12, 3.793103448275862], [1.59430584E12, 12.0]], "isOverall": false, "label": "Crc SchoolWise", "isController": false}, {"data": [[1.59430584E12, 3727.4350000000004]], "isOverall": false, "label": "Login", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59430596E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3843.0, "minX": 1.59430584E12, "maxY": 102636.0, "series": [{"data": [[1.59430596E12, 102636.0], [1.5943059E12, 88924.0], [1.59430584E12, 8918.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.59430596E12, 88678.0], [1.5943059E12, 61332.0], [1.59430584E12, 3843.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.59430596E12, 101088.4], [1.5943059E12, 88924.0], [1.59430584E12, 8039.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.59430596E12, 102491.1], [1.5943059E12, 88924.0], [1.59430584E12, 8900.619999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.59430596E12, 101589.2], [1.5943059E12, 88924.0], [1.59430584E12, 8442.1]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59430596E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 4493.0, "minX": 1.0, "maxY": 100915.0, "series": [{"data": [[2.0, 89205.0], [8.0, 95263.5], [9.0, 97022.0], [41.0, 100915.0], [11.0, 100068.0], [48.0, 5976.0], [12.0, 8607.0], [3.0, 93701.5], [15.0, 4493.0], [1.0, 6409.0], [4.0, 91107.0], [5.0, 92491.0], [6.0, 99232.0], [25.0, 100375.0], [7.0, 98618.0], [29.0, 7758.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 60007.0], [22.0, 60007.0], [12.0, 60006.0], [14.0, 60034.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 48.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 4261.0, "minX": 1.0, "maxY": 60034.0, "series": [{"data": [[2.0, 9540.5], [8.0, 16567.5], [9.0, 21657.0], [41.0, 48838.0], [11.0, 29141.0], [48.0, 5976.0], [12.0, 8607.0], [3.0, 14953.0], [15.0, 4491.0], [1.0, 4261.0], [4.0, 13486.0], [5.0, 16064.0], [6.0, 29126.0], [25.0, 38624.0], [7.0, 33222.5], [29.0, 7758.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 60007.0], [22.0, 60007.0], [12.0, 60006.0], [14.0, 60034.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 48.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 6.666666666666667, "minX": 1.59430584E12, "maxY": 6.666666666666667, "series": [{"data": [[1.59430584E12, 6.666666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59430584E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.59430584E12, "maxY": 3.35, "series": [{"data": [[1.59430596E12, 2.35], [1.5943059E12, 0.11666666666666667], [1.59430584E12, 3.35]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.5943059E12, 0.85]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59430596E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.59430584E12, "maxY": 3.3333333333333335, "series": [{"data": [[1.59430596E12, 2.35], [1.5943059E12, 0.11666666666666667], [1.59430584E12, 0.016666666666666666]], "isOverall": false, "label": "Crc SchoolWise-success", "isController": false}, {"data": [[1.59430584E12, 3.3333333333333335]], "isOverall": false, "label": "Login-success", "isController": false}, {"data": [[1.5943059E12, 0.85]], "isOverall": false, "label": "Crc SchoolWise-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59430596E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.59430584E12, "maxY": 3.35, "series": [{"data": [[1.59430596E12, 2.35], [1.5943059E12, 0.11666666666666667], [1.59430584E12, 3.35]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.5943059E12, 0.85]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59430596E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

