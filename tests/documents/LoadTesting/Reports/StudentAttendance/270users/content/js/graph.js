/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2145.0, "minX": 0.0, "maxY": 74241.0, "series": [{"data": [[0.0, 2145.0], [0.1, 2145.0], [0.2, 2145.0], [0.3, 2145.0], [0.4, 2159.0], [0.5, 2159.0], [0.6, 2159.0], [0.7, 2159.0], [0.8, 2175.0], [0.9, 2175.0], [1.0, 2175.0], [1.1, 2175.0], [1.2, 2175.0], [1.3, 2175.0], [1.4, 2175.0], [1.5, 2190.0], [1.6, 2190.0], [1.7, 2190.0], [1.8, 2190.0], [1.9, 2194.0], [2.0, 2194.0], [2.1, 2194.0], [2.2, 2194.0], [2.3, 2315.0], [2.4, 2315.0], [2.5, 2315.0], [2.6, 2361.0], [2.7, 2361.0], [2.8, 2361.0], [2.9, 2361.0], [3.0, 2386.0], [3.1, 2386.0], [3.2, 2386.0], [3.3, 2386.0], [3.4, 2437.0], [3.5, 2437.0], [3.6, 2437.0], [3.7, 2437.0], [3.8, 2446.0], [3.9, 2446.0], [4.0, 2446.0], [4.1, 2505.0], [4.2, 2505.0], [4.3, 2505.0], [4.4, 2505.0], [4.5, 2537.0], [4.6, 2537.0], [4.7, 2537.0], [4.8, 2537.0], [4.9, 2544.0], [5.0, 2544.0], [5.1, 2544.0], [5.2, 2564.0], [5.3, 2564.0], [5.4, 2564.0], [5.5, 2564.0], [5.6, 2616.0], [5.7, 2616.0], [5.8, 2616.0], [5.9, 2616.0], [6.0, 2644.0], [6.1, 2644.0], [6.2, 2644.0], [6.3, 2651.0], [6.4, 2651.0], [6.5, 2651.0], [6.6, 2651.0], [6.7, 2660.0], [6.8, 2660.0], [6.9, 2660.0], [7.0, 2660.0], [7.1, 2765.0], [7.2, 2765.0], [7.3, 2765.0], [7.4, 2765.0], [7.5, 2768.0], [7.6, 2768.0], [7.7, 2768.0], [7.8, 2807.0], [7.9, 2807.0], [8.0, 2807.0], [8.1, 2807.0], [8.2, 2848.0], [8.3, 2848.0], [8.4, 2848.0], [8.5, 2848.0], [8.6, 2868.0], [8.7, 2868.0], [8.8, 2868.0], [8.9, 2872.0], [9.0, 2872.0], [9.1, 2872.0], [9.2, 2872.0], [9.3, 2873.0], [9.4, 2873.0], [9.5, 2873.0], [9.6, 2873.0], [9.7, 2921.0], [9.8, 2921.0], [9.9, 2921.0], [10.0, 2927.0], [10.1, 2927.0], [10.2, 2927.0], [10.3, 2927.0], [10.4, 2928.0], [10.5, 2928.0], [10.6, 2928.0], [10.7, 2928.0], [10.8, 2952.0], [10.9, 2952.0], [11.0, 2952.0], [11.1, 2952.0], [11.2, 2968.0], [11.3, 2968.0], [11.4, 2968.0], [11.5, 2970.0], [11.6, 2970.0], [11.7, 2970.0], [11.8, 2970.0], [11.9, 2970.0], [12.0, 2970.0], [12.1, 2970.0], [12.2, 2970.0], [12.3, 2977.0], [12.4, 2977.0], [12.5, 2977.0], [12.6, 2979.0], [12.7, 2979.0], [12.8, 2979.0], [12.9, 2979.0], [13.0, 2989.0], [13.1, 2989.0], [13.2, 2989.0], [13.3, 2989.0], [13.4, 2996.0], [13.5, 2996.0], [13.6, 2996.0], [13.7, 2996.0], [13.8, 3075.0], [13.9, 3075.0], [14.0, 3075.0], [14.1, 3101.0], [14.2, 3101.0], [14.3, 3101.0], [14.4, 3101.0], [14.5, 3104.0], [14.6, 3104.0], [14.7, 3104.0], [14.8, 3104.0], [14.9, 3109.0], [15.0, 3109.0], [15.1, 3109.0], [15.2, 3139.0], [15.3, 3139.0], [15.4, 3139.0], [15.5, 3139.0], [15.6, 3145.0], [15.7, 3145.0], [15.8, 3145.0], [15.9, 3145.0], [16.0, 3183.0], [16.1, 3183.0], [16.2, 3183.0], [16.3, 3190.0], [16.4, 3190.0], [16.5, 3190.0], [16.6, 3190.0], [16.7, 3192.0], [16.8, 3192.0], [16.9, 3192.0], [17.0, 3192.0], [17.1, 3284.0], [17.2, 3284.0], [17.3, 3284.0], [17.4, 3284.0], [17.5, 3320.0], [17.6, 3320.0], [17.7, 3320.0], [17.8, 3325.0], [17.9, 3325.0], [18.0, 3325.0], [18.1, 3325.0], [18.2, 3327.0], [18.3, 3327.0], [18.4, 3327.0], [18.5, 3327.0], [18.6, 3378.0], [18.7, 3378.0], [18.8, 3378.0], [18.9, 3426.0], [19.0, 3426.0], [19.1, 3426.0], [19.2, 3426.0], [19.3, 3437.0], [19.4, 3437.0], [19.5, 3437.0], [19.6, 3437.0], [19.7, 3469.0], [19.8, 3469.0], [19.9, 3469.0], [20.0, 3496.0], [20.1, 3496.0], [20.2, 3496.0], [20.3, 3496.0], [20.4, 3512.0], [20.5, 3512.0], [20.6, 3512.0], [20.7, 3512.0], [20.8, 3524.0], [20.9, 3524.0], [21.0, 3524.0], [21.1, 3524.0], [21.2, 3532.0], [21.3, 3532.0], [21.4, 3532.0], [21.5, 3547.0], [21.6, 3547.0], [21.7, 3547.0], [21.8, 3547.0], [21.9, 3648.0], [22.0, 3648.0], [22.1, 3648.0], [22.2, 3648.0], [22.3, 3684.0], [22.4, 3684.0], [22.5, 3684.0], [22.6, 3736.0], [22.7, 3736.0], [22.8, 3736.0], [22.9, 3736.0], [23.0, 3742.0], [23.1, 3742.0], [23.2, 3742.0], [23.3, 3742.0], [23.4, 3745.0], [23.5, 3745.0], [23.6, 3745.0], [23.7, 3745.0], [23.8, 3756.0], [23.9, 3756.0], [24.0, 3756.0], [24.1, 3771.0], [24.2, 3771.0], [24.3, 3771.0], [24.4, 3771.0], [24.5, 3775.0], [24.6, 3775.0], [24.7, 3775.0], [24.8, 3775.0], [24.9, 3822.0], [25.0, 3822.0], [25.1, 3822.0], [25.2, 3822.0], [25.3, 3822.0], [25.4, 3822.0], [25.5, 3822.0], [25.6, 3825.0], [25.7, 3825.0], [25.8, 3825.0], [25.9, 3825.0], [26.0, 3826.0], [26.1, 3826.0], [26.2, 3826.0], [26.3, 3837.0], [26.4, 3837.0], [26.5, 3837.0], [26.6, 3837.0], [26.7, 3863.0], [26.8, 3863.0], [26.9, 3863.0], [27.0, 3863.0], [27.1, 3880.0], [27.2, 3880.0], [27.3, 3880.0], [27.4, 3880.0], [27.5, 3884.0], [27.6, 3884.0], [27.7, 3884.0], [27.8, 3912.0], [27.9, 3912.0], [28.0, 3912.0], [28.1, 3912.0], [28.2, 3924.0], [28.3, 3924.0], [28.4, 3924.0], [28.5, 3924.0], [28.6, 3935.0], [28.7, 3935.0], [28.8, 3935.0], [28.9, 3940.0], [29.0, 3940.0], [29.1, 3940.0], [29.2, 3940.0], [29.3, 3968.0], [29.4, 3968.0], [29.5, 3968.0], [29.6, 3968.0], [29.7, 4013.0], [29.8, 4013.0], [29.9, 4013.0], [30.0, 4019.0], [30.1, 4019.0], [30.2, 4019.0], [30.3, 4019.0], [30.4, 4053.0], [30.5, 4053.0], [30.6, 4053.0], [30.7, 4053.0], [30.8, 4056.0], [30.9, 4056.0], [31.0, 4056.0], [31.1, 4056.0], [31.2, 4061.0], [31.3, 4061.0], [31.4, 4061.0], [31.5, 4172.0], [31.6, 4172.0], [31.7, 4172.0], [31.8, 4172.0], [31.9, 4176.0], [32.0, 4176.0], [32.1, 4176.0], [32.2, 4176.0], [32.3, 4245.0], [32.4, 4245.0], [32.5, 4245.0], [32.6, 4263.0], [32.7, 4263.0], [32.8, 4263.0], [32.9, 4263.0], [33.0, 4284.0], [33.1, 4284.0], [33.2, 4284.0], [33.3, 4284.0], [33.4, 4294.0], [33.5, 4294.0], [33.6, 4294.0], [33.7, 4294.0], [33.8, 4295.0], [33.9, 4295.0], [34.0, 4295.0], [34.1, 4310.0], [34.2, 4310.0], [34.3, 4310.0], [34.4, 4310.0], [34.5, 4330.0], [34.6, 4330.0], [34.7, 4330.0], [34.8, 4330.0], [34.9, 4332.0], [35.0, 4332.0], [35.1, 4332.0], [35.2, 4396.0], [35.3, 4396.0], [35.4, 4396.0], [35.5, 4396.0], [35.6, 4465.0], [35.7, 4465.0], [35.8, 4465.0], [35.9, 4465.0], [36.0, 4505.0], [36.1, 4505.0], [36.2, 4505.0], [36.3, 4513.0], [36.4, 4513.0], [36.5, 4513.0], [36.6, 4513.0], [36.7, 4524.0], [36.8, 4524.0], [36.9, 4524.0], [37.0, 4524.0], [37.1, 4582.0], [37.2, 4582.0], [37.3, 4582.0], [37.4, 4582.0], [37.5, 4586.0], [37.6, 4586.0], [37.7, 4586.0], [37.8, 4659.0], [37.9, 4659.0], [38.0, 4659.0], [38.1, 4659.0], [38.2, 4705.0], [38.3, 4705.0], [38.4, 4705.0], [38.5, 4705.0], [38.6, 4728.0], [38.7, 4728.0], [38.8, 4728.0], [38.9, 4743.0], [39.0, 4743.0], [39.1, 4743.0], [39.2, 4743.0], [39.3, 4778.0], [39.4, 4778.0], [39.5, 4778.0], [39.6, 4778.0], [39.7, 4783.0], [39.8, 4783.0], [39.9, 4783.0], [40.0, 4783.0], [40.1, 4788.0], [40.2, 4788.0], [40.3, 4788.0], [40.4, 4795.0], [40.5, 4795.0], [40.6, 4795.0], [40.7, 4795.0], [40.8, 4797.0], [40.9, 4797.0], [41.0, 4797.0], [41.1, 4797.0], [41.2, 4798.0], [41.3, 4798.0], [41.4, 4798.0], [41.5, 4836.0], [41.6, 4836.0], [41.7, 4836.0], [41.8, 4836.0], [41.9, 4837.0], [42.0, 4837.0], [42.1, 4837.0], [42.2, 4837.0], [42.3, 4849.0], [42.4, 4849.0], [42.5, 4849.0], [42.6, 4865.0], [42.7, 4865.0], [42.8, 4865.0], [42.9, 4865.0], [43.0, 4891.0], [43.1, 4891.0], [43.2, 4891.0], [43.3, 4891.0], [43.4, 4928.0], [43.5, 4928.0], [43.6, 4928.0], [43.7, 4928.0], [43.8, 4945.0], [43.9, 4945.0], [44.0, 4945.0], [44.1, 4968.0], [44.2, 4968.0], [44.3, 4968.0], [44.4, 4968.0], [44.5, 4974.0], [44.6, 4974.0], [44.7, 4974.0], [44.8, 4974.0], [44.9, 5025.0], [45.0, 5025.0], [45.1, 5025.0], [45.2, 5033.0], [45.3, 5033.0], [45.4, 5033.0], [45.5, 5033.0], [45.6, 5139.0], [45.7, 5139.0], [45.8, 5139.0], [45.9, 5139.0], [46.0, 5180.0], [46.1, 5180.0], [46.2, 5180.0], [46.3, 5213.0], [46.4, 5213.0], [46.5, 5213.0], [46.6, 5213.0], [46.7, 5236.0], [46.8, 5236.0], [46.9, 5236.0], [47.0, 5236.0], [47.1, 5242.0], [47.2, 5242.0], [47.3, 5242.0], [47.4, 5242.0], [47.5, 5246.0], [47.6, 5246.0], [47.7, 5246.0], [47.8, 5368.0], [47.9, 5368.0], [48.0, 5368.0], [48.1, 5368.0], [48.2, 5400.0], [48.3, 5400.0], [48.4, 5400.0], [48.5, 5400.0], [48.6, 5434.0], [48.7, 5434.0], [48.8, 5434.0], [48.9, 5465.0], [49.0, 5465.0], [49.1, 5465.0], [49.2, 5465.0], [49.3, 5570.0], [49.4, 5570.0], [49.5, 5570.0], [49.6, 5570.0], [49.7, 5572.0], [49.8, 5572.0], [49.9, 5572.0], [50.0, 5572.0], [50.1, 5596.0], [50.2, 5596.0], [50.3, 5596.0], [50.4, 5619.0], [50.5, 5619.0], [50.6, 5619.0], [50.7, 5619.0], [50.8, 5629.0], [50.9, 5629.0], [51.0, 5629.0], [51.1, 5629.0], [51.2, 5646.0], [51.3, 5646.0], [51.4, 5646.0], [51.5, 5671.0], [51.6, 5671.0], [51.7, 5671.0], [51.8, 5671.0], [51.9, 5681.0], [52.0, 5681.0], [52.1, 5681.0], [52.2, 5681.0], [52.3, 5695.0], [52.4, 5695.0], [52.5, 5695.0], [52.6, 5708.0], [52.7, 5708.0], [52.8, 5708.0], [52.9, 5708.0], [53.0, 5716.0], [53.1, 5716.0], [53.2, 5716.0], [53.3, 5716.0], [53.4, 5738.0], [53.5, 5738.0], [53.6, 5738.0], [53.7, 5738.0], [53.8, 5750.0], [53.9, 5750.0], [54.0, 5750.0], [54.1, 5763.0], [54.2, 5763.0], [54.3, 5763.0], [54.4, 5763.0], [54.5, 5781.0], [54.6, 5781.0], [54.7, 5781.0], [54.8, 5781.0], [54.9, 5790.0], [55.0, 5790.0], [55.1, 5790.0], [55.2, 5807.0], [55.3, 5807.0], [55.4, 5807.0], [55.5, 5807.0], [55.6, 5953.0], [55.7, 5953.0], [55.8, 5953.0], [55.9, 5953.0], [56.0, 5957.0], [56.1, 5957.0], [56.2, 5957.0], [56.3, 5961.0], [56.4, 5961.0], [56.5, 5961.0], [56.6, 5961.0], [56.7, 5973.0], [56.8, 5973.0], [56.9, 5973.0], [57.0, 5973.0], [57.1, 5987.0], [57.2, 5987.0], [57.3, 5987.0], [57.4, 5987.0], [57.5, 5996.0], [57.6, 5996.0], [57.7, 5996.0], [57.8, 6002.0], [57.9, 6002.0], [58.0, 6002.0], [58.1, 6002.0], [58.2, 6010.0], [58.3, 6010.0], [58.4, 6010.0], [58.5, 6010.0], [58.6, 6012.0], [58.7, 6012.0], [58.8, 6012.0], [58.9, 6016.0], [59.0, 6016.0], [59.1, 6016.0], [59.2, 6016.0], [59.3, 6022.0], [59.4, 6022.0], [59.5, 6022.0], [59.6, 6022.0], [59.7, 6104.0], [59.8, 6104.0], [59.9, 6104.0], [60.0, 6104.0], [60.1, 6138.0], [60.2, 6138.0], [60.3, 6138.0], [60.4, 6254.0], [60.5, 6254.0], [60.6, 6254.0], [60.7, 6254.0], [60.8, 6262.0], [60.9, 6262.0], [61.0, 6262.0], [61.1, 6262.0], [61.2, 6279.0], [61.3, 6279.0], [61.4, 6279.0], [61.5, 6280.0], [61.6, 6280.0], [61.7, 6280.0], [61.8, 6280.0], [61.9, 6309.0], [62.0, 6309.0], [62.1, 6309.0], [62.2, 6309.0], [62.3, 6347.0], [62.4, 6347.0], [62.5, 6347.0], [62.6, 6349.0], [62.7, 6349.0], [62.8, 6349.0], [62.9, 6349.0], [63.0, 6350.0], [63.1, 6350.0], [63.2, 6350.0], [63.3, 6350.0], [63.4, 6352.0], [63.5, 6352.0], [63.6, 6352.0], [63.7, 6352.0], [63.8, 6380.0], [63.9, 6380.0], [64.0, 6380.0], [64.1, 6384.0], [64.2, 6384.0], [64.3, 6384.0], [64.4, 6384.0], [64.5, 6388.0], [64.6, 6388.0], [64.7, 6388.0], [64.8, 6388.0], [64.9, 6395.0], [65.0, 6395.0], [65.1, 6395.0], [65.2, 6401.0], [65.3, 6401.0], [65.4, 6401.0], [65.5, 6401.0], [65.6, 6430.0], [65.7, 6430.0], [65.8, 6430.0], [65.9, 6430.0], [66.0, 6462.0], [66.1, 6462.0], [66.2, 6462.0], [66.3, 6469.0], [66.4, 6469.0], [66.5, 6469.0], [66.6, 6469.0], [66.7, 6483.0], [66.8, 6483.0], [66.9, 6483.0], [67.0, 6483.0], [67.1, 6488.0], [67.2, 6488.0], [67.3, 6488.0], [67.4, 6488.0], [67.5, 6488.0], [67.6, 6488.0], [67.7, 6488.0], [67.8, 6488.0], [67.9, 6488.0], [68.0, 6488.0], [68.1, 6488.0], [68.2, 6491.0], [68.3, 6491.0], [68.4, 6491.0], [68.5, 6491.0], [68.6, 6599.0], [68.7, 6599.0], [68.8, 6599.0], [68.9, 6609.0], [69.0, 6609.0], [69.1, 6609.0], [69.2, 6609.0], [69.3, 6656.0], [69.4, 6656.0], [69.5, 6656.0], [69.6, 6656.0], [69.7, 6662.0], [69.8, 6662.0], [69.9, 6662.0], [70.0, 6662.0], [70.1, 6663.0], [70.2, 6663.0], [70.3, 6663.0], [70.4, 6728.0], [70.5, 6728.0], [70.6, 6728.0], [70.7, 6728.0], [70.8, 6734.0], [70.9, 6734.0], [71.0, 6734.0], [71.1, 6734.0], [71.2, 6747.0], [71.3, 6747.0], [71.4, 6747.0], [71.5, 6755.0], [71.6, 6755.0], [71.7, 6755.0], [71.8, 6755.0], [71.9, 6758.0], [72.0, 6758.0], [72.1, 6758.0], [72.2, 6758.0], [72.3, 6829.0], [72.4, 6829.0], [72.5, 6829.0], [72.6, 6860.0], [72.7, 6860.0], [72.8, 6860.0], [72.9, 6860.0], [73.0, 6870.0], [73.1, 6870.0], [73.2, 6870.0], [73.3, 6870.0], [73.4, 6913.0], [73.5, 6913.0], [73.6, 6913.0], [73.7, 6913.0], [73.8, 6947.0], [73.9, 6947.0], [74.0, 6947.0], [74.1, 7002.0], [74.2, 7002.0], [74.3, 7002.0], [74.4, 7002.0], [74.5, 7011.0], [74.6, 7011.0], [74.7, 7011.0], [74.8, 7011.0], [74.9, 7062.0], [75.0, 7062.0], [75.1, 7062.0], [75.2, 7091.0], [75.3, 7091.0], [75.4, 7091.0], [75.5, 7091.0], [75.6, 7114.0], [75.7, 7114.0], [75.8, 7114.0], [75.9, 7114.0], [76.0, 7114.0], [76.1, 7114.0], [76.2, 7114.0], [76.3, 7121.0], [76.4, 7121.0], [76.5, 7121.0], [76.6, 7121.0], [76.7, 7151.0], [76.8, 7151.0], [76.9, 7151.0], [77.0, 7151.0], [77.1, 7166.0], [77.2, 7166.0], [77.3, 7166.0], [77.4, 7166.0], [77.5, 7204.0], [77.6, 7204.0], [77.7, 7204.0], [77.8, 7346.0], [77.9, 7346.0], [78.0, 7346.0], [78.1, 7346.0], [78.2, 7473.0], [78.3, 7473.0], [78.4, 7473.0], [78.5, 7473.0], [78.6, 7483.0], [78.7, 7483.0], [78.8, 7483.0], [78.9, 7489.0], [79.0, 7489.0], [79.1, 7489.0], [79.2, 7489.0], [79.3, 7493.0], [79.4, 7493.0], [79.5, 7493.0], [79.6, 7493.0], [79.7, 7510.0], [79.8, 7510.0], [79.9, 7510.0], [80.0, 7510.0], [80.1, 7557.0], [80.2, 7557.0], [80.3, 7557.0], [80.4, 7583.0], [80.5, 7583.0], [80.6, 7583.0], [80.7, 7583.0], [80.8, 7595.0], [80.9, 7595.0], [81.0, 7595.0], [81.1, 7595.0], [81.2, 7684.0], [81.3, 7684.0], [81.4, 7684.0], [81.5, 7722.0], [81.6, 7722.0], [81.7, 7722.0], [81.8, 7722.0], [81.9, 7772.0], [82.0, 7772.0], [82.1, 7772.0], [82.2, 7772.0], [82.3, 7776.0], [82.4, 7776.0], [82.5, 7776.0], [82.6, 7988.0], [82.7, 7988.0], [82.8, 7988.0], [82.9, 7988.0], [83.0, 8055.0], [83.1, 8055.0], [83.2, 8055.0], [83.3, 8055.0], [83.4, 8085.0], [83.5, 8085.0], [83.6, 8085.0], [83.7, 8085.0], [83.8, 8101.0], [83.9, 8101.0], [84.0, 8101.0], [84.1, 8340.0], [84.2, 8340.0], [84.3, 8340.0], [84.4, 8340.0], [84.5, 8343.0], [84.6, 8343.0], [84.7, 8343.0], [84.8, 8343.0], [84.9, 8351.0], [85.0, 8351.0], [85.1, 8351.0], [85.2, 8402.0], [85.3, 8402.0], [85.4, 8402.0], [85.5, 8402.0], [85.6, 8535.0], [85.7, 8535.0], [85.8, 8535.0], [85.9, 8535.0], [86.0, 8641.0], [86.1, 8641.0], [86.2, 8641.0], [86.3, 8661.0], [86.4, 8661.0], [86.5, 8661.0], [86.6, 8661.0], [86.7, 8663.0], [86.8, 8663.0], [86.9, 8663.0], [87.0, 8663.0], [87.1, 8665.0], [87.2, 8665.0], [87.3, 8665.0], [87.4, 8665.0], [87.5, 8980.0], [87.6, 8980.0], [87.7, 8980.0], [87.8, 9015.0], [87.9, 9015.0], [88.0, 9015.0], [88.1, 9015.0], [88.2, 9019.0], [88.3, 9019.0], [88.4, 9019.0], [88.5, 9019.0], [88.6, 9234.0], [88.7, 9234.0], [88.8, 9234.0], [88.9, 9257.0], [89.0, 9257.0], [89.1, 9257.0], [89.2, 9257.0], [89.3, 9291.0], [89.4, 9291.0], [89.5, 9291.0], [89.6, 9291.0], [89.7, 9315.0], [89.8, 9315.0], [89.9, 9315.0], [90.0, 9315.0], [90.1, 9319.0], [90.2, 9319.0], [90.3, 9319.0], [90.4, 9334.0], [90.5, 9334.0], [90.6, 9334.0], [90.7, 9334.0], [90.8, 9354.0], [90.9, 9354.0], [91.0, 9354.0], [91.1, 9354.0], [91.2, 9366.0], [91.3, 9366.0], [91.4, 9366.0], [91.5, 9413.0], [91.6, 9413.0], [91.7, 9413.0], [91.8, 9413.0], [91.9, 9414.0], [92.0, 9414.0], [92.1, 9414.0], [92.2, 9414.0], [92.3, 9414.0], [92.4, 9414.0], [92.5, 9414.0], [92.6, 9524.0], [92.7, 9524.0], [92.8, 9524.0], [92.9, 9524.0], [93.0, 9545.0], [93.1, 9545.0], [93.2, 9545.0], [93.3, 9545.0], [93.4, 9592.0], [93.5, 9592.0], [93.6, 9592.0], [93.7, 9592.0], [93.8, 9603.0], [93.9, 9603.0], [94.0, 9603.0], [94.1, 9607.0], [94.2, 9607.0], [94.3, 9607.0], [94.4, 9607.0], [94.5, 9649.0], [94.6, 9649.0], [94.7, 9649.0], [94.8, 9649.0], [94.9, 9669.0], [95.0, 9669.0], [95.1, 9669.0], [95.2, 9681.0], [95.3, 9681.0], [95.4, 9681.0], [95.5, 9681.0], [95.6, 9682.0], [95.7, 9682.0], [95.8, 9682.0], [95.9, 9682.0], [96.0, 9717.0], [96.1, 9717.0], [96.2, 9717.0], [96.3, 9725.0], [96.4, 9725.0], [96.5, 9725.0], [96.6, 9725.0], [96.7, 9773.0], [96.8, 9773.0], [96.9, 9773.0], [97.0, 9773.0], [97.1, 9778.0], [97.2, 9778.0], [97.3, 9778.0], [97.4, 9778.0], [97.5, 9779.0], [97.6, 9779.0], [97.7, 9779.0], [97.8, 9817.0], [97.9, 9817.0], [98.0, 9817.0], [98.1, 9817.0], [98.2, 9825.0], [98.3, 9825.0], [98.4, 9825.0], [98.5, 9825.0], [98.6, 9846.0], [98.7, 9846.0], [98.8, 9846.0], [98.9, 9847.0], [99.0, 9847.0], [99.1, 9847.0], [99.2, 9847.0], [99.3, 9848.0], [99.4, 9848.0], [99.5, 9848.0], [99.6, 9848.0], [99.7, 9852.0], [99.8, 9852.0], [99.9, 9852.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[0.0, 5066.0], [0.1, 5066.0], [0.2, 5066.0], [0.3, 5066.0], [0.4, 6144.0], [0.5, 6144.0], [0.6, 6144.0], [0.7, 6144.0], [0.8, 6332.0], [0.9, 6332.0], [1.0, 6332.0], [1.1, 6332.0], [1.2, 6352.0], [1.3, 6352.0], [1.4, 6352.0], [1.5, 6900.0], [1.6, 6900.0], [1.7, 6900.0], [1.8, 6900.0], [1.9, 12488.0], [2.0, 12488.0], [2.1, 12488.0], [2.2, 12488.0], [2.3, 19775.0], [2.4, 19775.0], [2.5, 19775.0], [2.6, 24571.0], [2.7, 24571.0], [2.8, 24571.0], [2.9, 24571.0], [3.0, 27368.0], [3.1, 27368.0], [3.2, 27368.0], [3.3, 27368.0], [3.4, 30368.0], [3.5, 30368.0], [3.6, 30368.0], [3.7, 30368.0], [3.8, 37080.0], [3.9, 37080.0], [4.0, 37080.0], [4.1, 37291.0], [4.2, 37291.0], [4.3, 37291.0], [4.4, 37291.0], [4.5, 38679.0], [4.6, 38679.0], [4.7, 38679.0], [4.8, 38679.0], [4.9, 39174.0], [5.0, 39174.0], [5.1, 39174.0], [5.2, 40218.0], [5.3, 40218.0], [5.4, 40218.0], [5.5, 40218.0], [5.6, 45279.0], [5.7, 45279.0], [5.8, 45279.0], [5.9, 45279.0], [6.0, 45643.0], [6.1, 45643.0], [6.2, 45643.0], [6.3, 45656.0], [6.4, 45656.0], [6.5, 45656.0], [6.6, 45656.0], [6.7, 45664.0], [6.8, 45664.0], [6.9, 45664.0], [7.0, 45664.0], [7.1, 47404.0], [7.2, 47404.0], [7.3, 47404.0], [7.4, 47404.0], [7.5, 47626.0], [7.6, 47626.0], [7.7, 47626.0], [7.8, 48190.0], [7.9, 48190.0], [8.0, 48190.0], [8.1, 48190.0], [8.2, 48233.0], [8.3, 48233.0], [8.4, 48233.0], [8.5, 48233.0], [8.6, 48253.0], [8.7, 48253.0], [8.8, 48253.0], [8.9, 48292.0], [9.0, 48292.0], [9.1, 48292.0], [9.2, 48292.0], [9.3, 48403.0], [9.4, 48403.0], [9.5, 48403.0], [9.6, 48403.0], [9.7, 48456.0], [9.8, 48456.0], [9.9, 48456.0], [10.0, 48603.0], [10.1, 48603.0], [10.2, 48603.0], [10.3, 48603.0], [10.4, 48636.0], [10.5, 48636.0], [10.6, 48636.0], [10.7, 48636.0], [10.8, 48758.0], [10.9, 48758.0], [11.0, 48758.0], [11.1, 48758.0], [11.2, 48822.0], [11.3, 48822.0], [11.4, 48822.0], [11.5, 48852.0], [11.6, 48852.0], [11.7, 48852.0], [11.8, 48852.0], [11.9, 49086.0], [12.0, 49086.0], [12.1, 49086.0], [12.2, 49086.0], [12.3, 49111.0], [12.4, 49111.0], [12.5, 49111.0], [12.6, 49155.0], [12.7, 49155.0], [12.8, 49155.0], [12.9, 49155.0], [13.0, 49163.0], [13.1, 49163.0], [13.2, 49163.0], [13.3, 49163.0], [13.4, 49262.0], [13.5, 49262.0], [13.6, 49262.0], [13.7, 49262.0], [13.8, 49315.0], [13.9, 49315.0], [14.0, 49315.0], [14.1, 49412.0], [14.2, 49412.0], [14.3, 49412.0], [14.4, 49412.0], [14.5, 49443.0], [14.6, 49443.0], [14.7, 49443.0], [14.8, 49443.0], [14.9, 49527.0], [15.0, 49527.0], [15.1, 49527.0], [15.2, 49632.0], [15.3, 49632.0], [15.4, 49632.0], [15.5, 49632.0], [15.6, 49649.0], [15.7, 49649.0], [15.8, 49649.0], [15.9, 49649.0], [16.0, 49665.0], [16.1, 49665.0], [16.2, 49665.0], [16.3, 49722.0], [16.4, 49722.0], [16.5, 49722.0], [16.6, 49722.0], [16.7, 49819.0], [16.8, 49819.0], [16.9, 49819.0], [17.0, 49819.0], [17.1, 49934.0], [17.2, 49934.0], [17.3, 49934.0], [17.4, 49934.0], [17.5, 50236.0], [17.6, 50236.0], [17.7, 50236.0], [17.8, 50371.0], [17.9, 50371.0], [18.0, 50371.0], [18.1, 50371.0], [18.2, 50812.0], [18.3, 50812.0], [18.4, 50812.0], [18.5, 50812.0], [18.6, 54261.0], [18.7, 54261.0], [18.8, 54261.0], [18.9, 54547.0], [19.0, 54547.0], [19.1, 54547.0], [19.2, 54547.0], [19.3, 54556.0], [19.4, 54556.0], [19.5, 54556.0], [19.6, 54556.0], [19.7, 54607.0], [19.8, 54607.0], [19.9, 54607.0], [20.0, 54671.0], [20.1, 54671.0], [20.2, 54671.0], [20.3, 54671.0], [20.4, 54902.0], [20.5, 54902.0], [20.6, 54902.0], [20.7, 54902.0], [20.8, 54968.0], [20.9, 54968.0], [21.0, 54968.0], [21.1, 54968.0], [21.2, 55153.0], [21.3, 55153.0], [21.4, 55153.0], [21.5, 55518.0], [21.6, 55518.0], [21.7, 55518.0], [21.8, 55518.0], [21.9, 55617.0], [22.0, 55617.0], [22.1, 55617.0], [22.2, 55617.0], [22.3, 55634.0], [22.4, 55634.0], [22.5, 55634.0], [22.6, 56184.0], [22.7, 56184.0], [22.8, 56184.0], [22.9, 56184.0], [23.0, 56253.0], [23.1, 56253.0], [23.2, 56253.0], [23.3, 56253.0], [23.4, 56339.0], [23.5, 56339.0], [23.6, 56339.0], [23.7, 56339.0], [23.8, 56406.0], [23.9, 56406.0], [24.0, 56406.0], [24.1, 56422.0], [24.2, 56422.0], [24.3, 56422.0], [24.4, 56422.0], [24.5, 56571.0], [24.6, 56571.0], [24.7, 56571.0], [24.8, 56571.0], [24.9, 56611.0], [25.0, 56611.0], [25.1, 56611.0], [25.2, 56896.0], [25.3, 56896.0], [25.4, 56896.0], [25.5, 56896.0], [25.6, 56905.0], [25.7, 56905.0], [25.8, 56905.0], [25.9, 56905.0], [26.0, 56933.0], [26.1, 56933.0], [26.2, 56933.0], [26.3, 57014.0], [26.4, 57014.0], [26.5, 57014.0], [26.6, 57014.0], [26.7, 57030.0], [26.8, 57030.0], [26.9, 57030.0], [27.0, 57030.0], [27.1, 57039.0], [27.2, 57039.0], [27.3, 57039.0], [27.4, 57039.0], [27.5, 57210.0], [27.6, 57210.0], [27.7, 57210.0], [27.8, 57240.0], [27.9, 57240.0], [28.0, 57240.0], [28.1, 57240.0], [28.2, 57284.0], [28.3, 57284.0], [28.4, 57284.0], [28.5, 57284.0], [28.6, 57558.0], [28.7, 57558.0], [28.8, 57558.0], [28.9, 57644.0], [29.0, 57644.0], [29.1, 57644.0], [29.2, 57644.0], [29.3, 57658.0], [29.4, 57658.0], [29.5, 57658.0], [29.6, 57658.0], [29.7, 57674.0], [29.8, 57674.0], [29.9, 57674.0], [30.0, 57745.0], [30.1, 57745.0], [30.2, 57745.0], [30.3, 57745.0], [30.4, 57914.0], [30.5, 57914.0], [30.6, 57914.0], [30.7, 57914.0], [30.8, 58045.0], [30.9, 58045.0], [31.0, 58045.0], [31.1, 58045.0], [31.2, 58054.0], [31.3, 58054.0], [31.4, 58054.0], [31.5, 58138.0], [31.6, 58138.0], [31.7, 58138.0], [31.8, 58138.0], [31.9, 58141.0], [32.0, 58141.0], [32.1, 58141.0], [32.2, 58141.0], [32.3, 58160.0], [32.4, 58160.0], [32.5, 58160.0], [32.6, 58195.0], [32.7, 58195.0], [32.8, 58195.0], [32.9, 58195.0], [33.0, 58215.0], [33.1, 58215.0], [33.2, 58215.0], [33.3, 58215.0], [33.4, 58220.0], [33.5, 58220.0], [33.6, 58220.0], [33.7, 58220.0], [33.8, 58430.0], [33.9, 58430.0], [34.0, 58430.0], [34.1, 58526.0], [34.2, 58526.0], [34.3, 58526.0], [34.4, 58526.0], [34.5, 58530.0], [34.6, 58530.0], [34.7, 58530.0], [34.8, 58530.0], [34.9, 60002.0], [35.0, 60002.0], [35.1, 60002.0], [35.2, 60002.0], [35.3, 60002.0], [35.4, 60002.0], [35.5, 60002.0], [35.6, 60004.0], [35.7, 60004.0], [35.8, 60004.0], [35.9, 60004.0], [36.0, 60004.0], [36.1, 60004.0], [36.2, 60004.0], [36.3, 60005.0], [36.4, 60005.0], [36.5, 60005.0], [36.6, 60005.0], [36.7, 60012.0], [36.8, 60012.0], [36.9, 60012.0], [37.0, 60012.0], [37.1, 60017.0], [37.2, 60017.0], [37.3, 60017.0], [37.4, 60017.0], [37.5, 60017.0], [37.6, 60017.0], [37.7, 60017.0], [37.8, 60019.0], [37.9, 60019.0], [38.0, 60019.0], [38.1, 60019.0], [38.2, 60019.0], [38.3, 60019.0], [38.4, 60019.0], [38.5, 60019.0], [38.6, 60029.0], [38.7, 60029.0], [38.8, 60029.0], [38.9, 60031.0], [39.0, 60031.0], [39.1, 60031.0], [39.2, 60031.0], [39.3, 60036.0], [39.4, 60036.0], [39.5, 60036.0], [39.6, 60036.0], [39.7, 60038.0], [39.8, 60038.0], [39.9, 60038.0], [40.0, 60038.0], [40.1, 60040.0], [40.2, 60040.0], [40.3, 60040.0], [40.4, 60303.0], [40.5, 60303.0], [40.6, 60303.0], [40.7, 60303.0], [40.8, 61207.0], [40.9, 61207.0], [41.0, 61207.0], [41.1, 61207.0], [41.2, 61342.0], [41.3, 61342.0], [41.4, 61342.0], [41.5, 64716.0], [41.6, 64716.0], [41.7, 64716.0], [41.8, 64716.0], [41.9, 64773.0], [42.0, 64773.0], [42.1, 64773.0], [42.2, 64773.0], [42.3, 64938.0], [42.4, 64938.0], [42.5, 64938.0], [42.6, 65007.0], [42.7, 65007.0], [42.8, 65007.0], [42.9, 65007.0], [43.0, 65376.0], [43.1, 65376.0], [43.2, 65376.0], [43.3, 65376.0], [43.4, 65497.0], [43.5, 65497.0], [43.6, 65497.0], [43.7, 65497.0], [43.8, 65886.0], [43.9, 65886.0], [44.0, 65886.0], [44.1, 66011.0], [44.2, 66011.0], [44.3, 66011.0], [44.4, 66011.0], [44.5, 66026.0], [44.6, 66026.0], [44.7, 66026.0], [44.8, 66026.0], [44.9, 66074.0], [45.0, 66074.0], [45.1, 66074.0], [45.2, 66230.0], [45.3, 66230.0], [45.4, 66230.0], [45.5, 66230.0], [45.6, 66286.0], [45.7, 66286.0], [45.8, 66286.0], [45.9, 66286.0], [46.0, 66584.0], [46.1, 66584.0], [46.2, 66584.0], [46.3, 66609.0], [46.4, 66609.0], [46.5, 66609.0], [46.6, 66609.0], [46.7, 66682.0], [46.8, 66682.0], [46.9, 66682.0], [47.0, 66682.0], [47.1, 66738.0], [47.2, 66738.0], [47.3, 66738.0], [47.4, 66738.0], [47.5, 66794.0], [47.6, 66794.0], [47.7, 66794.0], [47.8, 66803.0], [47.9, 66803.0], [48.0, 66803.0], [48.1, 66803.0], [48.2, 66853.0], [48.3, 66853.0], [48.4, 66853.0], [48.5, 66853.0], [48.6, 66978.0], [48.7, 66978.0], [48.8, 66978.0], [48.9, 67088.0], [49.0, 67088.0], [49.1, 67088.0], [49.2, 67088.0], [49.3, 67216.0], [49.4, 67216.0], [49.5, 67216.0], [49.6, 67216.0], [49.7, 67495.0], [49.8, 67495.0], [49.9, 67495.0], [50.0, 67495.0], [50.1, 67500.0], [50.2, 67500.0], [50.3, 67500.0], [50.4, 67646.0], [50.5, 67646.0], [50.6, 67646.0], [50.7, 67646.0], [50.8, 67673.0], [50.9, 67673.0], [51.0, 67673.0], [51.1, 67673.0], [51.2, 67763.0], [51.3, 67763.0], [51.4, 67763.0], [51.5, 68295.0], [51.6, 68295.0], [51.7, 68295.0], [51.8, 68295.0], [51.9, 68404.0], [52.0, 68404.0], [52.1, 68404.0], [52.2, 68404.0], [52.3, 68404.0], [52.4, 68404.0], [52.5, 68404.0], [52.6, 68405.0], [52.7, 68405.0], [52.8, 68405.0], [52.9, 68405.0], [53.0, 68418.0], [53.1, 68418.0], [53.2, 68418.0], [53.3, 68418.0], [53.4, 68421.0], [53.5, 68421.0], [53.6, 68421.0], [53.7, 68421.0], [53.8, 68459.0], [53.9, 68459.0], [54.0, 68459.0], [54.1, 68539.0], [54.2, 68539.0], [54.3, 68539.0], [54.4, 68539.0], [54.5, 68679.0], [54.6, 68679.0], [54.7, 68679.0], [54.8, 68679.0], [54.9, 68829.0], [55.0, 68829.0], [55.1, 68829.0], [55.2, 68866.0], [55.3, 68866.0], [55.4, 68866.0], [55.5, 68866.0], [55.6, 68881.0], [55.7, 68881.0], [55.8, 68881.0], [55.9, 68881.0], [56.0, 69018.0], [56.1, 69018.0], [56.2, 69018.0], [56.3, 69023.0], [56.4, 69023.0], [56.5, 69023.0], [56.6, 69023.0], [56.7, 69058.0], [56.8, 69058.0], [56.9, 69058.0], [57.0, 69058.0], [57.1, 69229.0], [57.2, 69229.0], [57.3, 69229.0], [57.4, 69229.0], [57.5, 69276.0], [57.6, 69276.0], [57.7, 69276.0], [57.8, 69310.0], [57.9, 69310.0], [58.0, 69310.0], [58.1, 69310.0], [58.2, 69324.0], [58.3, 69324.0], [58.4, 69324.0], [58.5, 69324.0], [58.6, 69326.0], [58.7, 69326.0], [58.8, 69326.0], [58.9, 69338.0], [59.0, 69338.0], [59.1, 69338.0], [59.2, 69338.0], [59.3, 69366.0], [59.4, 69366.0], [59.5, 69366.0], [59.6, 69366.0], [59.7, 69457.0], [59.8, 69457.0], [59.9, 69457.0], [60.0, 69457.0], [60.1, 69467.0], [60.2, 69467.0], [60.3, 69467.0], [60.4, 69469.0], [60.5, 69469.0], [60.6, 69469.0], [60.7, 69469.0], [60.8, 69480.0], [60.9, 69480.0], [61.0, 69480.0], [61.1, 69480.0], [61.2, 69516.0], [61.3, 69516.0], [61.4, 69516.0], [61.5, 69548.0], [61.6, 69548.0], [61.7, 69548.0], [61.8, 69548.0], [61.9, 69555.0], [62.0, 69555.0], [62.1, 69555.0], [62.2, 69555.0], [62.3, 69571.0], [62.4, 69571.0], [62.5, 69571.0], [62.6, 69604.0], [62.7, 69604.0], [62.8, 69604.0], [62.9, 69604.0], [63.0, 69658.0], [63.1, 69658.0], [63.2, 69658.0], [63.3, 69658.0], [63.4, 69660.0], [63.5, 69660.0], [63.6, 69660.0], [63.7, 69660.0], [63.8, 69723.0], [63.9, 69723.0], [64.0, 69723.0], [64.1, 69739.0], [64.2, 69739.0], [64.3, 69739.0], [64.4, 69739.0], [64.5, 69746.0], [64.6, 69746.0], [64.7, 69746.0], [64.8, 69746.0], [64.9, 69761.0], [65.0, 69761.0], [65.1, 69761.0], [65.2, 69782.0], [65.3, 69782.0], [65.4, 69782.0], [65.5, 69782.0], [65.6, 69863.0], [65.7, 69863.0], [65.8, 69863.0], [65.9, 69863.0], [66.0, 69867.0], [66.1, 69867.0], [66.2, 69867.0], [66.3, 69911.0], [66.4, 69911.0], [66.5, 69911.0], [66.6, 69911.0], [66.7, 69922.0], [66.8, 69922.0], [66.9, 69922.0], [67.0, 69922.0], [67.1, 69928.0], [67.2, 69928.0], [67.3, 69928.0], [67.4, 69928.0], [67.5, 69932.0], [67.6, 69932.0], [67.7, 69932.0], [67.8, 69966.0], [67.9, 69966.0], [68.0, 69966.0], [68.1, 69966.0], [68.2, 69996.0], [68.3, 69996.0], [68.4, 69996.0], [68.5, 69996.0], [68.6, 70020.0], [68.7, 70020.0], [68.8, 70020.0], [68.9, 70022.0], [69.0, 70022.0], [69.1, 70022.0], [69.2, 70022.0], [69.3, 70031.0], [69.4, 70031.0], [69.5, 70031.0], [69.6, 70031.0], [69.7, 70045.0], [69.8, 70045.0], [69.9, 70045.0], [70.0, 70045.0], [70.1, 70053.0], [70.2, 70053.0], [70.3, 70053.0], [70.4, 70059.0], [70.5, 70059.0], [70.6, 70059.0], [70.7, 70059.0], [70.8, 70086.0], [70.9, 70086.0], [71.0, 70086.0], [71.1, 70086.0], [71.2, 70103.0], [71.3, 70103.0], [71.4, 70103.0], [71.5, 70107.0], [71.6, 70107.0], [71.7, 70107.0], [71.8, 70107.0], [71.9, 70116.0], [72.0, 70116.0], [72.1, 70116.0], [72.2, 70116.0], [72.3, 70117.0], [72.4, 70117.0], [72.5, 70117.0], [72.6, 70134.0], [72.7, 70134.0], [72.8, 70134.0], [72.9, 70134.0], [73.0, 70136.0], [73.1, 70136.0], [73.2, 70136.0], [73.3, 70136.0], [73.4, 70147.0], [73.5, 70147.0], [73.6, 70147.0], [73.7, 70147.0], [73.8, 70173.0], [73.9, 70173.0], [74.0, 70173.0], [74.1, 70185.0], [74.2, 70185.0], [74.3, 70185.0], [74.4, 70185.0], [74.5, 70213.0], [74.6, 70213.0], [74.7, 70213.0], [74.8, 70213.0], [74.9, 70216.0], [75.0, 70216.0], [75.1, 70216.0], [75.2, 70219.0], [75.3, 70219.0], [75.4, 70219.0], [75.5, 70219.0], [75.6, 70232.0], [75.7, 70232.0], [75.8, 70232.0], [75.9, 70232.0], [76.0, 70239.0], [76.1, 70239.0], [76.2, 70239.0], [76.3, 70243.0], [76.4, 70243.0], [76.5, 70243.0], [76.6, 70243.0], [76.7, 70248.0], [76.8, 70248.0], [76.9, 70248.0], [77.0, 70248.0], [77.1, 70251.0], [77.2, 70251.0], [77.3, 70251.0], [77.4, 70251.0], [77.5, 70254.0], [77.6, 70254.0], [77.7, 70254.0], [77.8, 70269.0], [77.9, 70269.0], [78.0, 70269.0], [78.1, 70269.0], [78.2, 70270.0], [78.3, 70270.0], [78.4, 70270.0], [78.5, 70270.0], [78.6, 70323.0], [78.7, 70323.0], [78.8, 70323.0], [78.9, 70348.0], [79.0, 70348.0], [79.1, 70348.0], [79.2, 70348.0], [79.3, 70372.0], [79.4, 70372.0], [79.5, 70372.0], [79.6, 70372.0], [79.7, 70422.0], [79.8, 70422.0], [79.9, 70422.0], [80.0, 70422.0], [80.1, 70431.0], [80.2, 70431.0], [80.3, 70431.0], [80.4, 70432.0], [80.5, 70432.0], [80.6, 70432.0], [80.7, 70432.0], [80.8, 70540.0], [80.9, 70540.0], [81.0, 70540.0], [81.1, 70540.0], [81.2, 70607.0], [81.3, 70607.0], [81.4, 70607.0], [81.5, 70627.0], [81.6, 70627.0], [81.7, 70627.0], [81.8, 70627.0], [81.9, 70677.0], [82.0, 70677.0], [82.1, 70677.0], [82.2, 70677.0], [82.3, 70707.0], [82.4, 70707.0], [82.5, 70707.0], [82.6, 70730.0], [82.7, 70730.0], [82.8, 70730.0], [82.9, 70730.0], [83.0, 70745.0], [83.1, 70745.0], [83.2, 70745.0], [83.3, 70745.0], [83.4, 70753.0], [83.5, 70753.0], [83.6, 70753.0], [83.7, 70753.0], [83.8, 70777.0], [83.9, 70777.0], [84.0, 70777.0], [84.1, 70829.0], [84.2, 70829.0], [84.3, 70829.0], [84.4, 70829.0], [84.5, 70833.0], [84.6, 70833.0], [84.7, 70833.0], [84.8, 70833.0], [84.9, 70868.0], [85.0, 70868.0], [85.1, 70868.0], [85.2, 70869.0], [85.3, 70869.0], [85.4, 70869.0], [85.5, 70869.0], [85.6, 70921.0], [85.7, 70921.0], [85.8, 70921.0], [85.9, 70921.0], [86.0, 70923.0], [86.1, 70923.0], [86.2, 70923.0], [86.3, 70997.0], [86.4, 70997.0], [86.5, 70997.0], [86.6, 70997.0], [86.7, 71138.0], [86.8, 71138.0], [86.9, 71138.0], [87.0, 71138.0], [87.1, 71228.0], [87.2, 71228.0], [87.3, 71228.0], [87.4, 71228.0], [87.5, 71295.0], [87.6, 71295.0], [87.7, 71295.0], [87.8, 71385.0], [87.9, 71385.0], [88.0, 71385.0], [88.1, 71385.0], [88.2, 71474.0], [88.3, 71474.0], [88.4, 71474.0], [88.5, 71474.0], [88.6, 71479.0], [88.7, 71479.0], [88.8, 71479.0], [88.9, 71523.0], [89.0, 71523.0], [89.1, 71523.0], [89.2, 71523.0], [89.3, 71586.0], [89.4, 71586.0], [89.5, 71586.0], [89.6, 71586.0], [89.7, 71602.0], [89.8, 71602.0], [89.9, 71602.0], [90.0, 71880.0], [90.1, 71880.0], [90.2, 71880.0], [90.3, 71880.0], [90.4, 72013.0], [90.5, 72013.0], [90.6, 72013.0], [90.7, 72013.0], [90.8, 72030.0], [90.9, 72030.0], [91.0, 72030.0], [91.1, 72030.0], [91.2, 72062.0], [91.3, 72062.0], [91.4, 72062.0], [91.5, 72323.0], [91.6, 72323.0], [91.7, 72323.0], [91.8, 72323.0], [91.9, 72437.0], [92.0, 72437.0], [92.1, 72437.0], [92.2, 72437.0], [92.3, 72451.0], [92.4, 72451.0], [92.5, 72451.0], [92.6, 72461.0], [92.7, 72461.0], [92.8, 72461.0], [92.9, 72461.0], [93.0, 72477.0], [93.1, 72477.0], [93.2, 72477.0], [93.3, 72477.0], [93.4, 72537.0], [93.5, 72537.0], [93.6, 72537.0], [93.7, 72537.0], [93.8, 73003.0], [93.9, 73003.0], [94.0, 73003.0], [94.1, 73368.0], [94.2, 73368.0], [94.3, 73368.0], [94.4, 73368.0], [94.5, 73373.0], [94.6, 73373.0], [94.7, 73373.0], [94.8, 73373.0], [94.9, 73474.0], [95.0, 73474.0], [95.1, 73474.0], [95.2, 73504.0], [95.3, 73504.0], [95.4, 73504.0], [95.5, 73504.0], [95.6, 73588.0], [95.7, 73588.0], [95.8, 73588.0], [95.9, 73588.0], [96.0, 73598.0], [96.1, 73598.0], [96.2, 73598.0], [96.3, 73603.0], [96.4, 73603.0], [96.5, 73603.0], [96.6, 73603.0], [96.7, 73604.0], [96.8, 73604.0], [96.9, 73604.0], [97.0, 73604.0], [97.1, 73638.0], [97.2, 73638.0], [97.3, 73638.0], [97.4, 73638.0], [97.5, 73640.0], [97.6, 73640.0], [97.7, 73640.0], [97.8, 73662.0], [97.9, 73662.0], [98.0, 73662.0], [98.1, 73662.0], [98.2, 73837.0], [98.3, 73837.0], [98.4, 73837.0], [98.5, 73837.0], [98.6, 74012.0], [98.7, 74012.0], [98.8, 74012.0], [98.9, 74025.0], [99.0, 74025.0], [99.1, 74025.0], [99.2, 74025.0], [99.3, 74047.0], [99.4, 74047.0], [99.5, 74047.0], [99.6, 74047.0], [99.7, 74241.0], [99.8, 74241.0], [99.9, 74241.0]], "isOverall": false, "label": "Student Attendance SchoolWise", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2100.0, "maxY": 15.0, "series": [{"data": [[2100.0, 6.0], [2300.0, 3.0], [2400.0, 2.0], [2500.0, 4.0], [2600.0, 4.0], [2800.0, 5.0], [2700.0, 2.0], [2900.0, 11.0], [3000.0, 1.0], [3100.0, 8.0], [3300.0, 4.0], [3200.0, 1.0], [3400.0, 4.0], [3500.0, 4.0], [3700.0, 6.0], [3600.0, 2.0], [3800.0, 8.0], [3900.0, 5.0], [4000.0, 5.0], [4100.0, 2.0], [4200.0, 5.0], [4300.0, 4.0], [4400.0, 1.0], [4500.0, 5.0], [4600.0, 1.0], [4700.0, 9.0], [4800.0, 5.0], [4900.0, 4.0], [5000.0, 2.0], [5100.0, 2.0], [5200.0, 4.0], [5300.0, 1.0], [5400.0, 3.0], [5500.0, 3.0], [5600.0, 6.0], [5700.0, 7.0], [5800.0, 1.0], [6000.0, 5.0], [5900.0, 6.0], [6100.0, 2.0], [6300.0, 9.0], [6200.0, 4.0], [6400.0, 9.0], [6600.0, 4.0], [6500.0, 1.0], [6700.0, 5.0], [6900.0, 2.0], [6800.0, 3.0], [7100.0, 5.0], [7000.0, 4.0], [7200.0, 1.0], [7400.0, 4.0], [7300.0, 1.0], [7500.0, 4.0], [7600.0, 1.0], [7700.0, 3.0], [7900.0, 1.0], [8000.0, 2.0], [8100.0, 1.0], [8600.0, 4.0], [8500.0, 1.0], [8400.0, 1.0], [8300.0, 3.0], [9200.0, 3.0], [8900.0, 1.0], [9000.0, 2.0], [9700.0, 5.0], [9300.0, 5.0], [9500.0, 3.0], [9600.0, 6.0], [9400.0, 3.0], [9800.0, 6.0]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[66700.0, 2.0], [67500.0, 1.0], [69500.0, 4.0], [69900.0, 6.0], [70300.0, 3.0], [70700.0, 5.0], [71500.0, 2.0], [71100.0, 1.0], [72300.0, 1.0], [73500.0, 3.0], [39100.0, 1.0], [48700.0, 1.0], [48100.0, 1.0], [49100.0, 3.0], [49300.0, 1.0], [49500.0, 1.0], [49700.0, 1.0], [50300.0, 1.0], [49900.0, 1.0], [54500.0, 2.0], [54900.0, 2.0], [55100.0, 1.0], [56900.0, 2.0], [55500.0, 1.0], [56300.0, 1.0], [56100.0, 1.0], [56500.0, 1.0], [57900.0, 1.0], [57700.0, 1.0], [58100.0, 4.0], [57500.0, 1.0], [58500.0, 2.0], [60300.0, 1.0], [61300.0, 1.0], [64700.0, 2.0], [65300.0, 1.0], [64900.0, 1.0], [65800.0, 1.0], [66200.0, 2.0], [66600.0, 2.0], [69000.0, 3.0], [68600.0, 1.0], [69400.0, 4.0], [67000.0, 1.0], [67400.0, 1.0], [68200.0, 1.0], [69800.0, 2.0], [70200.0, 11.0], [70600.0, 3.0], [71400.0, 2.0], [71800.0, 1.0], [73000.0, 1.0], [73400.0, 1.0], [73800.0, 1.0], [74200.0, 1.0], [66900.0, 1.0], [66500.0, 1.0], [67700.0, 1.0], [68500.0, 1.0], [69300.0, 5.0], [70100.0, 9.0], [69700.0, 5.0], [70500.0, 1.0], [70900.0, 3.0], [73300.0, 2.0], [71300.0, 1.0], [72500.0, 1.0], [5000.0, 1.0], [6100.0, 1.0], [6300.0, 2.0], [6900.0, 1.0], [12400.0, 1.0], [19700.0, 1.0], [24500.0, 1.0], [27300.0, 1.0], [30300.0, 1.0], [37000.0, 1.0], [37200.0, 1.0], [38600.0, 1.0], [40200.0, 1.0], [45200.0, 1.0], [45600.0, 3.0], [47600.0, 1.0], [47400.0, 1.0], [48200.0, 3.0], [48400.0, 2.0], [48600.0, 2.0], [48800.0, 2.0], [49000.0, 1.0], [49400.0, 2.0], [49200.0, 1.0], [49600.0, 3.0], [50800.0, 1.0], [49800.0, 1.0], [50200.0, 1.0], [54200.0, 1.0], [54600.0, 2.0], [55600.0, 2.0], [56200.0, 1.0], [56400.0, 2.0], [56800.0, 1.0], [56600.0, 1.0], [57200.0, 3.0], [57000.0, 3.0], [57600.0, 3.0], [58000.0, 2.0], [58200.0, 2.0], [58400.0, 1.0], [60000.0, 15.0], [61200.0, 1.0], [65000.0, 1.0], [65400.0, 1.0], [67200.0, 1.0], [66000.0, 3.0], [66800.0, 2.0], [67600.0, 2.0], [69600.0, 3.0], [69200.0, 2.0], [68800.0, 3.0], [68400.0, 6.0], [70000.0, 7.0], [71200.0, 2.0], [70400.0, 3.0], [70800.0, 4.0], [71600.0, 1.0], [72000.0, 3.0], [73600.0, 5.0], [72400.0, 4.0], [74000.0, 3.0]], "isOverall": false, "label": "Student Attendance SchoolWise", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 74200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 15.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 525.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 525.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 15.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 84.11377245508979, "minX": 1.59475488E12, "maxY": 270.0, "series": [{"data": [[1.594755E12, 84.11377245508979], [1.59475488E12, 270.0], [1.59475494E12, 235.81410256410254]], "isOverall": false, "label": "Student Attendance Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.594755E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4888.049107142857, "minX": 1.0, "maxY": 74241.0, "series": [{"data": [[270.0, 4888.049107142857], [269.0, 8371.833333333332], [268.0, 9531.882352941175]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[269.70370370370375, 5627.6629629629615]], "isOverall": false, "label": "Login-Aggregated", "isController": false}, {"data": [[2.0, 71479.0], [3.0, 73640.0], [4.0, 72537.0], [5.0, 70269.0], [6.0, 70248.0], [7.0, 70251.0], [8.0, 73604.0], [9.0, 73603.0], [10.0, 70254.0], [11.0, 70239.0], [12.0, 73598.0], [13.0, 73588.0], [14.0, 74047.0], [17.0, 70975.0], [18.0, 70219.0], [19.0, 74025.0], [20.0, 71385.0], [21.0, 72461.0], [22.0, 70185.0], [23.0, 72451.0], [24.0, 74012.0], [25.0, 72437.0], [27.0, 71819.0], [28.0, 70136.0], [29.0, 70116.0], [30.0, 73474.0], [31.0, 70107.0], [33.0, 72323.0], [32.0, 70086.0], [35.0, 73837.0], [34.0, 70053.0], [37.0, 73373.0], [36.0, 73368.0], [39.0, 73638.0], [38.0, 73662.0], [41.0, 72013.0], [40.0, 72030.0], [43.0, 70921.0], [42.0, 69746.0], [45.0, 69660.0], [44.0, 69723.0], [47.0, 73003.0], [46.0, 69658.0], [49.0, 71295.0], [48.0, 71880.0], [51.0, 71474.0], [50.0, 71138.0], [53.0, 69058.0], [52.0, 70869.0], [55.0, 70707.0], [54.0, 70753.0], [57.0, 68881.0], [56.0, 70677.0], [59.0, 70607.0], [58.0, 70045.0], [61.0, 69932.0], [60.0, 68829.0], [63.0, 70833.0], [62.0, 72062.0], [67.0, 68405.0], [66.0, 71602.0], [65.0, 69739.0], [64.0, 69761.0], [71.0, 69457.0], [70.0, 70997.0], [69.0, 68295.0], [68.0, 69480.0], [75.0, 69324.0], [74.0, 70868.0], [73.0, 71523.0], [72.0, 71586.0], [79.0, 70627.0], [78.0, 70372.0], [77.0, 70829.0], [76.0, 69310.0], [83.0, 70745.0], [82.0, 70270.0], [81.0, 70348.0], [80.0, 70432.0], [87.0, 70243.0], [86.0, 70826.5], [84.0, 69867.0], [91.0, 70103.0], [90.0, 70777.0], [89.0, 67495.0], [88.0, 70213.0], [95.0, 70540.0], [94.0, 69469.0], [93.0, 70431.0], [92.0, 69911.0], [99.0, 70102.0], [97.0, 67088.0], [96.0, 69366.0], [103.0, 69548.0], [102.0, 69555.0], [101.0, 69571.0], [100.0, 70147.0], [107.0, 70059.0], [106.0, 70022.0], [105.0, 69467.0], [104.0, 69516.0], [111.0, 69646.0], [109.0, 70020.0], [108.0, 69863.0], [115.0, 71228.0], [114.0, 69229.0], [113.0, 69276.0], [112.0, 69928.0], [119.0, 70323.0], [118.0, 70117.0], [117.0, 70173.0], [116.0, 68679.0], [123.0, 69922.0], [122.0, 69996.0], [121.0, 69338.0], [120.0, 68418.0], [127.0, 69018.0], [126.0, 69023.0], [125.0, 69604.0], [124.0, 70031.0], [135.0, 67673.0], [134.0, 68866.0], [133.0, 67763.0], [132.0, 68539.0], [131.0, 68459.0], [130.0, 68421.0], [129.0, 68404.0], [128.0, 68404.0], [143.0, 66584.0], [142.0, 66609.0], [141.0, 67216.0], [140.0, 66738.0], [139.0, 66853.0], [138.0, 66230.0], [137.0, 67500.0], [136.0, 67646.0], [151.0, 66074.0], [150.0, 66286.0], [149.0, 66682.0], [148.0, 66011.0], [147.0, 66026.0], [146.0, 66794.0], [145.0, 66803.0], [144.0, 66978.0], [159.0, 60037.0], [157.0, 65376.0], [156.0, 65007.0], [155.0, 64773.0], [154.0, 65886.0], [153.0, 65497.0], [152.0, 64938.0], [167.0, 60019.0], [166.0, 64716.0], [165.0, 60029.25], [163.0, 60018.0], [175.0, 60004.0], [174.0, 60004.0], [173.0, 60002.0], [172.0, 60005.0], [171.0, 60303.0], [170.0, 61342.0], [169.0, 61207.0], [168.0, 60012.0], [183.0, 58220.0], [182.0, 58138.0], [181.0, 58430.0], [180.0, 58530.0], [179.0, 58195.0], [178.0, 58526.0], [177.0, 60002.0], [176.0, 57039.0], [191.0, 58054.0], [190.0, 57644.0], [189.0, 57210.0], [188.0, 58160.0], [187.0, 58141.0], [186.0, 57558.0], [185.0, 58045.0], [184.0, 58215.0], [199.0, 56571.0], [198.0, 57240.0], [197.0, 57658.0], [196.0, 56905.0], [195.0, 57030.0], [194.0, 57914.0], [193.0, 57674.0], [192.0, 57745.0], [207.0, 56184.0], [206.0, 56896.0], [205.0, 56611.0], [204.0, 57284.0], [203.0, 56933.0], [202.0, 56406.0], [201.0, 56339.0], [200.0, 57014.0], [215.0, 54547.0], [214.0, 54902.0], [213.0, 55153.0], [212.0, 55518.0], [211.0, 56253.0], [210.0, 55634.0], [209.0, 55617.0], [208.0, 56422.0], [223.0, 49934.0], [222.0, 50371.0], [221.0, 50812.0], [220.0, 54261.0], [219.0, 54671.0], [218.0, 54556.0], [217.0, 54607.0], [216.0, 54968.0], [231.0, 49527.0], [230.0, 49649.0], [229.0, 49665.0], [228.0, 49412.0], [227.0, 49632.0], [226.0, 49819.0], [225.0, 49722.0], [224.0, 50236.0], [239.0, 48758.0], [238.0, 49086.0], [237.0, 49111.0], [236.0, 49155.0], [235.0, 49163.0], [234.0, 49443.0], [233.0, 49262.0], [232.0, 49315.0], [247.0, 48292.0], [246.0, 48403.0], [245.0, 48253.0], [244.0, 48456.0], [243.0, 48603.0], [242.0, 48636.0], [241.0, 48852.0], [240.0, 48822.0], [255.0, 45279.0], [254.0, 45656.0], [253.0, 45664.0], [252.0, 45643.0], [251.0, 47626.0], [250.0, 47404.0], [249.0, 48190.0], [248.0, 48233.0], [269.0, 6144.0], [270.0, 5066.0], [268.0, 6332.0], [259.0, 37291.0], [258.0, 38679.0], [257.0, 39174.0], [256.0, 40218.0], [267.0, 6352.0], [266.0, 6900.0], [265.0, 12488.0], [264.0, 19775.0], [263.0, 24571.0], [262.0, 27368.0], [261.0, 30368.0], [260.0, 37080.0], [1.0, 74241.0]], "isOverall": false, "label": "Student Attendance SchoolWise", "isController": false}, {"data": [[135.57037037037043, 61749.56666666669]], "isOverall": false, "label": "Student Attendance SchoolWise-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 270.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 900.55, "minX": 1.59475488E12, "maxY": 1.280694195E7, "series": [{"data": [[1.594755E12, 1.280694195E7], [1.59475488E12, 3996.4166666666665], [1.59475494E12, 7863468.633333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.594755E12, 2761.0666666666666], [1.59475488E12, 900.55], [1.59475494E12, 1922.8833333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.594755E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4795.092165898618, "minX": 1.59475488E12, "maxY": 69389.18562874249, "series": [{"data": [[1.59475488E12, 4795.092165898618], [1.59475494E12, 9036.490566037737]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.594755E12, 69389.18562874249], [1.59475494E12, 49363.00000000004]], "isOverall": false, "label": "Student Attendance SchoolWise", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.594755E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4792.133640552992, "minX": 1.59475488E12, "maxY": 44228.13772455088, "series": [{"data": [[1.59475488E12, 4792.133640552992], [1.59475494E12, 9036.490566037737]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.594755E12, 44228.13772455088], [1.59475494E12, 18776.78640776699]], "isOverall": false, "label": "Student Attendance SchoolWise", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.594755E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 9.834951456310673, "minX": 1.59475488E12, "maxY": 3044.207547169812, "series": [{"data": [[1.59475488E12, 2775.405529953917], [1.59475494E12, 3044.207547169812]], "isOverall": false, "label": "Login", "isController": false}, {"data": [[1.594755E12, 10.664670658682631], [1.59475494E12, 9.834951456310673]], "isOverall": false, "label": "Student Attendance SchoolWise", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.594755E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2145.0, "minX": 1.59475488E12, "maxY": 74241.0, "series": [{"data": [[1.594755E12, 74241.0], [1.59475488E12, 7595.0], [1.59475494E12, 61342.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.594755E12, 64716.0], [1.59475488E12, 2145.0], [1.59475494E12, 5066.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.594755E12, 73368.5], [1.59475488E12, 6835.200000000001], [1.59475494E12, 57897.1]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.594755E12, 74126.54], [1.59475488E12, 7548.54], [1.59475494E12, 61273.15]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.594755E12, 73638.1], [1.59475488E12, 7124.0], [1.59475494E12, 58217.25]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.594755E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 3597.5, "minX": 1.0, "maxY": 72444.0, "series": [{"data": [[2.0, 37985.0], [8.0, 65436.5], [37.0, 9545.0], [9.0, 64716.0], [38.0, 6891.5], [10.0, 49579.5], [44.0, 3597.5], [3.0, 55909.0], [12.0, 57587.0], [52.0, 5967.0], [14.0, 56973.5], [15.0, 30041.5], [1.0, 25969.5], [4.0, 59608.0], [18.0, 70309.0], [20.0, 8093.0], [5.0, 48190.0], [22.0, 70072.5], [24.0, 4857.0], [6.0, 57039.0], [26.0, 70208.5], [7.0, 69922.0], [30.0, 72444.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 60015.5], [9.0, 60030.0], [6.0, 60004.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 52.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 3597.5, "minX": 1.0, "maxY": 60029.5, "series": [{"data": [[2.0, 11326.5], [8.0, 25445.5], [37.0, 9545.0], [9.0, 27382.0], [38.0, 6891.5], [10.0, 12497.0], [44.0, 3597.5], [3.0, 20924.0], [12.0, 21905.0], [52.0, 5967.0], [14.0, 22681.0], [15.0, 11352.5], [1.0, 5679.5], [4.0, 25439.0], [18.0, 39975.0], [20.0, 8093.0], [5.0, 10085.0], [22.0, 44619.0], [24.0, 4857.0], [6.0, 41177.0], [26.0, 46627.0], [7.0, 34798.0], [30.0, 58764.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 60015.5], [9.0, 60029.5], [6.0, 60004.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 52.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.8833333333333333, "minX": 1.59475488E12, "maxY": 8.116666666666667, "series": [{"data": [[1.59475488E12, 8.116666666666667], [1.59475494E12, 0.8833333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59475494E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.59475488E12, "maxY": 3.6166666666666667, "series": [{"data": [[1.594755E12, 2.6333333333333333], [1.59475488E12, 3.6166666666666667], [1.59475494E12, 2.5]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.594755E12, 0.15], [1.59475494E12, 0.1]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.594755E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.59475488E12, "maxY": 3.6166666666666667, "series": [{"data": [[1.594755E12, 0.15], [1.59475494E12, 0.1]], "isOverall": false, "label": "Student Attendance SchoolWise-failure", "isController": false}, {"data": [[1.594755E12, 2.6333333333333333], [1.59475494E12, 1.6166666666666667]], "isOverall": false, "label": "Student Attendance SchoolWise-success", "isController": false}, {"data": [[1.59475488E12, 3.6166666666666667], [1.59475494E12, 0.8833333333333333]], "isOverall": false, "label": "Login-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.594755E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.59475488E12, "maxY": 3.6166666666666667, "series": [{"data": [[1.594755E12, 2.6333333333333333], [1.59475488E12, 3.6166666666666667], [1.59475494E12, 2.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.594755E12, 0.15], [1.59475494E12, 0.1]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.594755E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

