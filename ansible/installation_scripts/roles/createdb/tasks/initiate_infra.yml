- name: Creating the datasource csv
  template:
    src: datasource.csv.j2
    dest: datasource.csv
    mode: "0644"
  tags: [ install, update ]

- name: Create directory with mode setting 
  file:
    path: /tmp/postgres
    owner: postgres
    state: directory
    mode: "1755"
  tags: [ install, update ]

- name: copy required files to /tmp/postgres
  copy:
    src: "../../development/postgres/{{ item }}"
    dest: /tmp/postgres
    owner: postgres
    mode: "0644"
  loop: 
    - cQube.sql
    - config.sql
    - infrastructure_master.csv
    - udise_config.csv
  tags: [ install, update ]

- name: copy datasource.csv files to /tmp/postgres
  copy:
    src: datasource.csv
    dest: /tmp/postgres
    owner: postgres
    mode: "0644"
  tags: [ install, update ]

- name: Run queries from SQL script
  become: true
  become_user: postgres
  postgresql_query:
    db: "{{ db_name }}"
    path_to_script: /tmp/postgres/cQube.sql
  tags: [ install, update ]

- name: checking for infra table
  shell: psql "host=localhost dbname={{ db_name }} user={{ db_user }} password={{ db_password }}" -c "select case when (select count(*) from infrastructure_master)=0 then 0 else 1 end;"
  register: output_infra
  tags: [ install, update ]

- name: Copying table structure from csv file
  shell: psql "host=localhost dbname={{ db_name }} user={{ db_user }} password={{ db_password }}" -c "copy infrastructure_staging_init(infrastructure_name,infrastructure_category,status) from '/tmp/postgres/infrastructure_master.csv' delimiter ',' csv header;"
  when: output_infra.stdout_lines[2].strip() == "0"
  tags: [ install, update ]

- name: checking for udise table
  shell: psql "host=localhost dbname={{ db_name }} user={{ db_user }} password={{ db_password }}" -c "select case when (select count(*) from udise_config)=0 then 0 else 1 end;"
  register: output_udise
  tags: [ install, update ]

- name: Copying table structure from csv file
  shell: psql "host=localhost dbname={{ db_name }} user={{ db_user }} password={{ db_password }}" -c "copy udise_config(id,description,column_name,type,indice_id,status,score,trans_columns,metric_config,direction) from '/tmp/postgres/udise_config.csv' delimiter '|' csv header;"
  when: output_udise.stdout_lines[2].strip() == "0"
  tags: [ install, update ]

- name: checking for nifi_template_info table
  shell: psql "host=localhost dbname={{ db_name }} user={{ db_user }} password={{ db_password }}" -c "select case when (select count(*) from nifi_template_info)=0 then 0 else 1 end;"
  register: output_nifi
  tags: [ install, update ]

- name: Copying table structure from csv file
  shell: psql "host=localhost dbname={{ db_name }} user={{ db_user }} password={{ db_password }}" -c "copy nifi_template_info(template,status) from '/tmp/postgres/datasource.csv' delimiter ',' csv header;"
  when: output_nifi.stdout_lines[2].strip() == "0"
  tags: [ install, update ]

- name: Run queries from SQL script
  become: true
  become_user: postgres
  postgresql_query:
    db: "{{ db_name }}"
    path_to_script: /tmp/postgres/config.sql
  tags: [ install, update ]

- name: restart postgresql
  service: name=postgresql state=restarted
  tags: [ install, update ]
